{"id":"ec514efaab73d70b57839770f2f48d27","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAny2EVMMessageReceiver} from \"../interfaces/IAny2EVMMessageReceiver.sol\";\n\nimport {Client} from \"../libraries/Client.sol\";\n\nimport {IERC165} from \"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\";\n\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\n  address internal immutable i_router;\n\n  constructor(address router) {\n    if (router == address(0)) revert InvalidRouter(address(0));\n    i_router = router;\n  }\n\n  /// @notice IERC165 supports an interfaceId\n  /// @param interfaceId The interfaceId to check\n  /// @return true if the interfaceId is supported\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @inheritdoc IAny2EVMMessageReceiver\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\n    _ccipReceive(message);\n  }\n\n  /// @notice Override this function in your implementation.\n  /// @param message Any2EVMMessage\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\n\n  /////////////////////////////////////////////////////////////////////\n  // Plumbing\n  /////////////////////////////////////////////////////////////////////\n\n  /// @notice Return the current router\n  /// @return i_router address\n  function getRouter() public view returns (address) {\n    return address(i_router);\n  }\n\n  error InvalidRouter(address router);\n\n  /// @dev only calls from the set router are accepted.\n  modifier onlyRouter() {\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\n    _;\n  }\n}\n"},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\n/// @notice Application contracts that intend to receive messages from\n/// the router should implement this interface.\ninterface IAny2EVMMessageReceiver {\n  /// @notice Called by the Router to deliver a message.\n  /// If this reverts, any token transfers also revert. The message\n  /// will move to a FAILED state and become available for manual execution.\n  /// @param message CCIP Message\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\n}\n"},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\ninterface IRouterClient {\n  error UnsupportedDestinationChain(uint64 destChainSelector);\n  error InsufficientFeeTokenAmount();\n  error InvalidMsgValue();\n\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\n  /// @param chainSelector The chain to check.\n  /// @return supported is true if it is supported, false if not.\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\n\n  /// @notice Gets a list of all supported tokens which can be sent or received\n  /// to/from a given chain id.\n  /// @param chainSelector The chainSelector.\n  /// @return tokens The addresses of all tokens that are supported.\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\n\n  /// @param destinationChainSelector The destination chainSelector\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return fee returns guaranteed execution fee for the specified message\n  /// delivery to destination chain\n  /// @dev returns 0 fee on invalid message.\n  function getFee(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage memory message\n  ) external view returns (uint256 fee);\n\n  /// @notice Request a message to be sent to the destination chain\n  /// @param destinationChainSelector The destination chain ID\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return messageId The message ID\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\n  /// the overpayment with no refund.\n  function ccipSend(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage calldata message\n  ) external payable returns (bytes32);\n}\n"},"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n  struct EVMTokenAmount {\n    address token; // token address on the local chain.\n    uint256 amount; // Amount of tokens.\n  }\n\n  struct Any2EVMMessage {\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\n    uint64 sourceChainSelector; // Source chain selector.\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\n    bytes data; // payload sent in original message.\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n  }\n\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\n  struct EVM2AnyMessage {\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\n    bytes data; // Data payload\n    EVMTokenAmount[] tokenAmounts; // Token transfers\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\n  }\n\n  // extraArgs will evolve to support new features\n  // bytes4(keccak256(\"CCIP EVMExtraArgsV1\"));\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n  struct EVMExtraArgsV1 {\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\n    bool strict; // See strict sequencing details below.\n  }\n\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `from` to `to` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) external returns (bool);\n}"},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n    * @dev Returns true if this contract implements the interface defined by\n    * `interfaceId`. See the corresponding\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    * to learn more about how these ids are created.\n    *\n    * This function call must use less than 30 000 gas.\n    */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IFunctionsRouter} from \"./interfaces/IFunctionsRouter.sol\";\nimport {IFunctionsClient} from \"./interfaces/IFunctionsClient.sol\";\n\nimport {FunctionsRequest} from \"./libraries/FunctionsRequest.sol\";\n\n/// @title The Chainlink Functions client contract\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\nabstract contract FunctionsClient is IFunctionsClient {\n  using FunctionsRequest for FunctionsRequest.Request;\n\n  IFunctionsRouter internal immutable i_router;\n\n  event RequestSent(bytes32 indexed id);\n  event RequestFulfilled(bytes32 indexed id);\n\n  error OnlyRouterCanFulfill();\n\n  constructor(address router) {\n    i_router = IFunctionsRouter(router);\n  }\n\n  /// @notice Sends a Chainlink Functions request\n  /// @param data The CBOR encoded bytes data for a Functions request\n  /// @param subscriptionId The subscription ID that will be charged to service the request\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\n  /// @return requestId The generated request ID for this request\n  function _sendRequest(\n    bytes memory data,\n    uint64 subscriptionId,\n    uint32 callbackGasLimit,\n    bytes32 donId\n  ) internal returns (bytes32) {\n    bytes32 requestId = i_router.sendRequest(\n      subscriptionId,\n      data,\n      FunctionsRequest.REQUEST_DATA_VERSION,\n      callbackGasLimit,\n      donId\n    );\n    emit RequestSent(requestId);\n    return requestId;\n  }\n\n  /// @notice User defined function to handle a response from the DON\n  /// @param requestId The request ID, returned by sendRequest()\n  /// @param response Aggregated response from the execution of the user's source code\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\n  /// @dev Either response or error parameter will be set, but never both\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\n\n  /// @inheritdoc IFunctionsClient\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\n    if (msg.sender != address(i_router)) {\n      revert OnlyRouterCanFulfill();\n    }\n    fulfillRequest(requestId, response, err);\n    emit RequestFulfilled(requestId);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @title Chainlink Functions client interface.\ninterface IFunctionsClient {\n  /// @notice Chainlink Functions response handler called by the Functions Router\n  /// during fullilment from the designated transmitter node in an OCR round.\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\n  /// @param response Aggregated response from the request's source code.\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\n  /// @dev Either response or error parameter will be set, but never both.\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\n}\n"},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {FunctionsResponse} from \"../libraries/FunctionsResponse.sol\";\n\n/// @title Chainlink Functions Router interface.\ninterface IFunctionsRouter {\n  /// @notice The identifier of the route to retrieve the address of the access control contract\n  /// The access control contract controls which accounts can manage subscriptions\n  /// @return id - bytes32 id that can be passed to the \"getContractById\" of the Router\n  function getAllowListId() external view returns (bytes32);\n\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\n  /// The access control contract controls which accounts can manage subscriptions\n  function setAllowListId(bytes32 allowListId) external;\n\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\n  /// @return adminFee\n  function getAdminFee() external view returns (uint72 adminFee);\n\n  /// @notice Sends a request using the provided subscriptionId\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\n  /// a client can make requests from different contracts referencing the same subscription\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n  /// @param dataVersion - Gas limit for the fulfillment callback\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\n  /// @param donId - An identifier used to determine which route to send the request along\n  /// @return requestId - A unique request identifier\n  function sendRequest(\n    uint64 subscriptionId,\n    bytes calldata data,\n    uint16 dataVersion,\n    uint32 callbackGasLimit,\n    bytes32 donId\n  ) external returns (bytes32);\n\n  /// @notice Sends a request to the proposed contracts\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\n  /// a client can make requests from different contracts referencing the same subscription\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n  /// @param dataVersion - Gas limit for the fulfillment callback\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\n  /// @param donId - An identifier used to determine which route to send the request along\n  /// @return requestId - A unique request identifier\n  function sendRequestToProposed(\n    uint64 subscriptionId,\n    bytes calldata data,\n    uint16 dataVersion,\n    uint32 callbackGasLimit,\n    bytes32 donId\n  ) external returns (bytes32);\n\n  /// @notice Fulfill the request by:\n  /// - calling back the data that the Oracle returned to the client contract\n  /// - pay the DON for processing the request\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\n  /// @param response response data from DON consensus\n  /// @param err error from DON consensus\n  /// @param juelsPerGas - current rate of juels/gas\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\n  /// @param transmitter - The Node that transmitted the OCR report\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\n  /// @return fulfillResult -\n  /// @return callbackGasCostJuels -\n  function fulfill(\n    bytes memory response,\n    bytes memory err,\n    uint96 juelsPerGas,\n    uint96 costWithoutFulfillment,\n    address transmitter,\n    FunctionsResponse.Commitment memory commitment\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\n\n  /// @notice Validate requested gas limit is below the subscription max.\n  /// @param subscriptionId subscription ID\n  /// @param callbackGasLimit desired callback gas limit\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\n\n  /// @notice Get the current contract given an ID\n  /// @param id A bytes32 identifier for the route\n  /// @return contract The current contract address\n  function getContractById(bytes32 id) external view returns (address);\n\n  /// @notice Get the proposed next contract given an ID\n  /// @param id A bytes32 identifier for the route\n  /// @return contract The current or proposed contract address\n  function getProposedContractById(bytes32 id) external view returns (address);\n\n  /// @notice Return the latest proprosal set\n  /// @return ids The identifiers of the contracts to update\n  /// @return to The addresses of the contracts that will be updated to\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\n\n  /// @notice Proposes one or more updates to the contract routes\n  /// @dev Only callable by owner\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\n\n  /// @notice Updates the current contract routes to the proposed contracts\n  /// @dev Only callable by owner\n  function updateContracts() external;\n\n  /// @dev Puts the system into an emergency stopped state.\n  /// @dev Only callable by owner\n  function pause() external;\n\n  /// @dev Takes the system out of an emergency stopped state.\n  /// @dev Only callable by owner\n  function unpause() external;\n}\n"},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {FunctionsResponse} from \"../libraries/FunctionsResponse.sol\";\n\n/// @title Chainlink Functions Subscription interface.\ninterface IFunctionsSubscriptions {\n  struct Subscription {\n    uint96 balance; // ═════════╗ Common LINK balance that is controlled by the Router to be used for all consumer requests.\n    address owner; // ══════════╝ The owner can fund/withdraw/cancel the subscription.\n    uint96 blockedBalance; // ══╗ LINK balance that is reserved to pay for pending consumer requests.\n    address proposedOwner; // ══╝ For safely transferring sub ownership.\n    address[] consumers; // ════╸ Client contracts that can use the subscription\n    bytes32 flags; // ══════════╸ Per-subscription flags\n  }\n\n  struct Consumer {\n    bool allowed; // ══════════════╗ Owner can fund/withdraw/cancel the sub.\n    uint64 initiatedRequests; //   ║ The number of requests that have been started\n    uint64 completedRequests; // ══╝ The number of requests that have successfully completed or timed out\n  }\n\n  /// @notice Get details about a subscription.\n  /// @param subscriptionId - the ID of the subscription\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\n\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\n  function getSubscriptionsInRange(\n    uint64 subscriptionIdStart,\n    uint64 subscriptionIdEnd\n  ) external view returns (Subscription[] memory);\n\n  /// @notice Get details about a consumer of a subscription.\n  /// @param client - the consumer contract address\n  /// @param subscriptionId - the ID of the subscription\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\n\n  /// @notice Get details about the total amount of LINK within the system\n  /// @return totalBalance - total Juels of LINK held by the contract\n  function getTotalBalance() external view returns (uint96);\n\n  /// @notice Get details about the total number of subscription accounts\n  /// @return count - total number of subscriptions in the system\n  function getSubscriptionCount() external view returns (uint64);\n\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\n  /// @dev The commitment can be found on the \"OracleRequest\" event created when sending the request.\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\n\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\n  /// @notice If amount is 0 the full balance will be withdrawn\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\n  /// @param recipient where to send the funds\n  /// @param amount amount to withdraw\n  function oracleWithdraw(address recipient, uint96 amount) external;\n\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\n  /// @dev Only callable by the Router Owner\n  /// @param subscriptionId subscription id\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\n  function ownerCancelSubscription(uint64 subscriptionId) external;\n\n  /// @notice Recover link sent with transfer instead of transferAndCall.\n  /// @dev Only callable by the Router Owner\n  /// @param to address to send link to\n  function recoverFunds(address to) external;\n\n  /// @notice Create a new subscription.\n  /// @return subscriptionId - A unique subscription id.\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n  /// @dev Note to fund the subscription, use transferAndCall. For example\n  /// @dev  LINKTOKEN.transferAndCall(\n  /// @dev    address(ROUTER),\n  /// @dev    amount,\n  /// @dev    abi.encode(subscriptionId));\n  function createSubscription() external returns (uint64);\n\n  /// @notice Create a new subscription and add a consumer.\n  /// @return subscriptionId - A unique subscription id.\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n  /// @dev Note to fund the subscription, use transferAndCall. For example\n  /// @dev  LINKTOKEN.transferAndCall(\n  /// @dev    address(ROUTER),\n  /// @dev    amount,\n  /// @dev    abi.encode(subscriptionId));\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\n\n  /// @notice Propose a new owner for a subscription.\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param newOwner - proposed new owner of the subscription\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\n\n  /// @notice Accept an ownership transfer.\n  /// @param subscriptionId - ID of the subscription\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\n\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param consumer - Consumer to remove from the subscription\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\n\n  /// @notice Add a consumer to a Chainlink Functions subscription.\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param consumer - New consumer which can use the subscription\n  function addConsumer(uint64 subscriptionId, address consumer) external;\n\n  /// @notice Cancel a subscription\n  /// @dev Only callable by the Subscription's owner\n  /// @param subscriptionId - ID of the subscription\n  /// @param to - Where to send the remaining LINK to\n  function cancelSubscription(uint64 subscriptionId, address to) external;\n\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\n  /// @param subscriptionId - ID of the subscription\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\n  /// @dev Used to disable subscription canceling while outstanding request are present.\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\n\n  /// @notice Set subscription specific flags for a subscription.\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\n  /// @param subscriptionId - ID of the subscription\n  /// @param flags - desired flag values\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\n\n  /// @notice Get flags for a given subscription.\n  /// @param subscriptionId - ID of the subscription\n  /// @return flags - current flag values\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\n}\n"},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {CBOR} from \"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\";\n\n/// @title Library for encoding the input data of a Functions request into CBOR\nlibrary FunctionsRequest {\n  using CBOR for CBOR.CBORBuffer;\n\n  uint16 public constant REQUEST_DATA_VERSION = 1;\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\n\n  enum Location {\n    Inline, // Provided within the Request\n    Remote, // Hosted through remote location that can be accessed through a provided URL\n    DONHosted // Hosted on the DON's storage\n  }\n\n  enum CodeLanguage {\n    JavaScript\n    // In future version we may add other languages\n  }\n\n  struct Request {\n    Location codeLocation; // ════════════╸ The location of the source code that will be executed on each node in the DON\n    Location secretsLocation; // ═════════╸ The location of secrets that will be passed into the source code. *Only Remote secrets are supported\n    CodeLanguage language; // ════════════╸ The coding language that the source code is written in\n    string source; // ════════════════════╸ Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\n    bytes encryptedSecretsReference; // ══╸ Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\n    string[] args; // ════════════════════╸ String arguments that will be passed into the source code\n    bytes[] bytesArgs; // ════════════════╸ Bytes arguments that will be passed into the source code\n  }\n\n  error EmptySource();\n  error EmptySecrets();\n  error EmptyArgs();\n  error NoInlineSecrets();\n\n  /// @notice Encodes a Request to CBOR encoded bytes\n  /// @param self The request to encode\n  /// @return CBOR encoded bytes\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\n\n    buffer.writeString(\"codeLocation\");\n    buffer.writeUInt256(uint256(self.codeLocation));\n\n    buffer.writeString(\"language\");\n    buffer.writeUInt256(uint256(self.language));\n\n    buffer.writeString(\"source\");\n    buffer.writeString(self.source);\n\n    if (self.args.length > 0) {\n      buffer.writeString(\"args\");\n      buffer.startArray();\n      for (uint256 i = 0; i < self.args.length; ++i) {\n        buffer.writeString(self.args[i]);\n      }\n      buffer.endSequence();\n    }\n\n    if (self.encryptedSecretsReference.length > 0) {\n      if (self.secretsLocation == Location.Inline) {\n        revert NoInlineSecrets();\n      }\n      buffer.writeString(\"secretsLocation\");\n      buffer.writeUInt256(uint256(self.secretsLocation));\n      buffer.writeString(\"secrets\");\n      buffer.writeBytes(self.encryptedSecretsReference);\n    }\n\n    if (self.bytesArgs.length > 0) {\n      buffer.writeString(\"bytesArgs\");\n      buffer.startArray();\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\n        buffer.writeBytes(self.bytesArgs[i]);\n      }\n      buffer.endSequence();\n    }\n\n    return buffer.buf.buf;\n  }\n\n  /// @notice Initializes a Chainlink Functions Request\n  /// @dev Sets the codeLocation and code on the request\n  /// @param self The uninitialized request\n  /// @param codeLocation The user provided source code location\n  /// @param language The programming language of the user code\n  /// @param source The user provided source code or a url\n  function initializeRequest(\n    Request memory self,\n    Location codeLocation,\n    CodeLanguage language,\n    string memory source\n  ) internal pure {\n    if (bytes(source).length == 0) revert EmptySource();\n\n    self.codeLocation = codeLocation;\n    self.language = language;\n    self.source = source;\n  }\n\n  /// @notice Initializes a Chainlink Functions Request\n  /// @dev Simplified version of initializeRequest for PoC\n  /// @param self The uninitialized request\n  /// @param javaScriptSource The user provided JS code (must not be empty)\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\n  }\n\n  /// @notice Adds Remote user encrypted secrets to a Request\n  /// @param self The initialized request\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\n\n    self.secretsLocation = Location.Remote;\n    self.encryptedSecretsReference = encryptedSecretsReference;\n  }\n\n  /// @notice Adds DON-hosted secrets reference to a Request\n  /// @param self The initialized request\n  /// @param slotID Slot ID of the user's secrets hosted on DON\n  /// @param version User data version (for the slotID)\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\n\n    buffer.writeString(\"slotID\");\n    buffer.writeUInt64(slotID);\n    buffer.writeString(\"version\");\n    buffer.writeUInt64(version);\n\n    self.secretsLocation = Location.DONHosted;\n    self.encryptedSecretsReference = buffer.buf.buf;\n  }\n\n  /// @notice Sets args for the user run function\n  /// @param self The initialized request\n  /// @param args The array of string args (must not be empty)\n  function setArgs(Request memory self, string[] memory args) internal pure {\n    if (args.length == 0) revert EmptyArgs();\n\n    self.args = args;\n  }\n\n  /// @notice Sets bytes args for the user run function\n  /// @param self The initialized request\n  /// @param args The array of bytes args (must not be empty)\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\n    if (args.length == 0) revert EmptyArgs();\n\n    self.bytesArgs = args;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IFunctionsSubscriptions} from \"../interfaces/IFunctionsSubscriptions.sol\";\n\n/// @title Library of types that are used for fulfillment of a Functions request\nlibrary FunctionsResponse {\n  // Used to send request information from the Router to the Coordinator\n  struct RequestMeta {\n    bytes data; // ══════════════════╸ CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\n    bytes32 flags; // ═══════════════╸ Per-subscription flags\n    address requestingContract; // ══╗ The client contract that is sending the request\n    uint96 availableBalance; // ═════╝ Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\n    uint72 adminFee; // ═════════════╗ Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\n    uint64 subscriptionId; //        ║ Identifier of the billing subscription that will be charged for the request\n    uint64 initiatedRequests; //     ║ The number of requests that have been started\n    uint32 callbackGasLimit; //      ║ The amount of gas that the callback to the consuming contract will be given\n    uint16 dataVersion; // ══════════╝ The version of the structure of the CBOR encoded request data\n    uint64 completedRequests; // ════╗ The number of requests that have successfully completed or timed out\n    address subscriptionOwner; // ═══╝ The owner of the billing subscription\n  }\n\n  enum FulfillResult {\n    FULFILLED, // 0\n    USER_CALLBACK_ERROR, // 1\n    INVALID_REQUEST_ID, // 2\n    COST_EXCEEDS_COMMITMENT, // 3\n    INSUFFICIENT_GAS_PROVIDED, // 4\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\n    INVALID_COMMITMENT // 6\n  }\n\n  struct Commitment {\n    bytes32 requestId; // ═════════════════╸ A unique identifier for a Chainlink Functions request\n    address coordinator; // ═══════════════╗ The Coordinator contract that manages the DON that is servicing a request\n    uint96 estimatedTotalCostJuels; // ════╝ The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\n    address client; // ════════════════════╗ The client contract that sent the request\n    uint64 subscriptionId; //              ║ Identifier of the billing subscription that will be charged for the request\n    uint32 callbackGasLimit; // ═══════════╝ The amount of gas that the callback to the consuming contract will be given\n    uint72 adminFee; // ═══════════════════╗ Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\n    uint72 donFee; //                      ║ Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\n    uint40 gasOverheadBeforeCallback; //   ║ Represents the average gas execution cost before the fulfillment callback.\n    uint40 gasOverheadAfterCallback; //    ║ Represents the average gas execution cost after the fulfillment callback.\n    uint32 timeoutTimestamp; // ═══════════╝ The timestamp at which a request will be eligible to be timed out\n  }\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"},"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol":{"content":"// SPDX-License-Identifier: BSD-2-Clause\npragma solidity ^0.8.4;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for appending to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary Buffer {\n    /**\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n    *      a capacity. The capacity may be longer than the current value, in\n    *      which case it can be extended without the need to allocate more memory.\n    */\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    /**\n    * @dev Initializes a buffer with an initial capacity.\n    * @param buf The buffer to initialize.\n    * @param capacity The number of bytes of space to allocate the buffer.\n    * @return The buffer, for chaining.\n    */\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            let fpm := add(32, add(ptr, capacity))\n            if lt(fpm, ptr) {\n                revert(0, 0)\n            }\n            mstore(0x40, fpm)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Initializes a new buffer from an existing bytes object.\n    *      Changes to the buffer may mutate the original value.\n    * @param b The bytes object to initialize the buffer with.\n    * @return A new buffer.\n    */\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\n        buffer memory buf;\n        buf.buf = b;\n        buf.capacity = b.length;\n        return buf;\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    /**\n    * @dev Sets buffer length to 0.\n    * @param buf The buffer to truncate.\n    * @return The original buffer, for chaining..\n    */\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\n        assembly {\n            let bufptr := mload(buf)\n            mstore(bufptr, 0)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to copy.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\n        require(len <= data.length);\n\n        uint off = buf.buf.length;\n        uint newCapacity = off + len;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint dest;\n        uint src;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + offset + sizeof(buffer length)\n            dest := add(add(bufptr, 32), off)\n            // Update buffer length if we're extending it\n            if gt(newCapacity, buflen) {\n                mstore(bufptr, newCapacity)\n            }\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        unchecked {\n            uint mask = (256 ** (32 - len)) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask))\n                let destpart := and(mload(dest), mask)\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n        return append(buf, data, data.length);\n    }\n\n    /**\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint offPlusOne = off + 1;\n        if (off >= buf.capacity) {\n            resize(buf, offPlusOne * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + off\n            let dest := add(add(bufptr, off), 32)\n            mstore8(dest, data)\n            // Update buffer length if we extended it\n            if gt(offPlusOne, mload(bufptr)) {\n                mstore(bufptr, offPlusOne)\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n    *      exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to write (left-aligned).\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        unchecked {\n            uint mask = (256 ** len) - 1;\n            // Right-align data\n            data = data >> (8 * (32 - len));\n            assembly {\n                // Memory address of the buffer data\n                let bufptr := mload(buf)\n                // Address = buffer address + sizeof(buffer length) + newCapacity\n                let dest := add(bufptr, newCapacity)\n                mstore(dest, or(and(mload(dest), not(mask)), data))\n                // Update buffer length if we extended it\n                if gt(newCapacity, mload(bufptr)) {\n                    mstore(bufptr, newCapacity)\n                }\n            }\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chhaining.\n    */\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n        return append(buf, bytes32(data), 20);\n    }\n\n    /**\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n        return append(buf, data, 32);\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     *      exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @param len The number of bytes to write (right-aligned).\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint mask = (256 ** len) - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + newCapacity\n            let dest := add(bufptr, newCapacity)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length if we extended it\n            if gt(newCapacity, mload(bufptr)) {\n                mstore(bufptr, newCapacity)\n            }\n        }\n        return buf;\n    }\n}"},"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../../@ensdomains/buffer/v0.1.0/Buffer.sol\";\n\n/**\n* @dev A library for populating CBOR encoded payload in Solidity.\n*\n* https://datatracker.ietf.org/doc/html/rfc7049\n*\n* The library offers various write* and start* methods to encode values of different types.\n* The resulted buffer can be obtained with data() method.\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\n* in an invalid CBOR if start/write/end flow is violated.\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\n* except for nested start/end pairs.\n*/\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    struct CBORBuffer {\n        Buffer.buffer buf;\n        uint256 depth;\n    }\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_TAG = 6;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n    uint8 private constant CBOR_FALSE = 20;\n    uint8 private constant CBOR_TRUE = 21;\n    uint8 private constant CBOR_NULL = 22;\n    uint8 private constant CBOR_UNDEFINED = 23;\n\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\n        Buffer.init(cbor.buf, capacity);\n        cbor.depth = 0;\n        return cbor;\n    }\n\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\n        require(buf.depth == 0, \"Invalid CBOR\");\n        return buf.buf.buf;\n    }\n\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n        writeBytes(buf, abi.encode(value));\n    }\n\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\n        if (value < 0) {\n            buf.buf.appendUint8(\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\n            );\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\n        } else {\n            writeUInt256(buf, uint256(value));\n        }\n    }\n\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\n        if(value >= 0) {\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n        } else{\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\n        }\n    }\n\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n        buf.buf.append(value);\n    }\n\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n        buf.buf.append(bytes(value));\n    }\n\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\n    }\n\n    function writeNull(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_NULL);\n    }\n\n    function writeUndefined(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_UNDEFINED);\n    }\n\n    function startArray(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n        buf.depth += 1;\n    }\n\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\n    }\n\n    function startMap(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n        buf.depth += 1;\n    }\n\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\n    }\n\n    function endSequence(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n        buf.depth -= 1;\n    }\n\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\n        writeString(buf, key);\n        writeString(buf, value);\n    }\n\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\n        writeString(buf, key);\n        writeBytes(buf, value);\n    }\n\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\n        writeString(buf, key);\n        writeUInt256(buf, value);\n    }\n\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\n        writeString(buf, key);\n        writeInt256(buf, value);\n    }\n\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\n        writeString(buf, key);\n        writeUInt64(buf, value);\n    }\n\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\n        writeString(buf, key);\n        writeInt64(buf, value);\n    }\n\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\n        writeString(buf, key);\n        writeBool(buf, value);\n    }\n\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeNull(buf);\n    }\n\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeUndefined(buf);\n    }\n\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startMap(buf);\n    }\n\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startArray(buf);\n    }\n\n    function writeFixedNumeric(\n        CBORBuffer memory buf,\n        uint8 major,\n        uint64 value\n    ) private pure {\n        if (value <= 23) {\n            buf.buf.appendUint8(uint8((major << 5) | value));\n        } else if (value <= 0xFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 24));\n            buf.buf.appendInt(value, 1);\n        } else if (value <= 0xFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 25));\n            buf.buf.appendInt(value, 2);\n        } else if (value <= 0xFFFFFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 26));\n            buf.buf.appendInt(value, 4);\n        } else {\n            buf.buf.appendUint8(uint8((major << 5) | 27));\n            buf.buf.appendInt(value, 8);\n        }\n    }\n\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\n        private\n        pure\n    {\n        buf.buf.appendUint8(uint8((major << 5) | 31));\n    }\n\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\n        private\n        pure\n    {\n        writeFixedNumeric(buf, major, length);\n    }\n\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\n    }\n}"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/HorizonFujiAssistant.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract HorizonFujiAssistant {\r\n\r\n    /*CONVERTER FUNCTION */\r\n    function stringToUint(string memory s) public pure returns (uint) {\r\n        bytes memory b = bytes(s);\r\n        uint result = 0;\r\n        bool decimalFound = false;\r\n        uint decimalPlace = 0;\r\n\r\n        for (uint i = 0; i < b.length; i++) {\r\n            if (b[i] == 'R' || b[i] == '$' || b[i] == '.' || b[i] == ' ') {\r\n                continue;\r\n            }\r\n\r\n            if (b[i] == ',') {\r\n                decimalFound = true;\r\n                continue;\r\n            }\r\n\r\n            if (b[i] >= 0x30 && b[i] <= 0x39) { // ASCII '0' é 48\r\n                result = result * 10 + (uint8(b[i]) - 48);\r\n                if (decimalFound) {\r\n                    decimalPlace++;\r\n                    if (decimalPlace >= 2) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                revert(\"That is not a valid string\");\r\n            }\r\n        }\r\n\r\n        if (decimalPlace < 2) {\r\n            if (decimalPlace == 1) {\r\n                result *= 10;\r\n            } else if (decimalPlace == 0 && decimalFound) {\r\n                result *= 100;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"},"contracts/HorizonFujiR.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\r\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\r\nimport {CCIPReceiver} from \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\";\r\nimport {IERC20} from \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\";\r\nimport {LinkTokenInterface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"./HorizonFunctions.sol\";\r\nimport \"./HorizonFujiS.sol\";\r\n\r\n// Custom errors to provide more descriptive revert messages.\r\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\r\nerror NothingToWithdraw();\r\nerror FailedToWithdrawEth(address owner, address target, uint256 value);\r\nerror DestinationChainNotWhitelisted(uint64 destinationChainSelector);\r\nerror SourceChainNotWhitelisted(uint64 sourceChainSelector);\r\nerror SenderNotWhitelisted(address sender);\r\n\r\ncontract HorizonFujiR is CCIPReceiver {\r\n\r\n    // Event emitted when a message is received from another chain.\r\n    event MessageReceived( bytes32 indexed messageId, uint64 indexed sourceChainSelector, address sender, string text);\r\n    event TheRwaValueIsLessThanTheMinimumNeeded(uint _rwaId, uint _rwaValue);\r\n    event VerifyingRwaValue(uint _rwaId, string[] args);\r\n    event EnsuranceAdd(address provisoryOwner, uint _rwaId, uint _titleId, uint _drawNumber);\r\n    event RWARefunded(uint _titleId, uint _drawNumber, address _rwaOwner, uint _colateralId);\r\n    event RWAPriceAtMoment(uint _contractId, uint _rwaValue, uint _referenceValue);\r\n    event PriceLowEvent(uint _contractId, uint _rwaValue, uint _referenceValue);\r\n    event TitleCancelledTheRWAWillBeSold(uint _contractId,  uint _rwaValue, uint rwaValue);\r\n\r\n    //CCIP State Variables to store the last id, received text\r\n    bytes32 private lastReceivedMessageId;\r\n    bytes private lastReceivedText;\r\n    \r\n    //State variable to store the polygon receiver address\r\n    address private horizonR;\r\n\r\n    //State variables to store the Functions params\r\n    uint64 private subscriptionId;\r\n    address router;\r\n    uint32 gasLimit;\r\n    bytes32 donID;\r\n\r\n    //State variables to store the CCIP params\r\n    LinkTokenInterface linkToken;\r\n    \r\n    struct Permissions {\r\n        uint idTitle;\r\n        uint drawNumber;\r\n        uint contractId;\r\n        address rwaOwner;\r\n        uint ensuranceValueNeeded;\r\n        uint ensureValueNow;\r\n        uint colateralId;\r\n        string[] args;\r\n        bytes32 lastRequestId;\r\n        uint lastRequestTime;\r\n        uint lastResponseTime;\r\n        bool colateralLocked;\r\n        bool isPermission;\r\n    }\r\n\r\n    struct RwaMonitor{\r\n        uint rwaId;\r\n        bytes32 hashPermission;\r\n        bool isActive;\r\n    }\r\n\r\n    //Array to keep track of RWA's prices\r\n    RwaMonitor[] rwaMonitors;\r\n    // Mapping to keep track of colateral permissions\r\n    mapping(bytes32 => Permissions) public permissionsInfo;\r\n\r\n    // Mapping to keep track of whitelisted source chains.\r\n    mapping(uint64 => bool) public whitelistedSourceChains;\r\n    // Mapping to keep track of whitelisted senders.\r\n    mapping(address => bool) public whitelistedSenders;\r\n\r\n    HorizonFujiS sender = HorizonFujiS(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDEREÇO\r\n    HorizonFunctions functions = HorizonFunctions(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDEREÇO\r\n    ERC721 rwa = ERC721(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDEREÇO\r\n\r\n    constructor(address _linkToken, // 0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\r\n                address _routerCCIP) CCIPReceiver(_routerCCIP) { //0x554472a2720e5e7d5d3c817529aba05eed5f82d8\r\n        LinkTokenInterface linkToken = LinkTokenInterface(_linkToken);\r\n    }\r\n\r\n    function addReceiver(address _receiverAddress) public {\r\n        horizonR = _receiverAddress;\r\n    }\r\n\r\n    /* handle a received message*/\r\n    function _ccipReceive( Client.Any2EVMMessage memory any2EvmMessage) internal override /*onlyWhitelistedSourceChain(any2EvmMessage.sourceChainSelector) onlyWhitelistedSenders(abi.decode(any2EvmMessage.sender, (address)))*/ {\r\n        lastReceivedMessageId = any2EvmMessage.messageId; // fetch the messageId\r\n        lastReceivedText = abi.decode(any2EvmMessage.data, (bytes)); // abi-decoding of the sent text\r\n\r\n        bytes32 permissionHash;\r\n        uint _ensuranceValueNeeded;\r\n        bool _colateralLocked;\r\n\r\n        (permissionHash, _ensuranceValueNeeded, _colateralLocked) = abi.decode(lastReceivedText, (bytes32, uint, bool));\r\n\r\n        handlePermission(permissionHash, _ensuranceValueNeeded, _colateralLocked);\r\n\r\n        emit MessageReceived( any2EvmMessage.messageId, any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)), abi.decode(any2EvmMessage.data, (string)));\r\n    }\r\n\r\n    function handlePermission(bytes32 _permissionHash,\r\n                              uint _ensuranceValueNeeded,\r\n                              bool _colateralLocked) internal{\r\n\r\n        string[] memory emptyArray = new string[](0);\r\n\r\n        Permissions memory permission = Permissions({\r\n            idTitle: 0,\r\n            contractId: 0,\r\n            drawNumber: 0,\r\n            rwaOwner: address(0),\r\n            ensuranceValueNeeded: (_ensuranceValueNeeded * 5),\r\n            ensureValueNow: 0,\r\n            colateralId: 0,\r\n            args: emptyArray,\r\n            lastRequestId: 0,\r\n            lastRequestTime: 0,\r\n            lastResponseTime: 0,\r\n            colateralLocked: _colateralLocked,\r\n            isPermission: true\r\n        });\r\n\r\n        if(_colateralLocked == true){\r\n            permissionsInfo[_permissionHash] = permission;\r\n        }else{\r\n            if(_colateralLocked == false){\r\n                sendRwaBackToOwner(_permissionHash);\r\n            }\r\n        }\r\n    }\r\n\r\n    function verifyColateralValue(uint256 _titleId, uint _contractId, uint _drawNumber, uint _rwaId, string[] calldata args) public { //[\"motos\",77,5223,\"2015-1\"]\r\n        bytes32 permissionHash = keccak256(abi.encodePacked(_titleId, _contractId, _drawNumber));\r\n\r\n        require(permissionsInfo[permissionHash].isPermission == true, \"This permission didn't exists!\");\r\n        require(msg.sender == rwa.ownerOf(_rwaId), \"You must be the owner of the informed RWA!\");\r\n\r\n        Permissions storage permission = permissionsInfo[permissionHash];\r\n\r\n        permission.idTitle = _titleId;\r\n        permission.contractId = _contractId;\r\n        permission.drawNumber = _drawNumber;\r\n        permission.rwaOwner = msg.sender;\r\n        permission.colateralId = _rwaId;\r\n        permission.args = args;\r\n\r\n        bytes32 requestId = functions.sendRequest(args);\r\n\r\n        permission.lastRequestId = requestId;\r\n\r\n        emit VerifyingRwaValue(_rwaId, args);\r\n    }\r\n\r\n    function addCollateral(uint256 _titleId, uint _contractId, uint _drawNumber, uint _rwaId) public {\r\n        bytes32 permissionHash = keccak256(abi.encodePacked(_titleId, _contractId, _drawNumber));\r\n\r\n        Permissions storage permission = permissionsInfo[permissionHash];\r\n\r\n        require(permission.isPermission == true, \"This permission didn't exists!\");\r\n\r\n        (uint vehicleValue, uint responseTime) = functions.returnFunctionsInfo(permission.lastRequestId);\r\n\r\n        if(vehicleValue >= permission.ensuranceValueNeeded){\r\n            \r\n            permission.ensureValueNow = vehicleValue;\r\n            permission.lastResponseTime = responseTime;\r\n\r\n            uint targetPrice = permission.ensuranceValueNeeded;\r\n\r\n            require(vehicleValue >= targetPrice, \"The ensurance must have at least 10 times the value of the value needed!\");\r\n            \r\n            rwa.transferFrom(msg.sender, address(this), _rwaId);\r\n\r\n            address provisoryOwner = rwa.ownerOf(_rwaId);\r\n\r\n            rwaMonitors.push(RwaMonitor({\r\n                rwaId: _rwaId,\r\n                hashPermission: permissionHash,\r\n                isActive: true\r\n            }));\r\n            \r\n            bytes memory colateralAdded = abi.encode(permissionHash, rwa, _rwaId);\r\n\r\n            sender.sendMessagePayLINK(12532609583862916517, horizonR, colateralAdded); //Destination chainId - 12532609583862916517\r\n\r\n            emit EnsuranceAdd(provisoryOwner, _rwaId, _titleId, _drawNumber);\r\n        } else{\r\n            emit TheRwaValueIsLessThanTheMinimumNeeded(_rwaId, vehicleValue);\r\n        }\r\n    }\r\n\r\n    function sendRwaBackToOwner(bytes32 _permissionHash) internal{\r\n        require(permissionsInfo[_permissionHash].isPermission == true, \"This permission didnt exists!\");\r\n\r\n        Permissions storage permission = permissionsInfo[_permissionHash];\r\n\r\n        for(uint i = 0; rwaMonitors[i].hashPermission != _permissionHash; i++){\r\n            if(rwaMonitors[i].hashPermission == _permissionHash){\r\n                rwaMonitors[i].isActive = false;\r\n            }\r\n        }\r\n\r\n        rwa.safeTransferFrom(address(this), permission.rwaOwner, permission.colateralId);\r\n\r\n        emit RWARefunded(permission.idTitle, permission.drawNumber, permission.rwaOwner, permission.colateralId);\r\n    }\r\n        \r\n    function checkColateralPrice() internal { //Triggered by Automation\r\n        for (uint256 i = 0; i < rwaMonitors.length; i++) {\r\n\r\n            if(rwaMonitors[i].isActive == true){\r\n                Permissions storage permission = permissionsInfo[rwaMonitors[i].hashPermission];\r\n                \r\n                bytes32 requestId = functions.sendRequest(permission.args);\r\n\r\n                (uint vehicleValue, uint responseTime) = functions.returnFunctionsInfo(requestId);\r\n\r\n                permission.ensureValueNow = vehicleValue;\r\n                permission.lastResponseTime = responseTime;\r\n\r\n                uint id = rwaMonitors[i].rwaId;\r\n                uint rwaValue = vehicleValue;\r\n                uint referenceValue = permission.ensuranceValueNeeded;\r\n\r\n                if (rwaValue >= (referenceValue * 5)) {\r\n                    emit RWAPriceAtMoment(permission.contractId, id, rwaValue);\r\n\r\n                } else if (rwaValue >= referenceValue * 4) {\r\n                    emit PriceLowEvent(permission.contractId, id, rwaValue); //ALERT\r\n\r\n                } else if (rwaValue < referenceValue * 2) {\r\n                    rwaMonitors[i].isActive = false;\r\n                    emit TitleCancelledTheRWAWillBeSold(permission.contractId, id, rwaValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Whitelists a chain for transactions.\r\n    /// @notice This function can only be called by the owner.\r\n    /// @param _sourceChainSelector The selector of the source chain to be whitelisted.\r\n    function addSourceChain( uint64 _sourceChainSelector) external /*onlyOwner*/ {\r\n        whitelistedSourceChains[_sourceChainSelector] = true;\r\n    }\r\n    /// @dev Denylists a chain for transactions.\r\n    /// @notice This function can only be called by the owner.\r\n    /// @param _sourceChainSelector The selector of the source chain to be denylisted.\r\n    function removelistSourceChain( uint64 _sourceChainSelector) external /*onlyOwner*/ {\r\n        whitelistedSourceChains[_sourceChainSelector] = false;\r\n    }\r\n    /// @dev Whitelists a sender.\r\n    /// @notice This function can only be called by the owner.\r\n    /// @param _sender The address of the sender.\r\n    function addSender(address _sender) external /*onlyOwner*/ {\r\n        whitelistedSenders[_sender] = true;\r\n    }\r\n    /// @dev Denylists a sender.\r\n    /// @notice This function can only be called by the owner.\r\n    /// @param _sender The address of the sender.\r\n    function removeSender(address _sender) external /*onlyOwner*/ {\r\n        whitelistedSenders[_sender] = false;\r\n    }\r\n\r\n    function getLastReceivedMessageDetails() external view returns (bytes32 messageId, bytes memory text) {\r\n        return (lastReceivedMessageId, lastReceivedText);\r\n    }\r\n\r\n    /*Withdraw - Receive*/\r\n    receive() external payable {}\r\n\r\n    function withdraw(address _beneficiary) public /*onlyOwner*/ {\r\n        // Retrieve the balance of this contract\r\n        uint256 amount = address(this).balance;\r\n\r\n        // Revert if there is nothing to withdraw\r\n        if (amount == 0) revert NothingToWithdraw();\r\n\r\n        // Attempt to send the funds, capturing the success status and discarding any return data\r\n        (bool sent, ) = _beneficiary.call{value: amount}(\"\");\r\n\r\n        // Revert if the send failed, with information about the attempted transfer\r\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\r\n    }\r\n\r\n    function withdrawToken( address _beneficiary, address _token) public /*onlyOwner*/ {\r\n        // Retrieve the balance of this contract\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n\r\n        // Revert if there is nothing to withdraw\r\n        if (amount == 0) revert NothingToWithdraw();\r\n\r\n        IERC20(_token).transfer(_beneficiary, amount);\r\n    }\r\n\r\n    /*MODIFIERS    */\r\n    modifier onlyWhitelistedSourceChain(uint64 _sourceChainSelector) {\r\n        if (!whitelistedSourceChains[_sourceChainSelector])\r\n            revert SourceChainNotWhitelisted(_sourceChainSelector);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelistedSenders(address _sender) {\r\n        if (!whitelistedSenders[_sender]) revert SenderNotWhitelisted(_sender);\r\n        _;\r\n    }\r\n}\r\n"},"contracts/HorizonFujiS.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\r\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\r\nimport {CCIPReceiver} from \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\";\r\nimport {IERC20} from \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\";\r\nimport {LinkTokenInterface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\";\r\n\r\ncontract HorizonFujiS is CCIPReceiver {\r\n\r\n    // Custom errors to provide more descriptive revert messages.    \r\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\r\n    error NothingToWithdraw();\r\n    error FailedToWithdrawEth(address owner, address target, uint256 value);\r\n    error DestinationChainNotWhitelisted(uint64 destinationChainSelector);\r\n\r\n    // Event emitted when a message is sent to another chain.\r\n    event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address receiver, bytes _data, address feeToken, uint256 fees);\r\n    event MessageReceived(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address sender, string text, address token, uint256 tokenAmount);\r\n    event CCIPReceiverAdded(string _blockchainName, address _receiverAddress);\r\n    event CCIPReceiverRemoved(address _receiverAddress);\r\n\r\n    bytes32 private lastReceivedMessageId;\r\n    string private lastReceivedText;\r\n    uint private destinationChainSelector;\r\n\r\n    address owner;\r\n\r\n    /* STRUCTS */\r\n    struct ReceiverInfo {\r\n        string blockchainName;\r\n        address receiverAddress;\r\n        bool isReceiver;\r\n    }\r\n    \r\n    // Mapping to keep track of whitelisted destination chains.\r\n    mapping(uint64 => bool) public whitelistedDestinationChains;\r\n    // Mapping to keep track of receivers.\r\n    mapping(address receiverAddress => ReceiverInfo) public ccipReceicers;\r\n\r\n    LinkTokenInterface linkToken;\r\n\r\n    constructor(address _router, //0x554472a2720e5e7d5d3c817529aba05eed5f82d8\r\n                address _linkToken //0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\r\n               ) CCIPReceiver(_router){  \r\n        linkToken = LinkTokenInterface(_linkToken);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Whitelists a chain for transactions.\r\n    /// @notice This function can only be called by the owner.\r\n    /// @param _destinationChainSelector The selector of the destination chain to be whitelisted.\r\n    function whitelistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\r\n        whitelistedDestinationChains[_destinationChainSelector] = true;\r\n    }\r\n\r\n    /// @dev Denylists a chain for transactions.\r\n    /// @notice This function can only be called by the owner.\r\n    /// @param _destinationChainSelector The selector of the destination chain to be denylisted.\r\n    function denylistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\r\n        whitelistedDestinationChains[_destinationChainSelector] = false;\r\n    }\r\n\r\n    function addReceiver(string memory _blockchainName, address _receiverAddress) public onlyOwner{\r\n        require(_receiverAddress != address(0), \"Enter a valid address!\");\r\n        require(ccipReceicers[_receiverAddress].isReceiver == false, \"Receiver is already registered!\");\r\n\r\n        ReceiverInfo memory newReceiver = ReceiverInfo({\r\n            blockchainName: _blockchainName,\r\n            receiverAddress: _receiverAddress,\r\n            isReceiver: true\r\n        });\r\n        \r\n        ccipReceicers[_receiverAddress] = newReceiver;\r\n\r\n        emit CCIPReceiverAdded(_blockchainName, _receiverAddress);\r\n    }\r\n\r\n    function removeReceiver(address _receiverAddress) public onlyOwner {\r\n        require(ccipReceicers[_receiverAddress].isReceiver == true, \"Receiver is already registered!\");\r\n\r\n        delete ccipReceicers[_receiverAddress];\r\n\r\n        emit CCIPReceiverRemoved(_receiverAddress);\r\n    }\r\n\r\n    function sendMessagePayLINK(uint64 _destinationChainSelector, address _receiver, bytes memory _data) external /*onlyOwner onlyWhitelistedDestinationChain(_destinationChainSelector)*/ returns (bytes32 messageId){\r\n        require(ccipReceicers[_receiver].receiverAddress != address(0), \"Enter a valid receiver address!\");\r\n        require(ccipReceicers[_receiver].isReceiver == true, \"This receiver is not whitelisted yet!\");\r\n        \r\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\r\n            ccipReceicers[_receiver].receiverAddress,\r\n            _data,\r\n            address(linkToken)\r\n        );\r\n\r\n        IRouterClient router = IRouterClient(this.getRouter());\r\n\r\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\r\n\r\n        if (fees > linkToken.balanceOf(address(this)))\r\n            revert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\r\n\r\n        linkToken.approve(address(router), fees);\r\n\r\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\r\n\r\n        emit MessageSent( messageId, _destinationChainSelector, _receiver, _data, address(linkToken), fees);\r\n\r\n        return messageId;\r\n    }\r\n\r\n    function _buildCCIPMessage(address _receiver, bytes memory _data, address _feeTokenAddress) internal pure returns (Client.EVM2AnyMessage memory) {\r\n        Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\r\n            receiver: abi.encode(_receiver),\r\n            data: abi.encode(_data),\r\n            tokenAmounts: new Client.EVMTokenAmount[](0),\r\n            extraArgs:  Client._argsToBytes(\r\n                Client.EVMExtraArgsV1({gasLimit: 800_000, strict: false})\r\n            ),\r\n            feeToken: _feeTokenAddress\r\n        });\r\n        return evm2AnyMessage;\r\n    }\r\n\r\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override{\r\n        lastReceivedMessageId = any2EvmMessage.messageId;\r\n        lastReceivedText = abi.decode(any2EvmMessage.data, (string));\r\n\r\n        emit MessageReceived(any2EvmMessage.messageId, any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)), abi.decode(any2EvmMessage.data, (string)), any2EvmMessage.destTokenAmounts[0].token, any2EvmMessage.destTokenAmounts[0].amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function withdraw(address _beneficiary) public /*onlyOwner*/ {\r\n        uint256 amount = address(this).balance;\r\n\r\n        if (amount == 0) revert NothingToWithdraw();\r\n\r\n        (bool sent, ) = _beneficiary.call{value: amount}(\"\");\r\n\r\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\r\n    }\r\n\r\n    function withdrawToken( address _beneficiary, address _token) public /*onlyOwner*/ {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n\r\n        if (amount == 0) revert NothingToWithdraw();\r\n\r\n        IERC20(_token).transfer(_beneficiary, amount);\r\n    }\r\n\r\n    /* MODIFIERS */\r\n\r\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is whitelisted.\r\n    /// @param _destinationChainSelector The selector of the destination chain.\r\n    modifier onlyWhitelistedDestinationChain(uint64 _destinationChainSelector) {\r\n        if (!whitelistedDestinationChains[_destinationChainSelector])\r\n            revert DestinationChainNotWhitelisted(_destinationChainSelector);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Only Owner can call this function!\");\r\n        _;\r\n    }\r\n}\r\n"},"contracts/HorizonFunctions.sol":{"content":"// // SPDX-License-Identifier: MIT\r\n// pragma solidity 0.8.19;\r\n\r\nimport {FunctionsClient} from \"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\";\r\nimport {FunctionsRequest} from \"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\";\r\nimport \"./HorizonFujiAssistant.sol\";\r\n\r\ncontract HorizonFunctions is FunctionsClient{\r\n    using FunctionsRequest for FunctionsRequest.Request;\r\n\r\n    // State variables to store the last request ID, response, and error\r\n    bytes32 public s_lastRequestId;\r\n\r\n    // Custom error type\r\n    error UnexpectedRequestID(bytes32 requestId);\r\n\r\n    // Event to log responses\r\n    event Response( bytes32 indexed requestId, bytes response, bytes err);\r\n\r\n    struct VehicleData {\r\n        string value;\r\n        uint uintValue;\r\n        uint requestTime;\r\n        uint responseTime;\r\n        bytes lastResponse;\r\n        bytes lastError;\r\n        bool isRequest;\r\n    }\r\n\r\n    mapping(bytes32 requestId => VehicleData) public vehicleDataMapping;\r\n\r\n    uint64 private subscriptionId;\r\n    address router;\r\n    uint32 gasLimit;\r\n    bytes32 donID;\r\n\r\n    // JavaScript source code\r\n    // Fetch vehicle value from the FIPE API.\r\n    // Documentation: https://github.com/deividfortuna/fipe\r\n    string source =\r\n        \"const tipoAutomovel = args[0];\" //motos\r\n        \"const idMarca = args[1];\" //77\r\n        \"const idModelo = args[2];\" //5223\r\n        \"const dataModelo = args[3];\" //2015-1\r\n        \"const apiResponse = await Functions.makeHttpRequest({\"\r\n            \"url: `https://parallelum.com.br/fipe/api/v1/${tipoAutomovel}/marcas/${idMarca}/modelos/${idModelo}/anos/${dataModelo}`\"\r\n        \"});\"\r\n        \"if (apiResponse.error) {\"\r\n        \"throw Error('Request failed');\"\r\n        \"}\"\r\n        \"const { data } = apiResponse;\"\r\n        \"return Functions.encodeString(data.Valor);\";\r\n\r\n    HorizonFujiAssistant assistant = HorizonFujiAssistant(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDEREÇO\r\n\r\n    constructor(uint64 _subscriptionId, //770\r\n                address _routerFunctions, // 0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0 - Fuji\r\n                uint32 _gasLimit, // 300000\r\n                bytes32 _donID // 0x66756e2d6176616c616e6368652d66756a692d31000000000000000000000000 - Fuji\r\n                ) FunctionsClient(_routerFunctions) {\r\n        subscriptionId = _subscriptionId; //770\r\n        router = _routerFunctions; // 0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0 - Fuji\r\n        gasLimit = _gasLimit; // 300000\r\n        donID = _donID; // 0x66756e2d6176616c616e6368652d66756a692d31000000000000000000000000 - Fuji\r\n    }\r\n\r\n    function sendRequest(string[] calldata args) external returns (bytes32 requestId) { //[\"motos\",77,5223,\"2015-1\"]\r\n\r\n        FunctionsRequest.Request memory req;\r\n\r\n        req.initializeRequestForInlineJavaScript(source);\r\n\r\n        if (args.length > 0) req.setArgs(args);\r\n\r\n        s_lastRequestId = _sendRequest(req.encodeCBOR(), subscriptionId, gasLimit, donID);\r\n        \r\n        VehicleData memory vehicleInfo = VehicleData ({\r\n            value: \"\",\r\n            uintValue: 0,\r\n            requestTime: block.timestamp,\r\n            responseTime: 0,\r\n            lastResponse: \"\",\r\n            lastError: \"\",\r\n            isRequest: true\r\n        });\r\n\r\n        vehicleDataMapping[s_lastRequestId] = vehicleInfo;\r\n\r\n        return s_lastRequestId;\r\n    }\r\n\r\n    function fulfillRequest( bytes32 requestId, bytes memory response, bytes memory err) internal override {\r\n        VehicleData storage vehicle = vehicleDataMapping[requestId];\r\n\r\n        if (vehicle.isRequest == false) {\r\n            revert UnexpectedRequestID(requestId); // Check if request IDs match\r\n        }\r\n\r\n        // Update the vehicle mapping with the response and any errors\r\n        vehicle.lastResponse = response;\r\n        vehicle.lastError = err;\r\n        vehicle.value = string(response);\r\n        vehicle.responseTime = block.timestamp;\r\n\r\n        uint valueConverted = assistant.stringToUint(vehicle.value); //I need convert into USdolars\r\n\r\n        vehicle.uintValue = (valueConverted / 5);\r\n\r\n        // Emit an event to log the response\r\n        emit Response(requestId, response, err);\r\n    }\r\n\r\n    function returnFunctionsInfo(bytes32 requestId) external view returns(uint, uint){\r\n        VehicleData storage vehicle = vehicleDataMapping[requestId];\r\n        uint vehicleValue = vehicle.uintValue;\r\n        uint responseTime = vehicle.responseTime;\r\n\r\n        return (vehicleValue, responseTime);\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"\n--> contracts/HorizonFunctions.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/HorizonFunctions.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n  --> contracts/HorizonFujiR.sol:87:9:\n   |\n87 |         LinkTokenInterface linkToken = LinkTokenInterface(_linkToken);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/HorizonFujiR.sol:47:5:\n   |\n47 |     LinkTokenInterface linkToken;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":2419,"file":"contracts/HorizonFujiR.sol","message":"The shadowed declaration is here:","start":2391}],"severity":"warning","sourceLocation":{"end":3940,"file":"contracts/HorizonFujiR.sol","start":3912},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/HorizonFujiR.sol:87:9:\n   |\n87 |         LinkTokenInterface linkToken = LinkTokenInterface(_linkToken);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":3940,"file":"contracts/HorizonFujiR.sol","start":3912},"type":"Warning"}],"sources":{"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","exportedSymbols":{"CCIPReceiver":[119],"Client":[241],"IAny2EVMMessageReceiver":[132],"IERC165":[331]},"id":120,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol","file":"../interfaces/IAny2EVMMessageReceiver.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":120,"sourceUnit":133,"src":"57:82:0","symbolAliases":[{"foreign":{"id":2,"name":"IAny2EVMMessageReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"65:23:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"../libraries/Client.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":120,"sourceUnit":242,"src":"141:47:0","symbolAliases":[{"foreign":{"id":4,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"149:6:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol","file":"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":120,"sourceUnit":332,"src":"190:98:0","symbolAliases":[{"foreign":{"id":6,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"198:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"IAny2EVMMessageReceiver","nameLocations":["413:23:0"],"nodeType":"IdentifierPath","referencedDeclaration":132,"src":"413:23:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"413:23:0"},{"baseName":{"id":11,"name":"IERC165","nameLocations":["438:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":331,"src":"438:7:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"438:7:0"}],"canonicalName":"CCIPReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"290:89:0","text":"@title CCIPReceiver - Base contract for CCIP applications that can receive messages."},"fullyImplemented":false,"id":119,"linearizedBaseContracts":[119,331,132],"name":"CCIPReceiver","nameLocation":"397:12:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":14,"mutability":"immutable","name":"i_router","nameLocation":"477:8:0","nodeType":"VariableDeclaration","scope":119,"src":"450:35:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"450:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"body":{"id":37,"nodeType":"Block","src":"518:92:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":19,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"528:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":22,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"546:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":21,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"538:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":20,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:0","typeDescriptions":{}}},"id":23,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"538:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"528:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":32,"nodeType":"IfStatement","src":"524:58:0","trueBody":{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":28,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"579:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":27,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"571:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"571:7:0","typeDescriptions":{}}},"id":29,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"571:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":25,"name":"InvalidRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"557:13:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"557:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":31,"nodeType":"RevertStatement","src":"550:32:0"}},{"expression":{"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":33,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"588:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":34,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"599:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"588:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":36,"nodeType":"ExpressionStatement","src":"588:17:0"}]},"id":38,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"router","nameLocation":"510:6:0","nodeType":"VariableDeclaration","scope":38,"src":"502:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"502:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"501:16:0"},"returnParameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"518:0:0"},"scope":119,"src":"490:120:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[330],"body":{"id":61,"nodeType":"Block","src":"844:118:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":47,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"857:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":49,"name":"IAny2EVMMessageReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"877:23:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAny2EVMMessageReceiver_$132_$","typeString":"type(contract IAny2EVMMessageReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAny2EVMMessageReceiver_$132_$","typeString":"type(contract IAny2EVMMessageReceiver)"}],"id":48,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"872:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"872:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAny2EVMMessageReceiver_$132","typeString":"type(contract IAny2EVMMessageReceiver)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"902:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"872:41:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"857:56:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":53,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"917:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":55,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"937:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$331_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$331_$","typeString":"type(contract IERC165)"}],"id":54,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"932:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":56,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"932:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$331","typeString":"type(contract IERC165)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"946:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"932:25:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"917:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"857:100:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":46,"id":60,"nodeType":"Return","src":"850:107:0"}]},"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"614:144:0","text":"@notice IERC165 supports an interfaceId\n @param interfaceId The interfaceId to check\n @return true if the interfaceId is supported"},"functionSelector":"01ffc9a7","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"770:17:0","nodeType":"FunctionDefinition","overrides":{"id":43,"nodeType":"OverrideSpecifier","overrides":[],"src":"820:8:0"},"parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"interfaceId","nameLocation":"795:11:0","nodeType":"VariableDeclaration","scope":62,"src":"788:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":40,"name":"bytes4","nodeType":"ElementaryTypeName","src":"788:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"787:20:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"838:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:0"},"scope":119,"src":"761:201:0","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[131],"body":{"id":76,"nodeType":"Block","src":"1106:32:0","statements":[{"expression":{"arguments":[{"id":73,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"1125:7:0","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_calldata_ptr","typeString":"struct Client.Any2EVMMessage calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_calldata_ptr","typeString":"struct Client.Any2EVMMessage calldata"}],"id":72,"name":"_ccipReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1112:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Any2EVMMessage_$204_memory_ptr_$returns$__$","typeString":"function (struct Client.Any2EVMMessage memory)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":75,"nodeType":"ExpressionStatement","src":"1112:21:0"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"966:39:0","text":"@inheritdoc IAny2EVMMessageReceiver"},"functionSelector":"85572ffb","id":77,"implemented":true,"kind":"function","modifiers":[{"id":70,"kind":"modifierInvocation","modifierName":{"id":69,"name":"onlyRouter","nameLocations":["1095:10:0"],"nodeType":"IdentifierPath","referencedDeclaration":118,"src":"1095:10:0"},"nodeType":"ModifierInvocation","src":"1095:10:0"}],"name":"ccipReceive","nameLocation":"1017:11:0","nodeType":"FunctionDefinition","overrides":{"id":68,"nodeType":"OverrideSpecifier","overrides":[],"src":"1086:8:0"},"parameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"message","nameLocation":"1060:7:0","nodeType":"VariableDeclaration","scope":77,"src":"1029:38:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_calldata_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":65,"nodeType":"UserDefinedTypeName","pathNode":{"id":64,"name":"Client.Any2EVMMessage","nameLocations":["1029:6:0","1036:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":204,"src":"1029:21:0"},"referencedDeclaration":204,"src":"1029:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"1028:40:0"},"returnParameters":{"id":71,"nodeType":"ParameterList","parameters":[],"src":"1106:0:0"},"scope":119,"src":"1008:130:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"1142:94:0","text":"@notice Override this function in your implementation.\n @param message Any2EVMMessage"},"id":84,"implemented":false,"kind":"function","modifiers":[],"name":"_ccipReceive","nameLocation":"1248:12:0","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"message","nameLocation":"1290:7:0","nodeType":"VariableDeclaration","scope":84,"src":"1261:36:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":80,"nodeType":"UserDefinedTypeName","pathNode":{"id":79,"name":"Client.Any2EVMMessage","nameLocations":["1261:6:0","1268:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":204,"src":"1261:21:0"},"referencedDeclaration":204,"src":"1261:21:0","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"1260:38:0"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"1315:0:0"},"scope":119,"src":"1239:77:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":95,"nodeType":"Block","src":"1601:35:0","statements":[{"expression":{"arguments":[{"id":92,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1622:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":91,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1614:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":90,"name":"address","nodeType":"ElementaryTypeName","src":"1614:7:0","typeDescriptions":{}}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1614:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":89,"id":94,"nodeType":"Return","src":"1607:24:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1479:68:0","text":"@notice Return the current router\n @return i_router address"},"functionSelector":"b0f479a1","id":96,"implemented":true,"kind":"function","modifiers":[],"name":"getRouter","nameLocation":"1559:9:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"1568:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":96,"src":"1592:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"1592:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:9:0"},"scope":119,"src":"1550:86:0","stateMutability":"view","virtual":false,"visibility":"public"},{"errorSelector":"d7f73334","id":100,"name":"InvalidRouter","nameLocation":"1646:13:0","nodeType":"ErrorDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"router","nameLocation":"1668:6:0","nodeType":"VariableDeclaration","scope":100,"src":"1660:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"1660:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1659:16:0"},"src":"1640:36:0"},{"body":{"id":117,"nodeType":"Block","src":"1758:87:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":103,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1768:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1772:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1768:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":107,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"1790:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1782:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"1782:7:0","typeDescriptions":{}}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1782:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1768:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":115,"nodeType":"IfStatement","src":"1764:69:0","trueBody":{"errorCall":{"arguments":[{"expression":{"id":111,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1822:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1826:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1822:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":110,"name":"InvalidRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"1808:13:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":114,"nodeType":"RevertStatement","src":"1801:32:0"}},{"id":116,"nodeType":"PlaceholderStatement","src":"1839:1:0"}]},"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"1680:53:0","text":"@dev only calls from the set router are accepted."},"id":118,"name":"onlyRouter","nameLocation":"1745:10:0","nodeType":"ModifierDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[],"src":"1755:2:0"},"src":"1736:109:0","virtual":false,"visibility":"internal"}],"scope":120,"src":"379:1468:0","usedErrors":[100],"usedEvents":[]}],"src":"32:1816:0"},"id":0},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol","exportedSymbols":{"Client":[241],"IAny2EVMMessageReceiver":[132]},"id":133,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":121,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"../libraries/Client.sol","id":123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":133,"sourceUnit":242,"src":"57:47:1","symbolAliases":[{"foreign":{"id":122,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"65:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAny2EVMMessageReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"106:119:1","text":"@notice Application contracts that intend to receive messages from\n the router should implement this interface."},"fullyImplemented":false,"id":132,"linearizedBaseContracts":[132],"name":"IAny2EVMMessageReceiver","nameLocation":"235:23:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":125,"nodeType":"StructuredDocumentation","src":"263:302:1","text":"@notice Called by the Router to deliver a message.\n If this reverts, any token transfers also revert. The message\n will move to a FAILED state and become available for manual execution.\n @param message CCIP Message\n @dev Note ensure you check the msg.sender is the OffRampRouter"},"functionSelector":"85572ffb","id":131,"implemented":false,"kind":"function","modifiers":[],"name":"ccipReceive","nameLocation":"577:11:1","nodeType":"FunctionDefinition","parameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"message","nameLocation":"620:7:1","nodeType":"VariableDeclaration","scope":131,"src":"589:38:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_calldata_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":127,"nodeType":"UserDefinedTypeName","pathNode":{"id":126,"name":"Client.Any2EVMMessage","nameLocations":["589:6:1","596:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":204,"src":"589:21:1"},"referencedDeclaration":204,"src":"589:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"588:40:1"},"returnParameters":{"id":130,"nodeType":"ParameterList","parameters":[],"src":"637:0:1"},"scope":132,"src":"568:70:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":133,"src":"225:415:1","usedErrors":[],"usedEvents":[]}],"src":"32:609:1"},"id":1},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol","exportedSymbols":{"Client":[241],"IRouterClient":[184]},"id":185,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":134,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"../libraries/Client.sol","id":136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":185,"sourceUnit":242,"src":"57:47:2","symbolAliases":[{"foreign":{"id":135,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"65:6:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IRouterClient","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":184,"linearizedBaseContracts":[184],"name":"IRouterClient","nameLocation":"116:13:2","nodeType":"ContractDefinition","nodes":[{"errorSelector":"ae236d9c","id":140,"name":"UnsupportedDestinationChain","nameLocation":"140:27:2","nodeType":"ErrorDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"destChainSelector","nameLocation":"175:17:2","nodeType":"VariableDeclaration","scope":140,"src":"168:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":137,"name":"uint64","nodeType":"ElementaryTypeName","src":"168:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"167:26:2"},"src":"134:60:2"},{"errorSelector":"07da6ee6","id":142,"name":"InsufficientFeeTokenAmount","nameLocation":"203:26:2","nodeType":"ErrorDefinition","parameters":{"id":141,"nodeType":"ParameterList","parameters":[],"src":"229:2:2"},"src":"197:35:2"},{"errorSelector":"1841b4e1","id":144,"name":"InvalidMsgValue","nameLocation":"241:15:2","nodeType":"ErrorDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"256:2:2"},"src":"235:24:2"},{"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"263:189:2","text":"@notice Checks if the given chain ID is supported for sending/receiving.\n @param chainSelector The chain to check.\n @return supported is true if it is supported, false if not."},"functionSelector":"a48a9058","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"isChainSupported","nameLocation":"464:16:2","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"chainSelector","nameLocation":"488:13:2","nodeType":"VariableDeclaration","scope":152,"src":"481:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"481:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"480:22:2"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"supported","nameLocation":"531:9:2","nodeType":"VariableDeclaration","scope":152,"src":"526:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"526:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"525:16:2"},"scope":184,"src":"455:87:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":153,"nodeType":"StructuredDocumentation","src":"546:224:2","text":"@notice Gets a list of all supported tokens which can be sent or received\n to/from a given chain id.\n @param chainSelector The chainSelector.\n @return tokens The addresses of all tokens that are supported."},"functionSelector":"fbca3b74","id":161,"implemented":false,"kind":"function","modifiers":[],"name":"getSupportedTokens","nameLocation":"782:18:2","nodeType":"FunctionDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"chainSelector","nameLocation":"808:13:2","nodeType":"VariableDeclaration","scope":161,"src":"801:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":154,"name":"uint64","nodeType":"ElementaryTypeName","src":"801:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"800:22:2"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"tokens","nameLocation":"863:6:2","nodeType":"VariableDeclaration","scope":161,"src":"846:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":157,"name":"address","nodeType":"ElementaryTypeName","src":"846:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":158,"nodeType":"ArrayTypeName","src":"846:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"845:25:2"},"scope":184,"src":"773:98:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":162,"nodeType":"StructuredDocumentation","src":"875:302:2","text":"@param destinationChainSelector The destination chainSelector\n @param message The cross-chain CCIP message including data and/or tokens\n @return fee returns guaranteed execution fee for the specified message\n delivery to destination chain\n @dev returns 0 fee on invalid message."},"functionSelector":"20487ded","id":172,"implemented":false,"kind":"function","modifiers":[],"name":"getFee","nameLocation":"1189:6:2","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"destinationChainSelector","nameLocation":"1208:24:2","nodeType":"VariableDeclaration","scope":172,"src":"1201:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":163,"name":"uint64","nodeType":"ElementaryTypeName","src":"1201:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"message","nameLocation":"1267:7:2","nodeType":"VariableDeclaration","scope":172,"src":"1238:36:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage"},"typeName":{"id":166,"nodeType":"UserDefinedTypeName","pathNode":{"id":165,"name":"Client.EVM2AnyMessage","nameLocations":["1238:6:2","1245:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":217,"src":"1238:21:2"},"referencedDeclaration":217,"src":"1238:21:2","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_storage_ptr","typeString":"struct Client.EVM2AnyMessage"}},"visibility":"internal"}],"src":"1195:83:2"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"fee","nameLocation":"1310:3:2","nodeType":"VariableDeclaration","scope":172,"src":"1302:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"1302:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1301:13:2"},"scope":184,"src":"1180:135:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"1319:369:2","text":"@notice Request a message to be sent to the destination chain\n @param destinationChainSelector The destination chain ID\n @param message The cross-chain CCIP message including data and/or tokens\n @return messageId The message ID\n @dev Note if msg.value is larger than the required fee (from getFee) we accept\n the overpayment with no refund."},"functionSelector":"96f4e9f9","id":183,"implemented":false,"kind":"function","modifiers":[],"name":"ccipSend","nameLocation":"1700:8:2","nodeType":"FunctionDefinition","parameters":{"id":179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":175,"mutability":"mutable","name":"destinationChainSelector","nameLocation":"1721:24:2","nodeType":"VariableDeclaration","scope":183,"src":"1714:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":174,"name":"uint64","nodeType":"ElementaryTypeName","src":"1714:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":178,"mutability":"mutable","name":"message","nameLocation":"1782:7:2","nodeType":"VariableDeclaration","scope":183,"src":"1751:38:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_calldata_ptr","typeString":"struct Client.EVM2AnyMessage"},"typeName":{"id":177,"nodeType":"UserDefinedTypeName","pathNode":{"id":176,"name":"Client.EVM2AnyMessage","nameLocations":["1751:6:2","1758:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":217,"src":"1751:21:2"},"referencedDeclaration":217,"src":"1751:21:2","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_storage_ptr","typeString":"struct Client.EVM2AnyMessage"}},"visibility":"internal"}],"src":"1708:85:2"},"returnParameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":183,"src":"1820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1820:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1819:9:2"},"scope":184,"src":"1691:138:2","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":185,"src":"106:1725:2","usedErrors":[140,142,144],"usedEvents":[]}],"src":"32:1800:2"},"id":2},"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","exportedSymbols":{"Client":[241]},"id":242,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":186,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Client","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":241,"linearizedBaseContracts":[241],"name":"Client","nameLocation":"90:6:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Client.EVMTokenAmount","id":191,"members":[{"constant":false,"id":188,"mutability":"mutable","name":"token","nameLocation":"137:5:3","nodeType":"VariableDeclaration","scope":191,"src":"129:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"129:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"amount","nameLocation":"193:6:3","nodeType":"VariableDeclaration","scope":191,"src":"185:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"185:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"EVMTokenAmount","nameLocation":"108:14:3","nodeType":"StructDefinition","scope":241,"src":"101:124:3","visibility":"public"},{"canonicalName":"Client.Any2EVMMessage","id":204,"members":[{"constant":false,"id":193,"mutability":"mutable","name":"messageId","nameLocation":"265:9:3","nodeType":"VariableDeclaration","scope":204,"src":"257:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"257:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"sourceChainSelector","nameLocation":"337:19:3","nodeType":"VariableDeclaration","scope":204,"src":"330:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":194,"name":"uint64","nodeType":"ElementaryTypeName","src":"330:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"sender","nameLocation":"394:6:3","nodeType":"VariableDeclaration","scope":204,"src":"388:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":196,"name":"bytes","nodeType":"ElementaryTypeName","src":"388:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":199,"mutability":"mutable","name":"data","nameLocation":"463:4:3","nodeType":"VariableDeclaration","scope":204,"src":"457:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":198,"name":"bytes","nodeType":"ElementaryTypeName","src":"457:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":203,"mutability":"mutable","name":"destTokenAmounts","nameLocation":"527:16:3","nodeType":"VariableDeclaration","scope":204,"src":"510:33:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"},"typeName":{"baseType":{"id":201,"nodeType":"UserDefinedTypeName","pathNode":{"id":200,"name":"EVMTokenAmount","nameLocations":["510:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":191,"src":"510:14:3"},"referencedDeclaration":191,"src":"510:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$191_storage_ptr","typeString":"struct Client.EVMTokenAmount"}},"id":202,"nodeType":"ArrayTypeName","src":"510:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"}},"visibility":"internal"}],"name":"Any2EVMMessage","nameLocation":"236:14:3","nodeType":"StructDefinition","scope":241,"src":"229:390:3","visibility":"public"},{"canonicalName":"Client.EVM2AnyMessage","id":217,"members":[{"constant":false,"id":206,"mutability":"mutable","name":"receiver","nameLocation":"741:8:3","nodeType":"VariableDeclaration","scope":217,"src":"735:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":205,"name":"bytes","nodeType":"ElementaryTypeName","src":"735:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":208,"mutability":"mutable","name":"data","nameLocation":"813:4:3","nodeType":"VariableDeclaration","scope":217,"src":"807:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":207,"name":"bytes","nodeType":"ElementaryTypeName","src":"807:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":212,"mutability":"mutable","name":"tokenAmounts","nameLocation":"856:12:3","nodeType":"VariableDeclaration","scope":217,"src":"839:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"},"typeName":{"baseType":{"id":210,"nodeType":"UserDefinedTypeName","pathNode":{"id":209,"name":"EVMTokenAmount","nameLocations":["839:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":191,"src":"839:14:3"},"referencedDeclaration":191,"src":"839:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$191_storage_ptr","typeString":"struct Client.EVMTokenAmount"}},"id":211,"nodeType":"ArrayTypeName","src":"839:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"feeToken","nameLocation":"901:8:3","nodeType":"VariableDeclaration","scope":217,"src":"893:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"extraArgs","nameLocation":"987:9:3","nodeType":"VariableDeclaration","scope":217,"src":"981:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":215,"name":"bytes","nodeType":"ElementaryTypeName","src":"981:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"EVM2AnyMessage","nameLocation":"714:14:3","nodeType":"StructDefinition","scope":241,"src":"707:345:3","visibility":"public"},{"constant":true,"functionSelector":"3ab8c0d0","id":220,"mutability":"constant","name":"EVM_EXTRA_ARGS_V1_TAG","nameLocation":"1177:21:3","nodeType":"VariableDeclaration","scope":241,"src":"1154:57:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":218,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1154:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783937613635376339","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1201:10:3","typeDescriptions":{"typeIdentifier":"t_rational_2544261065_by_1","typeString":"int_const 2544261065"},"value":"0x97a657c9"},"visibility":"public"},{"canonicalName":"Client.EVMExtraArgsV1","id":225,"members":[{"constant":false,"id":222,"mutability":"mutable","name":"gasLimit","nameLocation":"1251:8:3","nodeType":"VariableDeclaration","scope":225,"src":"1243:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":221,"name":"uint256","nodeType":"ElementaryTypeName","src":"1243:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"strict","nameLocation":"1320:6:3","nodeType":"VariableDeclaration","scope":225,"src":"1315:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":223,"name":"bool","nodeType":"ElementaryTypeName","src":"1315:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"EVMExtraArgsV1","nameLocation":"1222:14:3","nodeType":"StructDefinition","scope":241,"src":"1215:156:3","visibility":"public"},{"body":{"id":239,"nodeType":"Block","src":"1471:74:3","statements":[{"expression":{"arguments":[{"id":235,"name":"EVM_EXTRA_ARGS_V1_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"1507:21:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":236,"name":"extraArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"1530:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$225_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$225_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}],"expression":{"id":233,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1484:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1488:18:3","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1484:22:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":232,"id":238,"nodeType":"Return","src":"1477:63:3"}]},"id":240,"implemented":true,"kind":"function","modifiers":[],"name":"_argsToBytes","nameLocation":"1384:12:3","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"mutability":"mutable","name":"extraArgs","nameLocation":"1419:9:3","nodeType":"VariableDeclaration","scope":240,"src":"1397:31:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$225_memory_ptr","typeString":"struct Client.EVMExtraArgsV1"},"typeName":{"id":227,"nodeType":"UserDefinedTypeName","pathNode":{"id":226,"name":"EVMExtraArgsV1","nameLocations":["1397:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":225,"src":"1397:14:3"},"referencedDeclaration":225,"src":"1397:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$225_storage_ptr","typeString":"struct Client.EVMExtraArgsV1"}},"visibility":"internal"}],"src":"1396:33:3"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"bts","nameLocation":"1466:3:3","nodeType":"VariableDeclaration","scope":240,"src":"1453:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":230,"name":"bytes","nodeType":"ElementaryTypeName","src":"1453:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1452:18:3"},"scope":241,"src":"1375:170:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":242,"src":"82:1465:3","usedErrors":[],"usedEvents":[]}],"src":"32:1516:3"},"id":3},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[319]},"id":320,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":243,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":244,"nodeType":"StructuredDocumentation","src":"131:70:4","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":319,"linearizedBaseContracts":[319],"name":"IERC20","nameLocation":"212:6:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"223:148:4","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":253,"name":"Transfer","nameLocation":"380:8:4","nodeType":"EventDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"405:4:4","nodeType":"VariableDeclaration","scope":253,"src":"389:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":246,"name":"address","nodeType":"ElementaryTypeName","src":"389:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":249,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"427:2:4","nodeType":"VariableDeclaration","scope":253,"src":"411:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":248,"name":"address","nodeType":"ElementaryTypeName","src":"411:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":251,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"439:5:4","nodeType":"VariableDeclaration","scope":253,"src":"431:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"388:57:4"},"src":"374:72:4"},{"anonymous":false,"documentation":{"id":254,"nodeType":"StructuredDocumentation","src":"450:142:4","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":262,"name":"Approval","nameLocation":"601:8:4","nodeType":"EventDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"626:5:4","nodeType":"VariableDeclaration","scope":262,"src":"610:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"649:7:4","nodeType":"VariableDeclaration","scope":262,"src":"633:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"633:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":260,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"666:5:4","nodeType":"VariableDeclaration","scope":262,"src":"658:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":259,"name":"uint256","nodeType":"ElementaryTypeName","src":"658:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"609:63:4"},"src":"595:78:4"},{"documentation":{"id":263,"nodeType":"StructuredDocumentation","src":"677:62:4","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":268,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"751:11:4","nodeType":"FunctionDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[],"src":"762:2:4"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":268,"src":"788:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"788:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"787:9:4"},"scope":319,"src":"742:55:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"801:68:4","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":276,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"881:9:4","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"account","nameLocation":"899:7:4","nodeType":"VariableDeclaration","scope":276,"src":"891:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:17:4"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":276,"src":"931:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"931:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"930:9:4"},"scope":319,"src":"872:68:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"944:190:4","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":286,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1146:8:4","nodeType":"FunctionDefinition","parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"to","nameLocation":"1163:2:4","nodeType":"VariableDeclaration","scope":286,"src":"1155:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":278,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"amount","nameLocation":"1175:6:4","nodeType":"VariableDeclaration","scope":286,"src":"1167:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"1167:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1154:28:4"},"returnParameters":{"id":285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":286,"src":"1201:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":283,"name":"bool","nodeType":"ElementaryTypeName","src":"1201:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1200:6:4"},"scope":319,"src":"1137:70:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":287,"nodeType":"StructuredDocumentation","src":"1211:252:4","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":296,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1475:9:4","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"owner","nameLocation":"1493:5:4","nodeType":"VariableDeclaration","scope":296,"src":"1485:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":288,"name":"address","nodeType":"ElementaryTypeName","src":"1485:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":291,"mutability":"mutable","name":"spender","nameLocation":"1508:7:4","nodeType":"VariableDeclaration","scope":296,"src":"1500:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":290,"name":"address","nodeType":"ElementaryTypeName","src":"1500:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1484:32:4"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":296,"src":"1540:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"1540:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1539:9:4"},"scope":319,"src":"1466:83:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"1553:616:4","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":306,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2181:7:4","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"spender","nameLocation":"2197:7:4","nodeType":"VariableDeclaration","scope":306,"src":"2189:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":298,"name":"address","nodeType":"ElementaryTypeName","src":"2189:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":301,"mutability":"mutable","name":"amount","nameLocation":"2214:6:4","nodeType":"VariableDeclaration","scope":306,"src":"2206:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"2206:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2188:33:4"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":306,"src":"2240:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":303,"name":"bool","nodeType":"ElementaryTypeName","src":"2240:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2239:6:4"},"scope":319,"src":"2172:74:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":307,"nodeType":"StructuredDocumentation","src":"2250:271:4","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":318,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2533:12:4","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"from","nameLocation":"2559:4:4","nodeType":"VariableDeclaration","scope":318,"src":"2551:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"2551:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":311,"mutability":"mutable","name":"to","nameLocation":"2577:2:4","nodeType":"VariableDeclaration","scope":318,"src":"2569:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"2569:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"amount","nameLocation":"2593:6:4","nodeType":"VariableDeclaration","scope":318,"src":"2585:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":312,"name":"uint256","nodeType":"ElementaryTypeName","src":"2585:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2545:58:4"},"returnParameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":318,"src":"2622:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":315,"name":"bool","nodeType":"ElementaryTypeName","src":"2622:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2621:6:4"},"scope":319,"src":"2524:104:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":320,"src":"202:2428:4","usedErrors":[],"usedEvents":[253,262]}],"src":"106:2524:4"},"id":4},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[331]},"id":332,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":321,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"125:279:5","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":331,"linearizedBaseContracts":[331],"name":"IERC165","nameLocation":"415:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":323,"nodeType":"StructuredDocumentation","src":"427:333:5","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":330,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"772:17:5","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"interfaceId","nameLocation":"797:11:5","nodeType":"VariableDeclaration","scope":330,"src":"790:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":324,"name":"bytes4","nodeType":"ElementaryTypeName","src":"790:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"789:20:5"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":330,"src":"833:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":327,"name":"bool","nodeType":"ElementaryTypeName","src":"833:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"832:6:5"},"scope":331,"src":"763:76:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":332,"src":"405:436:5","usedErrors":[],"usedEvents":[]}],"src":"100:741:5"},"id":5},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol","exportedSymbols":{"FunctionsClient":[449],"FunctionsRequest":[1235],"IFunctionsClient":[463],"IFunctionsRouter":[597]},"id":450,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":333,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol","file":"./interfaces/IFunctionsRouter.sol","id":335,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":450,"sourceUnit":598,"src":"58:67:6","symbolAliases":[{"foreign":{"id":334,"name":"IFunctionsRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol","file":"./interfaces/IFunctionsClient.sol","id":337,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":450,"sourceUnit":464,"src":"126:67:6","symbolAliases":[{"foreign":{"id":336,"name":"IFunctionsClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"134:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol","file":"./libraries/FunctionsRequest.sol","id":339,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":450,"sourceUnit":1236,"src":"195:66:6","symbolAliases":[{"foreign":{"id":338,"name":"FunctionsRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"203:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":341,"name":"IFunctionsClient","nameLocations":["455:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"455:16:6"},"id":342,"nodeType":"InheritanceSpecifier","src":"455:16:6"}],"canonicalName":"FunctionsClient","contractDependencies":[],"contractKind":"contract","documentation":{"id":340,"nodeType":"StructuredDocumentation","src":"263:155:6","text":"@title The Chainlink Functions client contract\n @notice Contract developers can inherit this contract in order to make Chainlink Functions requests"},"fullyImplemented":false,"id":449,"linearizedBaseContracts":[449,463],"name":"FunctionsClient","nameLocation":"436:15:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":346,"libraryName":{"id":343,"name":"FunctionsRequest","nameLocations":["482:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":1235,"src":"482:16:6"},"nodeType":"UsingForDirective","src":"476:52:6","typeName":{"id":345,"nodeType":"UserDefinedTypeName","pathNode":{"id":344,"name":"FunctionsRequest.Request","nameLocations":["503:16:6","520:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"503:24:6"},"referencedDeclaration":813,"src":"503:24:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}}},{"constant":false,"id":349,"mutability":"immutable","name":"i_router","nameLocation":"568:8:6","nodeType":"VariableDeclaration","scope":449,"src":"532:44:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"},"typeName":{"id":348,"nodeType":"UserDefinedTypeName","pathNode":{"id":347,"name":"IFunctionsRouter","nameLocations":["532:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":597,"src":"532:16:6"},"referencedDeclaration":597,"src":"532:16:6","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8","id":353,"name":"RequestSent","nameLocation":"587:11:6","nodeType":"EventDefinition","parameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"615:2:6","nodeType":"VariableDeclaration","scope":353,"src":"599:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"599:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"598:20:6"},"src":"581:38:6"},{"anonymous":false,"eventSelector":"85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6","id":357,"name":"RequestFulfilled","nameLocation":"628:16:6","nodeType":"EventDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":355,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"661:2:6","nodeType":"VariableDeclaration","scope":357,"src":"645:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"645:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"644:20:6"},"src":"622:43:6"},{"errorSelector":"c6829f83","id":359,"name":"OnlyRouterCanFulfill","nameLocation":"675:20:6","nodeType":"ErrorDefinition","parameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"695:2:6"},"src":"669:29:6"},{"body":{"id":370,"nodeType":"Block","src":"730:46:6","statements":[{"expression":{"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":364,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"736:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":366,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"764:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":365,"name":"IFunctionsRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"747:16:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFunctionsRouter_$597_$","typeString":"type(contract IFunctionsRouter)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"747:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"}},"src":"736:35:6","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"}},"id":369,"nodeType":"ExpressionStatement","src":"736:35:6"}]},"id":371,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"router","nameLocation":"722:6:6","nodeType":"VariableDeclaration","scope":371,"src":"714:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"713:16:6"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"730:0:6"},"scope":449,"src":"702:74:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":403,"nodeType":"Block","src":"1309:228:6","statements":[{"assignments":[386],"declarations":[{"constant":false,"id":386,"mutability":"mutable","name":"requestId","nameLocation":"1323:9:6","nodeType":"VariableDeclaration","scope":403,"src":"1315:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1315:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":396,"initialValue":{"arguments":[{"id":389,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"1363:14:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":390,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"1385:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":391,"name":"FunctionsRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"1397:16:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FunctionsRequest_$1235_$","typeString":"type(library FunctionsRequest)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1414:20:6","memberName":"REQUEST_DATA_VERSION","nodeType":"MemberAccess","referencedDeclaration":784,"src":"1397:37:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":393,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1442:16:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":394,"name":"donId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1466:5:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":387,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1335:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1344:11:6","memberName":"sendRequest","nodeType":"MemberAccess","referencedDeclaration":502,"src":"1335:20:6","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_bytes_memory_ptr_$_t_uint16_$_t_uint32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (uint64,bytes memory,uint16,uint32,bytes32) external returns (bytes32)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1335:142:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1315:162:6"},{"eventCall":{"arguments":[{"id":398,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"1500:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":397,"name":"RequestSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"1488:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1488:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":400,"nodeType":"EmitStatement","src":"1483:27:6"},{"expression":{"id":401,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"1523:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":384,"id":402,"nodeType":"Return","src":"1516:16:6"}]},"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"780:375:6","text":"@notice Sends a Chainlink Functions request\n @param data The CBOR encoded bytes data for a Functions request\n @param subscriptionId The subscription ID that will be charged to service the request\n @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\n @return requestId The generated request ID for this request"},"id":404,"implemented":true,"kind":"function","modifiers":[],"name":"_sendRequest","nameLocation":"1167:12:6","nodeType":"FunctionDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"data","nameLocation":"1198:4:6","nodeType":"VariableDeclaration","scope":404,"src":"1185:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":373,"name":"bytes","nodeType":"ElementaryTypeName","src":"1185:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":376,"mutability":"mutable","name":"subscriptionId","nameLocation":"1215:14:6","nodeType":"VariableDeclaration","scope":404,"src":"1208:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":375,"name":"uint64","nodeType":"ElementaryTypeName","src":"1208:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1242:16:6","nodeType":"VariableDeclaration","scope":404,"src":"1235:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":377,"name":"uint32","nodeType":"ElementaryTypeName","src":"1235:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"donId","nameLocation":"1272:5:6","nodeType":"VariableDeclaration","scope":404,"src":"1264:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1264:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1179:102:6"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":404,"src":"1300:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":382,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1300:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1299:9:6"},"scope":449,"src":"1158:379:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"1541:394:6","text":"@notice User defined function to handle a response from the DON\n @param requestId The request ID, returned by sendRequest()\n @param response Aggregated response from the execution of the user's source code\n @param err Aggregated error from the execution of the user code or from the execution pipeline\n @dev Either response or error parameter will be set, but never both"},"id":414,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRequest","nameLocation":"1947:14:6","nodeType":"FunctionDefinition","parameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"requestId","nameLocation":"1970:9:6","nodeType":"VariableDeclaration","scope":414,"src":"1962:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1962:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"response","nameLocation":"1994:8:6","nodeType":"VariableDeclaration","scope":414,"src":"1981:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":408,"name":"bytes","nodeType":"ElementaryTypeName","src":"1981:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"err","nameLocation":"2017:3:6","nodeType":"VariableDeclaration","scope":414,"src":"2004:16:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":410,"name":"bytes","nodeType":"ElementaryTypeName","src":"2004:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1961:60:6"},"returnParameters":{"id":413,"nodeType":"ParameterList","parameters":[],"src":"2038:0:6"},"scope":449,"src":"1938:101:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[462],"body":{"id":447,"nodeType":"Block","src":"2189:175:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":425,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2199:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2203:6:6","memberName":"sender","nodeType":"MemberAccess","src":"2199:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":429,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"2221:8:6","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IFunctionsRouter_$597","typeString":"contract IFunctionsRouter"}],"id":428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2213:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":427,"name":"address","nodeType":"ElementaryTypeName","src":"2213:7:6","typeDescriptions":{}}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2213:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2199:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":436,"nodeType":"IfStatement","src":"2195:81:6","trueBody":{"id":435,"nodeType":"Block","src":"2232:44:6","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":432,"name":"OnlyRouterCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"2247:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":434,"nodeType":"RevertStatement","src":"2240:29:6"}]}},{"expression":{"arguments":[{"id":438,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"2296:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":439,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"2307:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":440,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"2317:3:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":437,"name":"fulfillRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"2281:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2281:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":442,"nodeType":"ExpressionStatement","src":"2281:40:6"},{"eventCall":{"arguments":[{"id":444,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"2349:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":443,"name":"RequestFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"2332:16:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":446,"nodeType":"EmitStatement","src":"2327:32:6"}]},"documentation":{"id":415,"nodeType":"StructuredDocumentation","src":"2043:32:6","text":"@inheritdoc IFunctionsClient"},"functionSelector":"0ca76175","id":448,"implemented":true,"kind":"function","modifiers":[],"name":"handleOracleFulfillment","nameLocation":"2087:23:6","nodeType":"FunctionDefinition","overrides":{"id":423,"nodeType":"OverrideSpecifier","overrides":[],"src":"2180:8:6"},"parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"requestId","nameLocation":"2119:9:6","nodeType":"VariableDeclaration","scope":448,"src":"2111:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2111:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":419,"mutability":"mutable","name":"response","nameLocation":"2143:8:6","nodeType":"VariableDeclaration","scope":448,"src":"2130:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":418,"name":"bytes","nodeType":"ElementaryTypeName","src":"2130:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":421,"mutability":"mutable","name":"err","nameLocation":"2166:3:6","nodeType":"VariableDeclaration","scope":448,"src":"2153:16:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":420,"name":"bytes","nodeType":"ElementaryTypeName","src":"2153:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2110:60:6"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[],"src":"2189:0:6"},"scope":449,"src":"2078:286:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":450,"src":"418:1948:6","usedErrors":[359],"usedEvents":[353,357]}],"src":"32:2335:6"},"id":6},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol","exportedSymbols":{"IFunctionsClient":[463]},"id":464,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":451,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IFunctionsClient","contractDependencies":[],"contractKind":"interface","documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"58:49:7","text":"@title Chainlink Functions client interface."},"fullyImplemented":false,"id":463,"linearizedBaseContracts":[463],"name":"IFunctionsClient","nameLocation":"117:16:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"138:490:7","text":"@notice Chainlink Functions response handler called by the Functions Router\n during fullilment from the designated transmitter node in an OCR round.\n @param requestId The requestId returned by FunctionsClient.sendRequest().\n @param response Aggregated response from the request's source code.\n @param err Aggregated error either from the request's source code or from the execution pipeline.\n @dev Either response or error parameter will be set, but never both."},"functionSelector":"0ca76175","id":462,"implemented":false,"kind":"function","modifiers":[],"name":"handleOracleFulfillment","nameLocation":"640:23:7","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":455,"mutability":"mutable","name":"requestId","nameLocation":"672:9:7","nodeType":"VariableDeclaration","scope":462,"src":"664:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"664:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":457,"mutability":"mutable","name":"response","nameLocation":"696:8:7","nodeType":"VariableDeclaration","scope":462,"src":"683:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":456,"name":"bytes","nodeType":"ElementaryTypeName","src":"683:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"err","nameLocation":"719:3:7","nodeType":"VariableDeclaration","scope":462,"src":"706:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":458,"name":"bytes","nodeType":"ElementaryTypeName","src":"706:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"663:60:7"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[],"src":"732:0:7"},"scope":463,"src":"631:102:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":464,"src":"107:628:7","usedErrors":[],"usedEvents":[]}],"src":"32:704:7"},"id":7},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol","exportedSymbols":{"FunctionsResponse":[1295],"IFunctionsRouter":[597]},"id":598,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":465,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:8"},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol","file":"../libraries/FunctionsResponse.sol","id":467,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":598,"sourceUnit":1296,"src":"58:69:8","symbolAliases":[{"foreign":{"id":466,"name":"FunctionsResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"66:17:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IFunctionsRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":468,"nodeType":"StructuredDocumentation","src":"129:49:8","text":"@title Chainlink Functions Router interface."},"fullyImplemented":false,"id":597,"linearizedBaseContracts":[597],"name":"IFunctionsRouter","nameLocation":"188:16:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"209:265:8","text":"@notice The identifier of the route to retrieve the address of the access control contract\n The access control contract controls which accounts can manage subscriptions\n @return id - bytes32 id that can be passed to the \"getContractById\" of the Router"},"functionSelector":"aab396bd","id":474,"implemented":false,"kind":"function","modifiers":[],"name":"getAllowListId","nameLocation":"486:14:8","nodeType":"FunctionDefinition","parameters":{"id":470,"nodeType":"ParameterList","parameters":[],"src":"500:2:8"},"returnParameters":{"id":473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":474,"src":"526:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":471,"name":"bytes32","nodeType":"ElementaryTypeName","src":"526:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"525:9:8"},"scope":597,"src":"477:58:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"539:181:8","text":"@notice Set the identifier of the route to retrieve the address of the access control contract\n The access control contract controls which accounts can manage subscriptions"},"functionSelector":"ea320e0b","id":480,"implemented":false,"kind":"function","modifiers":[],"name":"setAllowListId","nameLocation":"732:14:8","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"allowListId","nameLocation":"755:11:8","nodeType":"VariableDeclaration","scope":480,"src":"747:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":476,"name":"bytes32","nodeType":"ElementaryTypeName","src":"747:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"746:21:8"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[],"src":"776:0:8"},"scope":597,"src":"723:54:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"781:137:8","text":"@notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\n @return adminFee"},"functionSelector":"2a905ccc","id":486,"implemented":false,"kind":"function","modifiers":[],"name":"getAdminFee","nameLocation":"930:11:8","nodeType":"FunctionDefinition","parameters":{"id":482,"nodeType":"ParameterList","parameters":[],"src":"941:2:8"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"adminFee","nameLocation":"974:8:8","nodeType":"VariableDeclaration","scope":486,"src":"967:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":483,"name":"uint72","nodeType":"ElementaryTypeName","src":"967:6:8","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"966:17:8"},"scope":597,"src":"921:63:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":487,"nodeType":"StructuredDocumentation","src":"988:630:8","text":"@notice Sends a request using the provided subscriptionId\n @param subscriptionId - A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param dataVersion - Gas limit for the fulfillment callback\n @param callbackGasLimit - Gas limit for the fulfillment callback\n @param donId - An identifier used to determine which route to send the request along\n @return requestId - A unique request identifier"},"functionSelector":"461d2762","id":502,"implemented":false,"kind":"function","modifiers":[],"name":"sendRequest","nameLocation":"1630:11:8","nodeType":"FunctionDefinition","parameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"subscriptionId","nameLocation":"1654:14:8","nodeType":"VariableDeclaration","scope":502,"src":"1647:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":488,"name":"uint64","nodeType":"ElementaryTypeName","src":"1647:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"data","nameLocation":"1689:4:8","nodeType":"VariableDeclaration","scope":502,"src":"1674:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":490,"name":"bytes","nodeType":"ElementaryTypeName","src":"1674:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"dataVersion","nameLocation":"1706:11:8","nodeType":"VariableDeclaration","scope":502,"src":"1699:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":492,"name":"uint16","nodeType":"ElementaryTypeName","src":"1699:6:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1730:16:8","nodeType":"VariableDeclaration","scope":502,"src":"1723:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":494,"name":"uint32","nodeType":"ElementaryTypeName","src":"1723:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":497,"mutability":"mutable","name":"donId","nameLocation":"1760:5:8","nodeType":"VariableDeclaration","scope":502,"src":"1752:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1641:128:8"},"returnParameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":502,"src":"1788:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1788:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1787:9:8"},"scope":597,"src":"1621:176:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":503,"nodeType":"StructuredDocumentation","src":"1801:622:8","text":"@notice Sends a request to the proposed contracts\n @param subscriptionId - A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param dataVersion - Gas limit for the fulfillment callback\n @param callbackGasLimit - Gas limit for the fulfillment callback\n @param donId - An identifier used to determine which route to send the request along\n @return requestId - A unique request identifier"},"functionSelector":"41db4ca3","id":518,"implemented":false,"kind":"function","modifiers":[],"name":"sendRequestToProposed","nameLocation":"2435:21:8","nodeType":"FunctionDefinition","parameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"subscriptionId","nameLocation":"2469:14:8","nodeType":"VariableDeclaration","scope":518,"src":"2462:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":504,"name":"uint64","nodeType":"ElementaryTypeName","src":"2462:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"data","nameLocation":"2504:4:8","nodeType":"VariableDeclaration","scope":518,"src":"2489:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":506,"name":"bytes","nodeType":"ElementaryTypeName","src":"2489:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"dataVersion","nameLocation":"2521:11:8","nodeType":"VariableDeclaration","scope":518,"src":"2514:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":508,"name":"uint16","nodeType":"ElementaryTypeName","src":"2514:6:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":511,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2545:16:8","nodeType":"VariableDeclaration","scope":518,"src":"2538:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":510,"name":"uint32","nodeType":"ElementaryTypeName","src":"2538:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"donId","nameLocation":"2575:5:8","nodeType":"VariableDeclaration","scope":518,"src":"2567:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2567:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2456:128:8"},"returnParameters":{"id":517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":518,"src":"2603:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":515,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2603:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2602:9:8"},"scope":597,"src":"2426:186:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"2616:763:8","text":"@notice Fulfill the request by:\n - calling back the data that the Oracle returned to the client contract\n - pay the DON for processing the request\n @dev Only callable by the Coordinator contract that is saved in the commitment\n @param response response data from DON consensus\n @param err error from DON consensus\n @param juelsPerGas - current rate of juels/gas\n @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\n @param transmitter - The Node that transmitted the OCR report\n @param commitment - The parameters of the request that must be held consistent between request and response time\n @return fulfillResult -\n @return callbackGasCostJuels -"},"functionSelector":"33060529","id":540,"implemented":false,"kind":"function","modifiers":[],"name":"fulfill","nameLocation":"3391:7:8","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":521,"mutability":"mutable","name":"response","nameLocation":"3417:8:8","nodeType":"VariableDeclaration","scope":540,"src":"3404:21:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":520,"name":"bytes","nodeType":"ElementaryTypeName","src":"3404:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"err","nameLocation":"3444:3:8","nodeType":"VariableDeclaration","scope":540,"src":"3431:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":522,"name":"bytes","nodeType":"ElementaryTypeName","src":"3431:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"juelsPerGas","nameLocation":"3460:11:8","nodeType":"VariableDeclaration","scope":540,"src":"3453:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":524,"name":"uint96","nodeType":"ElementaryTypeName","src":"3453:6:8","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"costWithoutFulfillment","nameLocation":"3484:22:8","nodeType":"VariableDeclaration","scope":540,"src":"3477:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":526,"name":"uint96","nodeType":"ElementaryTypeName","src":"3477:6:8","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"transmitter","nameLocation":"3520:11:8","nodeType":"VariableDeclaration","scope":540,"src":"3512:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"3512:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":532,"mutability":"mutable","name":"commitment","nameLocation":"3573:10:8","nodeType":"VariableDeclaration","scope":540,"src":"3537:46:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Commitment_$1294_memory_ptr","typeString":"struct FunctionsResponse.Commitment"},"typeName":{"id":531,"nodeType":"UserDefinedTypeName","pathNode":{"id":530,"name":"FunctionsResponse.Commitment","nameLocations":["3537:17:8","3555:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":1294,"src":"3537:28:8"},"referencedDeclaration":1294,"src":"3537:28:8","typeDescriptions":{"typeIdentifier":"t_struct$_Commitment_$1294_storage_ptr","typeString":"struct FunctionsResponse.Commitment"}},"visibility":"internal"}],"src":"3398:189:8"},"returnParameters":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"3606:31:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FulfillResult_$1271","typeString":"enum FunctionsResponse.FulfillResult"},"typeName":{"id":535,"nodeType":"UserDefinedTypeName","pathNode":{"id":534,"name":"FunctionsResponse.FulfillResult","nameLocations":["3606:17:8","3624:13:8"],"nodeType":"IdentifierPath","referencedDeclaration":1271,"src":"3606:31:8"},"referencedDeclaration":1271,"src":"3606:31:8","typeDescriptions":{"typeIdentifier":"t_enum$_FulfillResult_$1271","typeString":"enum FunctionsResponse.FulfillResult"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"3639:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":537,"name":"uint96","nodeType":"ElementaryTypeName","src":"3639:6:8","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3605:41:8"},"scope":597,"src":"3382:265:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"3651:172:8","text":"@notice Validate requested gas limit is below the subscription max.\n @param subscriptionId subscription ID\n @param callbackGasLimit desired callback gas limit"},"functionSelector":"10fc49c1","id":548,"implemented":false,"kind":"function","modifiers":[],"name":"isValidCallbackGasLimit","nameLocation":"3835:23:8","nodeType":"FunctionDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"subscriptionId","nameLocation":"3866:14:8","nodeType":"VariableDeclaration","scope":548,"src":"3859:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":542,"name":"uint64","nodeType":"ElementaryTypeName","src":"3859:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":545,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"3889:16:8","nodeType":"VariableDeclaration","scope":548,"src":"3882:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":544,"name":"uint32","nodeType":"ElementaryTypeName","src":"3882:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3858:48:8"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[],"src":"3920:0:8"},"scope":597,"src":"3826:95:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"3925:151:8","text":"@notice Get the current contract given an ID\n @param id A bytes32 identifier for the route\n @return contract The current contract address"},"functionSelector":"a9c9a918","id":556,"implemented":false,"kind":"function","modifiers":[],"name":"getContractById","nameLocation":"4088:15:8","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"id","nameLocation":"4112:2:8","nodeType":"VariableDeclaration","scope":556,"src":"4104:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4104:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4103:12:8"},"returnParameters":{"id":555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":556,"src":"4139:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4138:9:8"},"scope":597,"src":"4079:69:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"4152:169:8","text":"@notice Get the proposed next contract given an ID\n @param id A bytes32 identifier for the route\n @return contract The current or proposed contract address"},"functionSelector":"6a2215de","id":564,"implemented":false,"kind":"function","modifiers":[],"name":"getProposedContractById","nameLocation":"4333:23:8","nodeType":"FunctionDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"id","nameLocation":"4365:2:8","nodeType":"VariableDeclaration","scope":564,"src":"4357:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":558,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4357:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4356:12:8"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":564,"src":"4392:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":561,"name":"address","nodeType":"ElementaryTypeName","src":"4392:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4391:9:8"},"scope":597,"src":"4324:77:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"4405:176:8","text":"@notice Return the latest proprosal set\n @return ids The identifiers of the contracts to update\n @return to The addresses of the contracts that will be updated to"},"functionSelector":"badc3eb6","id":574,"implemented":false,"kind":"function","modifiers":[],"name":"getProposedContractSet","nameLocation":"4593:22:8","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"4615:2:8"},"returnParameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":574,"src":"4641:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":567,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4641:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":568,"nodeType":"ArrayTypeName","src":"4641:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":574,"src":"4659:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"4659:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":571,"nodeType":"ArrayTypeName","src":"4659:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4640:36:8"},"scope":597,"src":"4584:93:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":575,"nodeType":"StructuredDocumentation","src":"4681:97:8","text":"@notice Proposes one or more updates to the contract routes\n @dev Only callable by owner"},"functionSelector":"3e871e4d","id":584,"implemented":false,"kind":"function","modifiers":[],"name":"proposeContractsUpdate","nameLocation":"4790:22:8","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":578,"mutability":"mutable","name":"proposalSetIds","nameLocation":"4830:14:8","nodeType":"VariableDeclaration","scope":584,"src":"4813:31:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4813:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":577,"nodeType":"ArrayTypeName","src":"4813:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"proposalSetAddresses","nameLocation":"4863:20:8","nodeType":"VariableDeclaration","scope":584,"src":"4846:37:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"4846:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":580,"nodeType":"ArrayTypeName","src":"4846:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4812:72:8"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[],"src":"4893:0:8"},"scope":597,"src":"4781:113:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"4898:107:8","text":"@notice Updates the current contract routes to the proposed contracts\n @dev Only callable by owner"},"functionSelector":"b734c0f4","id":588,"implemented":false,"kind":"function","modifiers":[],"name":"updateContracts","nameLocation":"5017:15:8","nodeType":"FunctionDefinition","parameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"5032:2:8"},"returnParameters":{"id":587,"nodeType":"ParameterList","parameters":[],"src":"5043:0:8"},"scope":597,"src":"5008:36:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":589,"nodeType":"StructuredDocumentation","src":"5048:91:8","text":"@dev Puts the system into an emergency stopped state.\n @dev Only callable by owner"},"functionSelector":"8456cb59","id":592,"implemented":false,"kind":"function","modifiers":[],"name":"pause","nameLocation":"5151:5:8","nodeType":"FunctionDefinition","parameters":{"id":590,"nodeType":"ParameterList","parameters":[],"src":"5156:2:8"},"returnParameters":{"id":591,"nodeType":"ParameterList","parameters":[],"src":"5167:0:8"},"scope":597,"src":"5142:26:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"5172:94:8","text":"@dev Takes the system out of an emergency stopped state.\n @dev Only callable by owner"},"functionSelector":"3f4ba83a","id":596,"implemented":false,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"5278:7:8","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[],"src":"5285:2:8"},"returnParameters":{"id":595,"nodeType":"ParameterList","parameters":[],"src":"5296:0:8"},"scope":597,"src":"5269:28:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":598,"src":"178:5121:8","usedErrors":[],"usedEvents":[]}],"src":"32:5268:8"},"id":8},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol","exportedSymbols":{"FunctionsResponse":[1295],"IFunctionsSubscriptions":[772]},"id":773,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":599,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:9"},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol","file":"../libraries/FunctionsResponse.sol","id":601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":773,"sourceUnit":1296,"src":"58:69:9","symbolAliases":[{"foreign":{"id":600,"name":"FunctionsResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"66:17:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IFunctionsSubscriptions","contractDependencies":[],"contractKind":"interface","documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"129:55:9","text":"@title Chainlink Functions Subscription interface."},"fullyImplemented":false,"id":772,"linearizedBaseContracts":[772],"name":"IFunctionsSubscriptions","nameLocation":"194:23:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IFunctionsSubscriptions.Subscription","id":616,"members":[{"constant":false,"id":604,"mutability":"mutable","name":"balance","nameLocation":"255:7:9","nodeType":"VariableDeclaration","scope":616,"src":"248:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":603,"name":"uint96","nodeType":"ElementaryTypeName","src":"248:6:9","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"owner","nameLocation":"401:5:9","nodeType":"VariableDeclaration","scope":616,"src":"393:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"blockedBalance","nameLocation":"509:14:9","nodeType":"VariableDeclaration","scope":616,"src":"502:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":607,"name":"uint96","nodeType":"ElementaryTypeName","src":"502:6:9","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":610,"mutability":"mutable","name":"proposedOwner","nameLocation":"618:13:9","nodeType":"VariableDeclaration","scope":616,"src":"610:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":613,"mutability":"mutable","name":"consumers","nameLocation":"699:9:9","nodeType":"VariableDeclaration","scope":616,"src":"689:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":611,"name":"address","nodeType":"ElementaryTypeName","src":"689:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":612,"nodeType":"ArrayTypeName","src":"689:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":615,"mutability":"mutable","name":"flags","nameLocation":"788:5:9","nodeType":"VariableDeclaration","scope":616,"src":"780:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"780:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Subscription","nameLocation":"229:12:9","nodeType":"StructDefinition","scope":772,"src":"222:636:9","visibility":"public"},{"canonicalName":"IFunctionsSubscriptions.Consumer","id":623,"members":[{"constant":false,"id":618,"mutability":"mutable","name":"allowed","nameLocation":"889:7:9","nodeType":"VariableDeclaration","scope":623,"src":"884:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":617,"name":"bool","nodeType":"ElementaryTypeName","src":"884:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":620,"mutability":"mutable","name":"initiatedRequests","nameLocation":"998:17:9","nodeType":"VariableDeclaration","scope":623,"src":"991:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":619,"name":"uint64","nodeType":"ElementaryTypeName","src":"991:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":622,"mutability":"mutable","name":"completedRequests","nameLocation":"1083:17:9","nodeType":"VariableDeclaration","scope":623,"src":"1076:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":621,"name":"uint64","nodeType":"ElementaryTypeName","src":"1076:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"Consumer","nameLocation":"869:8:9","nodeType":"StructDefinition","scope":772,"src":"862:325:9","visibility":"public"},{"documentation":{"id":624,"nodeType":"StructuredDocumentation","src":"1191:210:9","text":"@notice Get details about a subscription.\n @param subscriptionId - the ID of the subscription\n @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure"},"functionSelector":"a47c7696","id":632,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"1413:15:9","nodeType":"FunctionDefinition","parameters":{"id":627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":626,"mutability":"mutable","name":"subscriptionId","nameLocation":"1436:14:9","nodeType":"VariableDeclaration","scope":632,"src":"1429:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":625,"name":"uint64","nodeType":"ElementaryTypeName","src":"1429:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1428:23:9"},"returnParameters":{"id":631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":632,"src":"1475:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$616_memory_ptr","typeString":"struct IFunctionsSubscriptions.Subscription"},"typeName":{"id":629,"nodeType":"UserDefinedTypeName","pathNode":{"id":628,"name":"Subscription","nameLocations":["1475:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"1475:12:9"},"referencedDeclaration":616,"src":"1475:12:9","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$616_storage_ptr","typeString":"struct IFunctionsSubscriptions.Subscription"}},"visibility":"internal"}],"src":"1474:21:9"},"scope":772,"src":"1404:92:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":633,"nodeType":"StructuredDocumentation","src":"1500:355:9","text":"@notice Retrieve details about multiple subscriptions using an inclusive range\n @param subscriptionIdStart - the ID of the subscription to start the range at\n @param subscriptionIdEnd - the ID of the subscription to end the range at\n @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure"},"functionSelector":"ec2454e5","id":644,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscriptionsInRange","nameLocation":"1867:23:9","nodeType":"FunctionDefinition","parameters":{"id":638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"subscriptionIdStart","nameLocation":"1903:19:9","nodeType":"VariableDeclaration","scope":644,"src":"1896:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":634,"name":"uint64","nodeType":"ElementaryTypeName","src":"1896:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":637,"mutability":"mutable","name":"subscriptionIdEnd","nameLocation":"1935:17:9","nodeType":"VariableDeclaration","scope":644,"src":"1928:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":636,"name":"uint64","nodeType":"ElementaryTypeName","src":"1928:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1890:66:9"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":644,"src":"1980:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Subscription_$616_memory_ptr_$dyn_memory_ptr","typeString":"struct IFunctionsSubscriptions.Subscription[]"},"typeName":{"baseType":{"id":640,"nodeType":"UserDefinedTypeName","pathNode":{"id":639,"name":"Subscription","nameLocations":["1980:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"1980:12:9"},"referencedDeclaration":616,"src":"1980:12:9","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$616_storage_ptr","typeString":"struct IFunctionsSubscriptions.Subscription"}},"id":641,"nodeType":"ArrayTypeName","src":"1980:14:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Subscription_$616_storage_$dyn_storage_ptr","typeString":"struct IFunctionsSubscriptions.Subscription[]"}},"visibility":"internal"}],"src":"1979:23:9"},"scope":772,"src":"1858:145:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":645,"nodeType":"StructuredDocumentation","src":"2007:268:9","text":"@notice Get details about a consumer of a subscription.\n @param client - the consumer contract address\n @param subscriptionId - the ID of the subscription\n @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure"},"functionSelector":"674603d0","id":655,"implemented":false,"kind":"function","modifiers":[],"name":"getConsumer","nameLocation":"2287:11:9","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"client","nameLocation":"2307:6:9","nodeType":"VariableDeclaration","scope":655,"src":"2299:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"2299:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":649,"mutability":"mutable","name":"subscriptionId","nameLocation":"2322:14:9","nodeType":"VariableDeclaration","scope":655,"src":"2315:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":648,"name":"uint64","nodeType":"ElementaryTypeName","src":"2315:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2298:39:9"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":655,"src":"2361:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Consumer_$623_memory_ptr","typeString":"struct IFunctionsSubscriptions.Consumer"},"typeName":{"id":652,"nodeType":"UserDefinedTypeName","pathNode":{"id":651,"name":"Consumer","nameLocations":["2361:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":623,"src":"2361:8:9"},"referencedDeclaration":623,"src":"2361:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Consumer_$623_storage_ptr","typeString":"struct IFunctionsSubscriptions.Consumer"}},"visibility":"internal"}],"src":"2360:17:9"},"scope":772,"src":"2278:100:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":656,"nodeType":"StructuredDocumentation","src":"2382:142:9","text":"@notice Get details about the total amount of LINK within the system\n @return totalBalance - total Juels of LINK held by the contract"},"functionSelector":"12b58349","id":661,"implemented":false,"kind":"function","modifiers":[],"name":"getTotalBalance","nameLocation":"2536:15:9","nodeType":"FunctionDefinition","parameters":{"id":657,"nodeType":"ParameterList","parameters":[],"src":"2551:2:9"},"returnParameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":661,"src":"2577:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":658,"name":"uint96","nodeType":"ElementaryTypeName","src":"2577:6:9","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"2576:8:9"},"scope":772,"src":"2527:58:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"2589:137:9","text":"@notice Get details about the total number of subscription accounts\n @return count - total number of subscriptions in the system"},"functionSelector":"66419970","id":667,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscriptionCount","nameLocation":"2738:20:9","nodeType":"FunctionDefinition","parameters":{"id":663,"nodeType":"ParameterList","parameters":[],"src":"2758:2:9"},"returnParameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":667,"src":"2784:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":664,"name":"uint64","nodeType":"ElementaryTypeName","src":"2784:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2783:8:9"},"scope":772,"src":"2729:63:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":668,"nodeType":"StructuredDocumentation","src":"2796:301:9","text":"@notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\n @param requestsToTimeoutByCommitment - A list of request commitments to time out\n @dev The commitment can be found on the \"OracleRequest\" event created when sending the request."},"functionSelector":"e82622aa","id":675,"implemented":false,"kind":"function","modifiers":[],"name":"timeoutRequests","nameLocation":"3109:15:9","nodeType":"FunctionDefinition","parameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"requestsToTimeoutByCommitment","nameLocation":"3165:29:9","nodeType":"VariableDeclaration","scope":675,"src":"3125:69:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Commitment_$1294_calldata_ptr_$dyn_calldata_ptr","typeString":"struct FunctionsResponse.Commitment[]"},"typeName":{"baseType":{"id":670,"nodeType":"UserDefinedTypeName","pathNode":{"id":669,"name":"FunctionsResponse.Commitment","nameLocations":["3125:17:9","3143:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1294,"src":"3125:28:9"},"referencedDeclaration":1294,"src":"3125:28:9","typeDescriptions":{"typeIdentifier":"t_struct$_Commitment_$1294_storage_ptr","typeString":"struct FunctionsResponse.Commitment"}},"id":671,"nodeType":"ArrayTypeName","src":"3125:30:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Commitment_$1294_storage_$dyn_storage_ptr","typeString":"struct FunctionsResponse.Commitment[]"}},"visibility":"internal"}],"src":"3124:71:9"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"3204:0:9"},"scope":772,"src":"3100:105:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":676,"nodeType":"StructuredDocumentation","src":"3209:301:9","text":"@notice Oracle withdraw LINK earned through fulfilling requests\n @notice If amount is 0 the full balance will be withdrawn\n @notice Both signing and transmitting wallets will have a balance to withdraw\n @param recipient where to send the funds\n @param amount amount to withdraw"},"functionSelector":"66316d8d","id":683,"implemented":false,"kind":"function","modifiers":[],"name":"oracleWithdraw","nameLocation":"3522:14:9","nodeType":"FunctionDefinition","parameters":{"id":681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":678,"mutability":"mutable","name":"recipient","nameLocation":"3545:9:9","nodeType":"VariableDeclaration","scope":683,"src":"3537:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":677,"name":"address","nodeType":"ElementaryTypeName","src":"3537:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":680,"mutability":"mutable","name":"amount","nameLocation":"3563:6:9","nodeType":"VariableDeclaration","scope":683,"src":"3556:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":679,"name":"uint96","nodeType":"ElementaryTypeName","src":"3556:6:9","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3536:34:9"},"returnParameters":{"id":682,"nodeType":"ParameterList","parameters":[],"src":"3579:0:9"},"scope":772,"src":"3513:67:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":684,"nodeType":"StructuredDocumentation","src":"3584:287:9","text":"@notice Owner cancel subscription, sends remaining link directly to the subscription owner.\n @dev Only callable by the Router Owner\n @param subscriptionId subscription id\n @dev notably can be called even if there are pending requests, outstanding ones may fail onchain"},"functionSelector":"02bcc5b6","id":689,"implemented":false,"kind":"function","modifiers":[],"name":"ownerCancelSubscription","nameLocation":"3883:23:9","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":686,"mutability":"mutable","name":"subscriptionId","nameLocation":"3914:14:9","nodeType":"VariableDeclaration","scope":689,"src":"3907:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":685,"name":"uint64","nodeType":"ElementaryTypeName","src":"3907:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3906:23:9"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[],"src":"3938:0:9"},"scope":772,"src":"3874:65:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":690,"nodeType":"StructuredDocumentation","src":"3943:156:9","text":"@notice Recover link sent with transfer instead of transferAndCall.\n @dev Only callable by the Router Owner\n @param to address to send link to"},"functionSelector":"e72f6e30","id":695,"implemented":false,"kind":"function","modifiers":[],"name":"recoverFunds","nameLocation":"4111:12:9","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":692,"mutability":"mutable","name":"to","nameLocation":"4132:2:9","nodeType":"VariableDeclaration","scope":695,"src":"4124:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"4124:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4123:12:9"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[],"src":"4144:0:9"},"scope":772,"src":"4102:43:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"4149:393:9","text":"@notice Create a new subscription.\n @return subscriptionId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(ROUTER),\n @dev    amount,\n @dev    abi.encode(subscriptionId));"},"functionSelector":"a21a23e4","id":701,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"4554:18:9","nodeType":"FunctionDefinition","parameters":{"id":697,"nodeType":"ParameterList","parameters":[],"src":"4572:2:9"},"returnParameters":{"id":700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":701,"src":"4593:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":698,"name":"uint64","nodeType":"ElementaryTypeName","src":"4593:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4592:8:9"},"scope":772,"src":"4545:56:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"4605:412:9","text":"@notice Create a new subscription and add a consumer.\n @return subscriptionId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(ROUTER),\n @dev    amount,\n @dev    abi.encode(subscriptionId));"},"functionSelector":"cc77470a","id":709,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscriptionWithConsumer","nameLocation":"5029:30:9","nodeType":"FunctionDefinition","parameters":{"id":705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":704,"mutability":"mutable","name":"consumer","nameLocation":"5068:8:9","nodeType":"VariableDeclaration","scope":709,"src":"5060:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":703,"name":"address","nodeType":"ElementaryTypeName","src":"5060:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5059:18:9"},"returnParameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":707,"mutability":"mutable","name":"subscriptionId","nameLocation":"5103:14:9","nodeType":"VariableDeclaration","scope":709,"src":"5096:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":706,"name":"uint64","nodeType":"ElementaryTypeName","src":"5096:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5095:23:9"},"scope":772,"src":"5020:99:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":710,"nodeType":"StructuredDocumentation","src":"5123:220:9","text":"@notice Propose a new owner for a subscription.\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"4b8832d3","id":717,"implemented":false,"kind":"function","modifiers":[],"name":"proposeSubscriptionOwnerTransfer","nameLocation":"5355:32:9","nodeType":"FunctionDefinition","parameters":{"id":715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":712,"mutability":"mutable","name":"subscriptionId","nameLocation":"5395:14:9","nodeType":"VariableDeclaration","scope":717,"src":"5388:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":711,"name":"uint64","nodeType":"ElementaryTypeName","src":"5388:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"newOwner","nameLocation":"5419:8:9","nodeType":"VariableDeclaration","scope":717,"src":"5411:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"5411:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5387:41:9"},"returnParameters":{"id":716,"nodeType":"ParameterList","parameters":[],"src":"5437:0:9"},"scope":772,"src":"5346:92:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"5442:209:9","text":"@notice Accept an ownership transfer.\n @param subscriptionId - ID of the subscription\n @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":723,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"5663:31:9","nodeType":"FunctionDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"subscriptionId","nameLocation":"5702:14:9","nodeType":"VariableDeclaration","scope":723,"src":"5695:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":719,"name":"uint64","nodeType":"ElementaryTypeName","src":"5695:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5694:23:9"},"returnParameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"5726:0:9"},"scope":772,"src":"5654:73:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"5731:241:9","text":"@notice Remove a consumer from a Chainlink Functions subscription.\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":731,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"5984:14:9","nodeType":"FunctionDefinition","parameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":726,"mutability":"mutable","name":"subscriptionId","nameLocation":"6006:14:9","nodeType":"VariableDeclaration","scope":731,"src":"5999:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":725,"name":"uint64","nodeType":"ElementaryTypeName","src":"5999:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":728,"mutability":"mutable","name":"consumer","nameLocation":"6030:8:9","nodeType":"VariableDeclaration","scope":731,"src":"6022:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":727,"name":"address","nodeType":"ElementaryTypeName","src":"6022:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5998:41:9"},"returnParameters":{"id":730,"nodeType":"ParameterList","parameters":[],"src":"6048:0:9"},"scope":772,"src":"5975:74:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":732,"nodeType":"StructuredDocumentation","src":"6053:239:9","text":"@notice Add a consumer to a Chainlink Functions subscription.\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":739,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"6304:11:9","nodeType":"FunctionDefinition","parameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"subscriptionId","nameLocation":"6323:14:9","nodeType":"VariableDeclaration","scope":739,"src":"6316:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":733,"name":"uint64","nodeType":"ElementaryTypeName","src":"6316:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"consumer","nameLocation":"6347:8:9","nodeType":"VariableDeclaration","scope":739,"src":"6339:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"6339:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6315:41:9"},"returnParameters":{"id":738,"nodeType":"ParameterList","parameters":[],"src":"6365:0:9"},"scope":772,"src":"6295:71:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"6370:193:9","text":"@notice Cancel a subscription\n @dev Only callable by the Subscription's owner\n @param subscriptionId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":747,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"6575:18:9","nodeType":"FunctionDefinition","parameters":{"id":745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"subscriptionId","nameLocation":"6601:14:9","nodeType":"VariableDeclaration","scope":747,"src":"6594:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":741,"name":"uint64","nodeType":"ElementaryTypeName","src":"6594:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":744,"mutability":"mutable","name":"to","nameLocation":"6625:2:9","nodeType":"VariableDeclaration","scope":747,"src":"6617:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":743,"name":"address","nodeType":"ElementaryTypeName","src":"6617:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6593:35:9"},"returnParameters":{"id":746,"nodeType":"ParameterList","parameters":[],"src":"6637:0:9"},"scope":772,"src":"6566:72:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":748,"nodeType":"StructuredDocumentation","src":"6642:410:9","text":"@notice Check to see if there exists a request commitment for all consumers for a given sub.\n @param subscriptionId - ID of the subscription\n @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\n @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\n @dev Used to disable subscription canceling while outstanding request are present."},"functionSelector":"e82ad7d4","id":755,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"7064:20:9","nodeType":"FunctionDefinition","parameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"subscriptionId","nameLocation":"7092:14:9","nodeType":"VariableDeclaration","scope":755,"src":"7085:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":749,"name":"uint64","nodeType":"ElementaryTypeName","src":"7085:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7084:23:9"},"returnParameters":{"id":754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":753,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":755,"src":"7131:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":752,"name":"bool","nodeType":"ElementaryTypeName","src":"7131:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7130:6:9"},"scope":772,"src":"7055:82:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"7141:257:9","text":"@notice Set subscription specific flags for a subscription.\n Each byte of the flag is used to represent a resource tier that the subscription can utilize.\n @param subscriptionId - ID of the subscription\n @param flags - desired flag values"},"functionSelector":"1ded3b36","id":763,"implemented":false,"kind":"function","modifiers":[],"name":"setFlags","nameLocation":"7410:8:9","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"subscriptionId","nameLocation":"7426:14:9","nodeType":"VariableDeclaration","scope":763,"src":"7419:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":757,"name":"uint64","nodeType":"ElementaryTypeName","src":"7419:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"flags","nameLocation":"7450:5:9","nodeType":"VariableDeclaration","scope":763,"src":"7442:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":759,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7442:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7418:38:9"},"returnParameters":{"id":762,"nodeType":"ParameterList","parameters":[],"src":"7465:0:9"},"scope":772,"src":"7401:65:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"7470:142:9","text":"@notice Get flags for a given subscription.\n @param subscriptionId - ID of the subscription\n @return flags - current flag values"},"functionSelector":"55fedefa","id":771,"implemented":false,"kind":"function","modifiers":[],"name":"getFlags","nameLocation":"7624:8:9","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"subscriptionId","nameLocation":"7640:14:9","nodeType":"VariableDeclaration","scope":771,"src":"7633:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":765,"name":"uint64","nodeType":"ElementaryTypeName","src":"7633:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7632:23:9"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":771,"src":"7679:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7679:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7678:9:9"},"scope":772,"src":"7615:73:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":773,"src":"184:7506:9","usedErrors":[],"usedEvents":[]}],"src":"32:7659:9"},"id":9},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol","exportedSymbols":{"CBOR":[2671],"FunctionsRequest":[1235]},"id":1236,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":774,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol","file":"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol","id":776,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1236,"sourceUnit":2672,"src":"58:75:10","symbolAliases":[{"foreign":{"id":775,"name":"CBOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"66:4:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FunctionsRequest","contractDependencies":[],"contractKind":"library","documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"135:80:10","text":"@title Library for encoding the input data of a Functions request into CBOR"},"fullyImplemented":true,"id":1235,"linearizedBaseContracts":[1235],"name":"FunctionsRequest","nameLocation":"223:16:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":781,"libraryName":{"id":778,"name":"CBOR","nameLocations":["250:4:10"],"nodeType":"IdentifierPath","referencedDeclaration":2671,"src":"250:4:10"},"nodeType":"UsingForDirective","src":"244:31:10","typeName":{"id":780,"nodeType":"UserDefinedTypeName","pathNode":{"id":779,"name":"CBOR.CBORBuffer","nameLocations":["259:4:10","264:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"259:15:10"},"referencedDeclaration":1826,"src":"259:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}}},{"constant":true,"functionSelector":"5d641dfc","id":784,"mutability":"constant","name":"REQUEST_DATA_VERSION","nameLocation":"302:20:10","nodeType":"VariableDeclaration","scope":1235,"src":"279:47:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":782,"name":"uint16","nodeType":"ElementaryTypeName","src":"279:6:10","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"id":787,"mutability":"constant","name":"DEFAULT_BUFFER_SIZE","nameLocation":"356:19:10","nodeType":"VariableDeclaration","scope":1235,"src":"330:51:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"330:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323536","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"378:3:10","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"visibility":"internal"},{"canonicalName":"FunctionsRequest.Location","id":791,"members":[{"id":788,"name":"Inline","nameLocation":"406:6:10","nodeType":"EnumValue","src":"406:6:10"},{"id":789,"name":"Remote","nameLocation":"449:6:10","nodeType":"EnumValue","src":"449:6:10"},{"id":790,"name":"DONHosted","nameLocation":"539:9:10","nodeType":"EnumValue","src":"539:9:10"}],"name":"Location","nameLocation":"391:8:10","nodeType":"EnumDefinition","src":"386:197:10"},{"canonicalName":"FunctionsRequest.CodeLanguage","id":793,"members":[{"id":792,"name":"JavaScript","nameLocation":"611:10:10","nodeType":"EnumValue","src":"611:10:10"}],"name":"CodeLanguage","nameLocation":"592:12:10","nodeType":"EnumDefinition","src":"587:90:10"},{"canonicalName":"FunctionsRequest.Request","id":813,"members":[{"constant":false,"id":796,"mutability":"mutable","name":"codeLocation","nameLocation":"711:12:10","nodeType":"VariableDeclaration","scope":813,"src":"702:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"},"typeName":{"id":795,"nodeType":"UserDefinedTypeName","pathNode":{"id":794,"name":"Location","nameLocations":["702:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":791,"src":"702:8:10"},"referencedDeclaration":791,"src":"702:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"visibility":"internal"},{"constant":false,"id":799,"mutability":"mutable","name":"secretsLocation","nameLocation":"859:15:10","nodeType":"VariableDeclaration","scope":813,"src":"850:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"},"typeName":{"id":798,"nodeType":"UserDefinedTypeName","pathNode":{"id":797,"name":"Location","nameLocations":["850:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":791,"src":"850:8:10"},"referencedDeclaration":791,"src":"850:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"visibility":"internal"},{"constant":false,"id":802,"mutability":"mutable","name":"language","nameLocation":"1028:8:10","nodeType":"VariableDeclaration","scope":813,"src":"1015:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"},"typeName":{"id":801,"nodeType":"UserDefinedTypeName","pathNode":{"id":800,"name":"CodeLanguage","nameLocations":["1015:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":793,"src":"1015:12:10"},"referencedDeclaration":793,"src":"1015:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}},"visibility":"internal"},{"constant":false,"id":804,"mutability":"mutable","name":"source","nameLocation":"1147:6:10","nodeType":"VariableDeclaration","scope":813,"src":"1140:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":803,"name":"string","nodeType":"ElementaryTypeName","src":"1140:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"encryptedSecretsReference","nameLocation":"1412:25:10","nodeType":"VariableDeclaration","scope":813,"src":"1406:31:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":805,"name":"bytes","nodeType":"ElementaryTypeName","src":"1406:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":809,"mutability":"mutable","name":"args","nameLocation":"1665:4:10","nodeType":"VariableDeclaration","scope":813,"src":"1656:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":807,"name":"string","nodeType":"ElementaryTypeName","src":"1656:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":808,"nodeType":"ArrayTypeName","src":"1656:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"bytesArgs","nameLocation":"1808:9:10","nodeType":"VariableDeclaration","scope":813,"src":"1800:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":810,"name":"bytes","nodeType":"ElementaryTypeName","src":"1800:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":811,"nodeType":"ArrayTypeName","src":"1800:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"name":"Request","nameLocation":"688:7:10","nodeType":"StructDefinition","scope":1235,"src":"681:1253:10","visibility":"public"},{"errorSelector":"22ce3edd","id":815,"name":"EmptySource","nameLocation":"1944:11:10","nodeType":"ErrorDefinition","parameters":{"id":814,"nodeType":"ParameterList","parameters":[],"src":"1955:2:10"},"src":"1938:20:10"},{"errorSelector":"e889636f","id":817,"name":"EmptySecrets","nameLocation":"1967:12:10","nodeType":"ErrorDefinition","parameters":{"id":816,"nodeType":"ParameterList","parameters":[],"src":"1979:2:10"},"src":"1961:21:10"},{"errorSelector":"fe936cb7","id":819,"name":"EmptyArgs","nameLocation":"1991:9:10","nodeType":"ErrorDefinition","parameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"2000:2:10"},"src":"1985:18:10"},{"errorSelector":"a80d31f7","id":821,"name":"NoInlineSecrets","nameLocation":"2012:15:10","nodeType":"ErrorDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[],"src":"2027:2:10"},"src":"2006:24:10"},{"body":{"id":1027,"nodeType":"Block","src":"2239:1192:10","statements":[{"assignments":[834],"declarations":[{"constant":false,"id":834,"mutability":"mutable","name":"buffer","nameLocation":"2268:6:10","nodeType":"VariableDeclaration","scope":1027,"src":"2245:29:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":833,"nodeType":"UserDefinedTypeName","pathNode":{"id":832,"name":"CBOR.CBORBuffer","nameLocations":["2245:4:10","2250:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"2245:15:10"},"referencedDeclaration":1826,"src":"2245:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"id":839,"initialValue":{"arguments":[{"id":837,"name":"DEFAULT_BUFFER_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"2289:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":835,"name":"CBOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2277:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CBOR_$2671_$","typeString":"type(library CBOR)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2282:6:10","memberName":"create","nodeType":"MemberAccess","referencedDeclaration":1893,"src":"2277:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (uint256) pure returns (struct CBOR.CBORBuffer memory)"}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2277:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"nodeType":"VariableDeclarationStatement","src":"2245:64:10"},{"expression":{"arguments":[{"hexValue":"636f64654c6f636174696f6e","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2335:14:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_82e791741c7274b123c7599c398a59441cc81a8ed229387daff72172292ba931","typeString":"literal_string \"codeLocation\""},"value":"codeLocation"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_82e791741c7274b123c7599c398a59441cc81a8ed229387daff72172292ba931","typeString":"literal_string \"codeLocation\""}],"expression":{"id":840,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2316:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":842,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2323:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"2316:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":845,"nodeType":"ExpressionStatement","src":"2316:34:10"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":851,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2384:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":852,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2389:12:10","memberName":"codeLocation","nodeType":"MemberAccess","referencedDeclaration":796,"src":"2384:17:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}],"id":850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":849,"name":"uint256","nodeType":"ElementaryTypeName","src":"2376:7:10","typeDescriptions":{}}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":846,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2356:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":848,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2363:12:10","memberName":"writeUInt256","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"2356:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2356:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":855,"nodeType":"ExpressionStatement","src":"2356:47:10"},{"expression":{"arguments":[{"hexValue":"6c616e6775616765","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2429:10:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_829231cb167e02f32beea96e7533af0ebdf9e1f7ccf9a7270e717c48fe6f0e8e","typeString":"literal_string \"language\""},"value":"language"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_829231cb167e02f32beea96e7533af0ebdf9e1f7ccf9a7270e717c48fe6f0e8e","typeString":"literal_string \"language\""}],"expression":{"id":856,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2410:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":858,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2417:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"2410:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2410:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":861,"nodeType":"ExpressionStatement","src":"2410:30:10"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":867,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2474:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2479:8:10","memberName":"language","nodeType":"MemberAccess","referencedDeclaration":802,"src":"2474:13:10","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}],"id":866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2466:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":865,"name":"uint256","nodeType":"ElementaryTypeName","src":"2466:7:10","typeDescriptions":{}}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2466:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":862,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2446:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":864,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2453:12:10","memberName":"writeUInt256","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"2446:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2446:43:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":871,"nodeType":"ExpressionStatement","src":"2446:43:10"},{"expression":{"arguments":[{"hexValue":"736f75726365","id":875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2515:8:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_f7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69","typeString":"literal_string \"source\""},"value":"source"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69","typeString":"literal_string \"source\""}],"expression":{"id":872,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2496:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":874,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2503:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"2496:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2496:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":877,"nodeType":"ExpressionStatement","src":"2496:28:10"},{"expression":{"arguments":[{"expression":{"id":881,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2549:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":882,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2554:6:10","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":804,"src":"2549:11:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":878,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2530:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2537:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"2530:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2530:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":884,"nodeType":"ExpressionStatement","src":"2530:31:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":885,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2572:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":886,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2577:4:10","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":809,"src":"2572:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2582:6:10","memberName":"length","nodeType":"MemberAccess","src":"2572:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2591:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2572:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":930,"nodeType":"IfStatement","src":"2568:227:10","trueBody":{"id":929,"nodeType":"Block","src":"2594:201:10","statements":[{"expression":{"arguments":[{"hexValue":"61726773","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2621:6:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5edaa566e23eea054bbd292b7924839b5627321873e67e30cd0052468eaf099","typeString":"literal_string \"args\""},"value":"args"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e5edaa566e23eea054bbd292b7924839b5627321873e67e30cd0052468eaf099","typeString":"literal_string \"args\""}],"expression":{"id":890,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2602:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2609:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"2602:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2602:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":895,"nodeType":"ExpressionStatement","src":"2602:26:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":896,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2636:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":898,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2643:10:10","memberName":"startArray","nodeType":"MemberAccess","referencedDeclaration":2170,"src":"2636:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2636:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":900,"nodeType":"ExpressionStatement","src":"2636:19:10"},{"body":{"id":922,"nodeType":"Block","src":"2710:51:10","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":916,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2739:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":917,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2744:4:10","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":809,"src":"2739:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":919,"indexExpression":{"id":918,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"2749:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2739:12:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":913,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2720:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":915,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2727:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"2720:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2720:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":921,"nodeType":"ExpressionStatement","src":"2720:32:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":905,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"2683:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":906,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2687:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":907,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2692:4:10","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":809,"src":"2687:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2697:6:10","memberName":"length","nodeType":"MemberAccess","src":"2687:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2683:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":923,"initializationExpression":{"assignments":[902],"declarations":[{"constant":false,"id":902,"mutability":"mutable","name":"i","nameLocation":"2676:1:10","nodeType":"VariableDeclaration","scope":923,"src":"2668:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":901,"name":"uint256","nodeType":"ElementaryTypeName","src":"2668:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":904,"initialValue":{"hexValue":"30","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2680:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2668:13:10"},"loopExpression":{"expression":{"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2705:3:10","subExpression":{"id":910,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"2707:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":912,"nodeType":"ExpressionStatement","src":"2705:3:10"},"nodeType":"ForStatement","src":"2663:98:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":924,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2768:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":926,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2775:11:10","memberName":"endSequence","nodeType":"MemberAccess","referencedDeclaration":2236,"src":"2768:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":928,"nodeType":"ExpressionStatement","src":"2768:20:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":931,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2805:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":932,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2810:25:10","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":806,"src":"2805:30:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2836:6:10","memberName":"length","nodeType":"MemberAccess","src":"2805:37:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2845:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2805:41:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"IfStatement","src":"2801:346:10","trueBody":{"id":975,"nodeType":"Block","src":"2848:299:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":936,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2860:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":937,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2865:15:10","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":799,"src":"2860:20:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":938,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"2884:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$791_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2893:6:10","memberName":"Inline","nodeType":"MemberAccess","referencedDeclaration":788,"src":"2884:15:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"src":"2860:39:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":945,"nodeType":"IfStatement","src":"2856:88:10","trueBody":{"id":944,"nodeType":"Block","src":"2901:43:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":941,"name":"NoInlineSecrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2918:15:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2918:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":943,"nodeType":"RevertStatement","src":"2911:24:10"}]}},{"expression":{"arguments":[{"hexValue":"736563726574734c6f636174696f6e","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2970:17:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc4236fa30b862c671ead413b1a0f61e653ce5b99e29091ee0dc6fc114ee9cc8","typeString":"literal_string \"secretsLocation\""},"value":"secretsLocation"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fc4236fa30b862c671ead413b1a0f61e653ce5b99e29091ee0dc6fc114ee9cc8","typeString":"literal_string \"secretsLocation\""}],"expression":{"id":946,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2951:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":948,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2958:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"2951:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2951:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":951,"nodeType":"ExpressionStatement","src":"2951:37:10"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":957,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3024:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":958,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3029:15:10","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":799,"src":"3024:20:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}],"id":956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3016:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"3016:7:10","typeDescriptions":{}}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3016:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":952,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"2996:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":954,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3003:12:10","memberName":"writeUInt256","nodeType":"MemberAccess","referencedDeclaration":1947,"src":"2996:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2996:50:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":961,"nodeType":"ExpressionStatement","src":"2996:50:10"},{"expression":{"arguments":[{"hexValue":"73656372657473","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3073:9:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d66480a2fe9622f21e4ac7cf8871545e676a686cade1079d79e2fb1df6a4f3ac","typeString":"literal_string \"secrets\""},"value":"secrets"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d66480a2fe9622f21e4ac7cf8871545e676a686cade1079d79e2fb1df6a4f3ac","typeString":"literal_string \"secrets\""}],"expression":{"id":962,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3054:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":964,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3061:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"3054:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3054:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"ExpressionStatement","src":"3054:29:10"},{"expression":{"arguments":[{"expression":{"id":971,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3109:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3114:25:10","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":806,"src":"3109:30:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":968,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3091:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":970,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3098:10:10","memberName":"writeBytes","nodeType":"MemberAccess","referencedDeclaration":2078,"src":"3091:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3091:49:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"ExpressionStatement","src":"3091:49:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":977,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3157:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":978,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3162:9:10","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":812,"src":"3157:14:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3172:6:10","memberName":"length","nodeType":"MemberAccess","src":"3157:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3181:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3157:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1022,"nodeType":"IfStatement","src":"3153:246:10","trueBody":{"id":1021,"nodeType":"Block","src":"3184:215:10","statements":[{"expression":{"arguments":[{"hexValue":"627974657341726773","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3211:11:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_3549a38a23cb1774056dbdf96dbc8ece30f733b8dd04641913d46a279936ce0b","typeString":"literal_string \"bytesArgs\""},"value":"bytesArgs"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3549a38a23cb1774056dbdf96dbc8ece30f733b8dd04641913d46a279936ce0b","typeString":"literal_string \"bytesArgs\""}],"expression":{"id":982,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3192:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3199:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"3192:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3192:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":987,"nodeType":"ExpressionStatement","src":"3192:31:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":988,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3231:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":990,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3238:10:10","memberName":"startArray","nodeType":"MemberAccess","referencedDeclaration":2170,"src":"3231:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3231:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":992,"nodeType":"ExpressionStatement","src":"3231:19:10"},{"body":{"id":1014,"nodeType":"Block","src":"3310:55:10","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":1008,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3338:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1009,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3343:9:10","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":812,"src":"3338:14:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1011,"indexExpression":{"id":1010,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"3353:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3338:17:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1005,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3320:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3327:10:10","memberName":"writeBytes","nodeType":"MemberAccess","referencedDeclaration":2078,"src":"3320:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3320:36:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1013,"nodeType":"ExpressionStatement","src":"3320:36:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":997,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"3278:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":998,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3282:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":999,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3287:9:10","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":812,"src":"3282:14:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3297:6:10","memberName":"length","nodeType":"MemberAccess","src":"3282:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3278:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1015,"initializationExpression":{"assignments":[994],"declarations":[{"constant":false,"id":994,"mutability":"mutable","name":"i","nameLocation":"3271:1:10","nodeType":"VariableDeclaration","scope":1015,"src":"3263:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint256","nodeType":"ElementaryTypeName","src":"3263:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":996,"initialValue":{"hexValue":"30","id":995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3275:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3263:13:10"},"loopExpression":{"expression":{"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3305:3:10","subExpression":{"id":1002,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"3307:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1004,"nodeType":"ExpressionStatement","src":"3305:3:10"},"nodeType":"ForStatement","src":"3258:107:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1016,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3372:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3379:11:10","memberName":"endSequence","nodeType":"MemberAccess","referencedDeclaration":2236,"src":"3372:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3372:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1020,"nodeType":"ExpressionStatement","src":"3372:20:10"}]}},{"expression":{"expression":{"expression":{"id":1023,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3412:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1024,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3419:3:10","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"3412:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3423:3:10","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"3412:14:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":829,"id":1026,"nodeType":"Return","src":"3405:21:10"}]},"documentation":{"id":822,"nodeType":"StructuredDocumentation","src":"2034:124:10","text":"@notice Encodes a Request to CBOR encoded bytes\n @param self The request to encode\n @return CBOR encoded bytes"},"id":1028,"implemented":true,"kind":"function","modifiers":[],"name":"encodeCBOR","nameLocation":"2170:10:10","nodeType":"FunctionDefinition","parameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"self","nameLocation":"2196:4:10","nodeType":"VariableDeclaration","scope":1028,"src":"2181:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":824,"nodeType":"UserDefinedTypeName","pathNode":{"id":823,"name":"Request","nameLocations":["2181:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"2181:7:10"},"referencedDeclaration":813,"src":"2181:7:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"}],"src":"2180:21:10"},"returnParameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1028,"src":"2225:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":827,"name":"bytes","nodeType":"ElementaryTypeName","src":"2225:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2224:14:10"},"scope":1235,"src":"2161:1270:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1072,"nodeType":"Block","src":"3930:157:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1045,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"3946:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3940:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1043,"name":"bytes","nodeType":"ElementaryTypeName","src":"3940:5:10","typeDescriptions":{}}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3940:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3954:6:10","memberName":"length","nodeType":"MemberAccess","src":"3940:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3964:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3940:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1053,"nodeType":"IfStatement","src":"3936:51:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1050,"name":"EmptySource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"3974:11:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3974:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1052,"nodeType":"RevertStatement","src":"3967:20:10"}},{"expression":{"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1054,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"3994:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1056,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3999:12:10","memberName":"codeLocation","nodeType":"MemberAccess","referencedDeclaration":796,"src":"3994:17:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1057,"name":"codeLocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"4014:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"src":"3994:32:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"id":1059,"nodeType":"ExpressionStatement","src":"3994:32:10"},{"expression":{"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1060,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"4032:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1062,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4037:8:10","memberName":"language","nodeType":"MemberAccess","referencedDeclaration":802,"src":"4032:13:10","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1063,"name":"language","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"4048:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}},"src":"4032:24:10","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}},"id":1065,"nodeType":"ExpressionStatement","src":"4032:24:10"},{"expression":{"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1066,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"4062:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1068,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4067:6:10","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":804,"src":"4062:11:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1069,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"4076:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"4062:20:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":1071,"nodeType":"ExpressionStatement","src":"4062:20:10"}]},"documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"3435:342:10","text":"@notice Initializes a Chainlink Functions Request\n @dev Sets the codeLocation and code on the request\n @param self The uninitialized request\n @param codeLocation The user provided source code location\n @param language The programming language of the user code\n @param source The user provided source code or a url"},"id":1073,"implemented":true,"kind":"function","modifiers":[],"name":"initializeRequest","nameLocation":"3789:17:10","nodeType":"FunctionDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"self","nameLocation":"3827:4:10","nodeType":"VariableDeclaration","scope":1073,"src":"3812:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":1031,"nodeType":"UserDefinedTypeName","pathNode":{"id":1030,"name":"Request","nameLocations":["3812:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"3812:7:10"},"referencedDeclaration":813,"src":"3812:7:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":1035,"mutability":"mutable","name":"codeLocation","nameLocation":"3846:12:10","nodeType":"VariableDeclaration","scope":1073,"src":"3837:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"},"typeName":{"id":1034,"nodeType":"UserDefinedTypeName","pathNode":{"id":1033,"name":"Location","nameLocations":["3837:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":791,"src":"3837:8:10"},"referencedDeclaration":791,"src":"3837:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"visibility":"internal"},{"constant":false,"id":1038,"mutability":"mutable","name":"language","nameLocation":"3877:8:10","nodeType":"VariableDeclaration","scope":1073,"src":"3864:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"},"typeName":{"id":1037,"nodeType":"UserDefinedTypeName","pathNode":{"id":1036,"name":"CodeLanguage","nameLocations":["3864:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":793,"src":"3864:12:10"},"referencedDeclaration":793,"src":"3864:12:10","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}},"visibility":"internal"},{"constant":false,"id":1040,"mutability":"mutable","name":"source","nameLocation":"3905:6:10","nodeType":"VariableDeclaration","scope":1073,"src":"3891:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1039,"name":"string","nodeType":"ElementaryTypeName","src":"3891:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3806:109:10"},"returnParameters":{"id":1042,"nodeType":"ParameterList","parameters":[],"src":"3930:0:10"},"scope":1235,"src":"3780:307:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1091,"nodeType":"Block","src":"4439:94:10","statements":[{"expression":{"arguments":[{"id":1083,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"4463:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},{"expression":{"id":1084,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"4469:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$791_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4478:6:10","memberName":"Inline","nodeType":"MemberAccess","referencedDeclaration":788,"src":"4469:15:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},{"expression":{"id":1086,"name":"CodeLanguage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"4486:12:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CodeLanguage_$793_$","typeString":"type(enum FunctionsRequest.CodeLanguage)"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4499:10:10","memberName":"JavaScript","nodeType":"MemberAccess","referencedDeclaration":792,"src":"4486:23:10","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"}},{"id":1088,"name":"javaScriptSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"4511:16:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"},{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"},{"typeIdentifier":"t_enum$_CodeLanguage_$793","typeString":"enum FunctionsRequest.CodeLanguage"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1082,"name":"initializeRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"4445:17:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$813_memory_ptr_$_t_enum$_Location_$791_$_t_enum$_CodeLanguage_$793_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct FunctionsRequest.Request memory,enum FunctionsRequest.Location,enum FunctionsRequest.CodeLanguage,string memory) pure"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4445:83:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1090,"nodeType":"ExpressionStatement","src":"4445:83:10"}]},"documentation":{"id":1074,"nodeType":"StructuredDocumentation","src":"4091:232:10","text":"@notice Initializes a Chainlink Functions Request\n @dev Simplified version of initializeRequest for PoC\n @param self The uninitialized request\n @param javaScriptSource The user provided JS code (must not be empty)"},"id":1092,"implemented":true,"kind":"function","modifiers":[],"name":"initializeRequestForInlineJavaScript","nameLocation":"4335:36:10","nodeType":"FunctionDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"self","nameLocation":"4387:4:10","nodeType":"VariableDeclaration","scope":1092,"src":"4372:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":1076,"nodeType":"UserDefinedTypeName","pathNode":{"id":1075,"name":"Request","nameLocations":["4372:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"4372:7:10"},"referencedDeclaration":813,"src":"4372:7:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"javaScriptSource","nameLocation":"4407:16:10","nodeType":"VariableDeclaration","scope":1092,"src":"4393:30:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1078,"name":"string","nodeType":"ElementaryTypeName","src":"4393:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4371:53:10"},"returnParameters":{"id":1081,"nodeType":"ParameterList","parameters":[],"src":"4439:0:10"},"scope":1235,"src":"4326:207:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1122,"nodeType":"Block","src":"4855:184:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1101,"name":"encryptedSecretsReference","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"4865:25:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4891:6:10","memberName":"length","nodeType":"MemberAccess","src":"4865:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4901:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4865:37:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1108,"nodeType":"IfStatement","src":"4861:64:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1105,"name":"EmptySecrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"4911:12:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4911:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1107,"nodeType":"RevertStatement","src":"4904:21:10"}},{"expression":{"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1109,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"4932:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4937:15:10","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":799,"src":"4932:20:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1112,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"4955:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$791_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4964:6:10","memberName":"Remote","nodeType":"MemberAccess","referencedDeclaration":789,"src":"4955:15:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"src":"4932:38:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"id":1115,"nodeType":"ExpressionStatement","src":"4932:38:10"},{"expression":{"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1116,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"4976:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4981:25:10","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":806,"src":"4976:30:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1119,"name":"encryptedSecretsReference","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"5009:25:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4976:58:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1121,"nodeType":"ExpressionStatement","src":"4976:58:10"}]},"documentation":{"id":1093,"nodeType":"StructuredDocumentation","src":"4537:211:10","text":"@notice Adds Remote user encrypted secrets to a Request\n @param self The initialized request\n @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets"},"id":1123,"implemented":true,"kind":"function","modifiers":[],"name":"addSecretsReference","nameLocation":"4760:19:10","nodeType":"FunctionDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"self","nameLocation":"4795:4:10","nodeType":"VariableDeclaration","scope":1123,"src":"4780:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":1095,"nodeType":"UserDefinedTypeName","pathNode":{"id":1094,"name":"Request","nameLocations":["4780:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"4780:7:10"},"referencedDeclaration":813,"src":"4780:7:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":1098,"mutability":"mutable","name":"encryptedSecretsReference","nameLocation":"4814:25:10","nodeType":"VariableDeclaration","scope":1123,"src":"4801:38:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1097,"name":"bytes","nodeType":"ElementaryTypeName","src":"4801:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4779:61:10"},"returnParameters":{"id":1100,"nodeType":"ParameterList","parameters":[],"src":"4855:0:10"},"scope":1235,"src":"4751:288:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1183,"nodeType":"Block","src":"5360:311:10","statements":[{"assignments":[1138],"declarations":[{"constant":false,"id":1138,"mutability":"mutable","name":"buffer","nameLocation":"5389:6:10","nodeType":"VariableDeclaration","scope":1183,"src":"5366:29:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1137,"nodeType":"UserDefinedTypeName","pathNode":{"id":1136,"name":"CBOR.CBORBuffer","nameLocations":["5366:4:10","5371:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"5366:15:10"},"referencedDeclaration":1826,"src":"5366:15:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"id":1143,"initialValue":{"arguments":[{"id":1141,"name":"DEFAULT_BUFFER_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"5410:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1139,"name":"CBOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"5398:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CBOR_$2671_$","typeString":"type(library CBOR)"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5403:6:10","memberName":"create","nodeType":"MemberAccess","referencedDeclaration":1893,"src":"5398:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (uint256) pure returns (struct CBOR.CBORBuffer memory)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5398:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"nodeType":"VariableDeclarationStatement","src":"5366:64:10"},{"expression":{"arguments":[{"hexValue":"736c6f744944","id":1147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5456:8:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5aaf47ebef83f4d962805dda4c452b2732f648f22dd85d8c0d1bc70bede536f","typeString":"literal_string \"slotID\""},"value":"slotID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5aaf47ebef83f4d962805dda4c452b2732f648f22dd85d8c0d1bc70bede536f","typeString":"literal_string \"slotID\""}],"expression":{"id":1144,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"5437:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5444:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"5437:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5437:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1149,"nodeType":"ExpressionStatement","src":"5437:28:10"},{"expression":{"arguments":[{"id":1153,"name":"slotID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5490:6:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":1150,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"5471:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5478:11:10","memberName":"writeUInt64","nodeType":"MemberAccess","referencedDeclaration":2015,"src":"5471:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint64_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint64) pure"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5471:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1155,"nodeType":"ExpressionStatement","src":"5471:26:10"},{"expression":{"arguments":[{"hexValue":"76657273696f6e","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5522:9:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba1b4dd49a85c82b73f138b112d5135149203ed36c1ec80c46f8c572daa7c5ec","typeString":"literal_string \"version\""},"value":"version"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ba1b4dd49a85c82b73f138b112d5135149203ed36c1ec80c46f8c572daa7c5ec","typeString":"literal_string \"version\""}],"expression":{"id":1156,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"5503:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5510:11:10","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":2111,"src":"5503:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5503:29:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1161,"nodeType":"ExpressionStatement","src":"5503:29:10"},{"expression":{"arguments":[{"id":1165,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"5557:7:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"expression":{"id":1162,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"5538:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5545:11:10","memberName":"writeUInt64","nodeType":"MemberAccess","referencedDeclaration":2015,"src":"5538:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint64_$returns$__$attached_to$_t_struct$_CBORBuffer_$1826_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint64) pure"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5538:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1167,"nodeType":"ExpressionStatement","src":"5538:27:10"},{"expression":{"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1168,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"5572:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5577:15:10","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":799,"src":"5572:20:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1171,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"5595:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$791_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5604:9:10","memberName":"DONHosted","nodeType":"MemberAccess","referencedDeclaration":790,"src":"5595:18:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"src":"5572:41:10","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$791","typeString":"enum FunctionsRequest.Location"}},"id":1174,"nodeType":"ExpressionStatement","src":"5572:41:10"},{"expression":{"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1175,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"5619:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1177,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5624:25:10","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":806,"src":"5619:30:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":1178,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"5652:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5659:3:10","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"5652:10:10","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5663:3:10","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"5652:14:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"5619:47:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1182,"nodeType":"ExpressionStatement","src":"5619:47:10"}]},"documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"5043:220:10","text":"@notice Adds DON-hosted secrets reference to a Request\n @param self The initialized request\n @param slotID Slot ID of the user's secrets hosted on DON\n @param version User data version (for the slotID)"},"id":1184,"implemented":true,"kind":"function","modifiers":[],"name":"addDONHostedSecrets","nameLocation":"5275:19:10","nodeType":"FunctionDefinition","parameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"self","nameLocation":"5310:4:10","nodeType":"VariableDeclaration","scope":1184,"src":"5295:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":1126,"nodeType":"UserDefinedTypeName","pathNode":{"id":1125,"name":"Request","nameLocations":["5295:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"5295:7:10"},"referencedDeclaration":813,"src":"5295:7:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"slotID","nameLocation":"5322:6:10","nodeType":"VariableDeclaration","scope":1184,"src":"5316:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1128,"name":"uint8","nodeType":"ElementaryTypeName","src":"5316:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1131,"mutability":"mutable","name":"version","nameLocation":"5337:7:10","nodeType":"VariableDeclaration","scope":1184,"src":"5330:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1130,"name":"uint64","nodeType":"ElementaryTypeName","src":"5330:6:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5294:51:10"},"returnParameters":{"id":1133,"nodeType":"ParameterList","parameters":[],"src":"5360:0:10"},"scope":1235,"src":"5266:405:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1208,"nodeType":"Block","src":"5904:74:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1194,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"5914:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5919:6:10","memberName":"length","nodeType":"MemberAccess","src":"5914:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5929:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5914:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1201,"nodeType":"IfStatement","src":"5910:40:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1198,"name":"EmptyArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"5939:9:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5939:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1200,"nodeType":"RevertStatement","src":"5932:18:10"}},{"expression":{"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1202,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"5957:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5962:4:10","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":809,"src":"5957:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1205,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"5969:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"src":"5957:16:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":1207,"nodeType":"ExpressionStatement","src":"5957:16:10"}]},"documentation":{"id":1185,"nodeType":"StructuredDocumentation","src":"5675:152:10","text":"@notice Sets args for the user run function\n @param self The initialized request\n @param args The array of string args (must not be empty)"},"id":1209,"implemented":true,"kind":"function","modifiers":[],"name":"setArgs","nameLocation":"5839:7:10","nodeType":"FunctionDefinition","parameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"self","nameLocation":"5862:4:10","nodeType":"VariableDeclaration","scope":1209,"src":"5847:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":1187,"nodeType":"UserDefinedTypeName","pathNode":{"id":1186,"name":"Request","nameLocations":["5847:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"5847:7:10"},"referencedDeclaration":813,"src":"5847:7:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":1191,"mutability":"mutable","name":"args","nameLocation":"5884:4:10","nodeType":"VariableDeclaration","scope":1209,"src":"5868:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":1189,"name":"string","nodeType":"ElementaryTypeName","src":"5868:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":1190,"nodeType":"ArrayTypeName","src":"5868:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"5846:43:10"},"returnParameters":{"id":1193,"nodeType":"ParameterList","parameters":[],"src":"5904:0:10"},"scope":1235,"src":"5830:148:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1233,"nodeType":"Block","src":"6220:79:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1219,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"6230:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6235:6:10","memberName":"length","nodeType":"MemberAccess","src":"6230:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6245:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6230:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1226,"nodeType":"IfStatement","src":"6226:40:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1223,"name":"EmptyArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"6255:9:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6255:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"RevertStatement","src":"6248:18:10"}},{"expression":{"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1227,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"6273:4:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":1229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6278:9:10","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":812,"src":"6273:14:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1230,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"6290:4:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"6273:21:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":1232,"nodeType":"ExpressionStatement","src":"6273:21:10"}]},"documentation":{"id":1210,"nodeType":"StructuredDocumentation","src":"5982:157:10","text":"@notice Sets bytes args for the user run function\n @param self The initialized request\n @param args The array of bytes args (must not be empty)"},"id":1234,"implemented":true,"kind":"function","modifiers":[],"name":"setBytesArgs","nameLocation":"6151:12:10","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"self","nameLocation":"6179:4:10","nodeType":"VariableDeclaration","scope":1234,"src":"6164:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":1212,"nodeType":"UserDefinedTypeName","pathNode":{"id":1211,"name":"Request","nameLocations":["6164:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"6164:7:10"},"referencedDeclaration":813,"src":"6164:7:10","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"args","nameLocation":"6200:4:10","nodeType":"VariableDeclaration","scope":1234,"src":"6185:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":1214,"name":"bytes","nodeType":"ElementaryTypeName","src":"6185:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":1215,"nodeType":"ArrayTypeName","src":"6185:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6163:42:10"},"returnParameters":{"id":1218,"nodeType":"ParameterList","parameters":[],"src":"6220:0:10"},"scope":1235,"src":"6142:157:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1236,"src":"215:6086:10","usedErrors":[815,817,819,821],"usedEvents":[]}],"src":"32:6270:10"},"id":10},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol","exportedSymbols":{"FunctionsResponse":[1295],"IFunctionsSubscriptions":[772]},"id":1296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1237,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol","file":"../interfaces/IFunctionsSubscriptions.sol","id":1239,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1296,"sourceUnit":773,"src":"58:82:11","symbolAliases":[{"foreign":{"id":1238,"name":"IFunctionsSubscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"66:23:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FunctionsResponse","contractDependencies":[],"contractKind":"library","documentation":{"id":1240,"nodeType":"StructuredDocumentation","src":"142:81:11","text":"@title Library of types that are used for fulfillment of a Functions request"},"fullyImplemented":true,"id":1295,"linearizedBaseContracts":[1295],"name":"FunctionsResponse","nameLocation":"231:17:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"FunctionsResponse.RequestMeta","id":1263,"members":[{"constant":false,"id":1242,"mutability":"mutable","name":"data","nameLocation":"357:4:11","nodeType":"VariableDeclaration","scope":1263,"src":"351:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1241,"name":"bytes","nodeType":"ElementaryTypeName","src":"351:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1244,"mutability":"mutable","name":"flags","nameLocation":"532:5:11","nodeType":"VariableDeclaration","scope":1263,"src":"524:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"524:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"requestingContract","nameLocation":"626:18:11","nodeType":"VariableDeclaration","scope":1263,"src":"618:26:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"618:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"availableBalance","nameLocation":"718:16:11","nodeType":"VariableDeclaration","scope":1263,"src":"711:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1247,"name":"uint96","nodeType":"ElementaryTypeName","src":"711:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":1250,"mutability":"mutable","name":"adminFee","nameLocation":"880:8:11","nodeType":"VariableDeclaration","scope":1263,"src":"873:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":1249,"name":"uint72","nodeType":"ElementaryTypeName","src":"873:6:11","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"},{"constant":false,"id":1252,"mutability":"mutable","name":"subscriptionId","nameLocation":"1042:14:11","nodeType":"VariableDeclaration","scope":1263,"src":"1035:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1251,"name":"uint64","nodeType":"ElementaryTypeName","src":"1035:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1254,"mutability":"mutable","name":"initiatedRequests","nameLocation":"1159:17:11","nodeType":"VariableDeclaration","scope":1263,"src":"1152:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1253,"name":"uint64","nodeType":"ElementaryTypeName","src":"1152:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1256,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1246:16:11","nodeType":"VariableDeclaration","scope":1263,"src":"1239:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1255,"name":"uint32","nodeType":"ElementaryTypeName","src":"1239:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"dataVersion","nameLocation":"1363:11:11","nodeType":"VariableDeclaration","scope":1263,"src":"1356:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1257,"name":"uint16","nodeType":"ElementaryTypeName","src":"1356:6:11","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1260,"mutability":"mutable","name":"completedRequests","nameLocation":"1486:17:11","nodeType":"VariableDeclaration","scope":1263,"src":"1479:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1259,"name":"uint64","nodeType":"ElementaryTypeName","src":"1479:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1262,"mutability":"mutable","name":"subscriptionOwner","nameLocation":"1605:17:11","nodeType":"VariableDeclaration","scope":1263,"src":"1597:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1261,"name":"address","nodeType":"ElementaryTypeName","src":"1597:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"RequestMeta","nameLocation":"333:11:11","nodeType":"StructDefinition","scope":1295,"src":"326:1355:11","visibility":"public"},{"canonicalName":"FunctionsResponse.FulfillResult","id":1271,"members":[{"id":1264,"name":"FULFILLED","nameLocation":"1710:9:11","nodeType":"EnumValue","src":"1710:9:11"},{"id":1265,"name":"USER_CALLBACK_ERROR","nameLocation":"1730:19:11","nodeType":"EnumValue","src":"1730:19:11"},{"id":1266,"name":"INVALID_REQUEST_ID","nameLocation":"1760:18:11","nodeType":"EnumValue","src":"1760:18:11"},{"id":1267,"name":"COST_EXCEEDS_COMMITMENT","nameLocation":"1789:23:11","nodeType":"EnumValue","src":"1789:23:11"},{"id":1268,"name":"INSUFFICIENT_GAS_PROVIDED","nameLocation":"1823:25:11","nodeType":"EnumValue","src":"1823:25:11"},{"id":1269,"name":"SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION","nameLocation":"1859:40:11","nodeType":"EnumValue","src":"1859:40:11"},{"id":1270,"name":"INVALID_COMMITMENT","nameLocation":"1910:18:11","nodeType":"EnumValue","src":"1910:18:11"}],"name":"FulfillResult","nameLocation":"1690:13:11","nodeType":"EnumDefinition","src":"1685:252:11"},{"canonicalName":"FunctionsResponse.Commitment","id":1294,"members":[{"constant":false,"id":1273,"mutability":"mutable","name":"requestId","nameLocation":"1973:9:11","nodeType":"VariableDeclaration","scope":1294,"src":"1965:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1272,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1965:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"coordinator","nameLocation":"2108:11:11","nodeType":"VariableDeclaration","scope":1294,"src":"2100:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1274,"name":"address","nodeType":"ElementaryTypeName","src":"2100:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1277,"mutability":"mutable","name":"estimatedTotalCostJuels","nameLocation":"2258:23:11","nodeType":"VariableDeclaration","scope":1294,"src":"2251:30:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1276,"name":"uint96","nodeType":"ElementaryTypeName","src":"2251:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":1279,"mutability":"mutable","name":"client","nameLocation":"2397:6:11","nodeType":"VariableDeclaration","scope":1294,"src":"2389:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1278,"name":"address","nodeType":"ElementaryTypeName","src":"2389:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1281,"mutability":"mutable","name":"subscriptionId","nameLocation":"2525:14:11","nodeType":"VariableDeclaration","scope":1294,"src":"2518:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1280,"name":"uint64","nodeType":"ElementaryTypeName","src":"2518:6:11","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1283,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2648:16:11","nodeType":"VariableDeclaration","scope":1294,"src":"2641:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1282,"name":"uint32","nodeType":"ElementaryTypeName","src":"2641:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1285,"mutability":"mutable","name":"adminFee","nameLocation":"2793:8:11","nodeType":"VariableDeclaration","scope":1294,"src":"2786:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":1284,"name":"uint72","nodeType":"ElementaryTypeName","src":"2786:6:11","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"donFee","nameLocation":"2973:6:11","nodeType":"VariableDeclaration","scope":1294,"src":"2966:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":1286,"name":"uint72","nodeType":"ElementaryTypeName","src":"2966:6:11","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"gasOverheadBeforeCallback","nameLocation":"3109:25:11","nodeType":"VariableDeclaration","scope":1294,"src":"3102:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":1288,"name":"uint40","nodeType":"ElementaryTypeName","src":"3102:6:11","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":1291,"mutability":"mutable","name":"gasOverheadAfterCallback","nameLocation":"3231:24:11","nodeType":"VariableDeclaration","scope":1294,"src":"3224:31:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":1290,"name":"uint40","nodeType":"ElementaryTypeName","src":"3224:6:11","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":1293,"mutability":"mutable","name":"timeoutTimestamp","nameLocation":"3352:16:11","nodeType":"VariableDeclaration","scope":1294,"src":"3345:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1292,"name":"uint32","nodeType":"ElementaryTypeName","src":"3345:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"Commitment","nameLocation":"1948:10:11","nodeType":"StructDefinition","scope":1295,"src":"1941:1538:11","visibility":"public"}],"scope":1296,"src":"223:3258:11","usedErrors":[],"usedEvents":[]}],"src":"32:3450:11"},"id":11},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[1390]},"id":1391,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1297,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"LinkTokenInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1390,"linearizedBaseContracts":[1390],"name":"LinkTokenInterface","nameLocation":"67:18:12","nodeType":"ContractDefinition","nodes":[{"functionSelector":"dd62ed3e","id":1306,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"99:9:12","nodeType":"FunctionDefinition","parameters":{"id":1302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1299,"mutability":"mutable","name":"owner","nameLocation":"117:5:12","nodeType":"VariableDeclaration","scope":1306,"src":"109:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1298,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1301,"mutability":"mutable","name":"spender","nameLocation":"132:7:12","nodeType":"VariableDeclaration","scope":1306,"src":"124:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1300,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"108:32:12"},"returnParameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"remaining","nameLocation":"172:9:12","nodeType":"VariableDeclaration","scope":1306,"src":"164:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1303,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:19:12"},"scope":1390,"src":"90:93:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":1315,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"196:7:12","nodeType":"FunctionDefinition","parameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"spender","nameLocation":"212:7:12","nodeType":"VariableDeclaration","scope":1315,"src":"204:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1307,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"value","nameLocation":"229:5:12","nodeType":"VariableDeclaration","scope":1315,"src":"221:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1309,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"203:32:12"},"returnParameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"success","nameLocation":"259:7:12","nodeType":"VariableDeclaration","scope":1315,"src":"254:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1312,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:14:12"},"scope":1390,"src":"187:81:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":1322,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"281:9:12","nodeType":"FunctionDefinition","parameters":{"id":1318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"owner","nameLocation":"299:5:12","nodeType":"VariableDeclaration","scope":1322,"src":"291:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1316,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:12"},"returnParameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"balance","nameLocation":"337:7:12","nodeType":"VariableDeclaration","scope":1322,"src":"329:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1319,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:17:12"},"scope":1390,"src":"272:74:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":1327,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"359:8:12","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[],"src":"367:2:12"},"returnParameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"mutability":"mutable","name":"decimalPlaces","nameLocation":"399:13:12","nodeType":"VariableDeclaration","scope":1327,"src":"393:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1324,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:21:12"},"scope":1390,"src":"350:64:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"66188463","id":1336,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nameLocation":"427:16:12","nodeType":"FunctionDefinition","parameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1329,"mutability":"mutable","name":"spender","nameLocation":"452:7:12","nodeType":"VariableDeclaration","scope":1336,"src":"444:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1328,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1331,"mutability":"mutable","name":"addedValue","nameLocation":"469:10:12","nodeType":"VariableDeclaration","scope":1336,"src":"461:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1330,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"443:37:12"},"returnParameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1334,"mutability":"mutable","name":"success","nameLocation":"504:7:12","nodeType":"VariableDeclaration","scope":1336,"src":"499:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1333,"name":"bool","nodeType":"ElementaryTypeName","src":"499:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"498:14:12"},"scope":1390,"src":"418:95:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d73dd623","id":1343,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nameLocation":"526:16:12","nodeType":"FunctionDefinition","parameters":{"id":1341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1338,"mutability":"mutable","name":"spender","nameLocation":"551:7:12","nodeType":"VariableDeclaration","scope":1343,"src":"543:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1337,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1340,"mutability":"mutable","name":"subtractedValue","nameLocation":"568:15:12","nodeType":"VariableDeclaration","scope":1343,"src":"560:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1339,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"542:42:12"},"returnParameters":{"id":1342,"nodeType":"ParameterList","parameters":[],"src":"593:0:12"},"scope":1390,"src":"517:77:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":1348,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"607:4:12","nodeType":"FunctionDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[],"src":"611:2:12"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"tokenName","nameLocation":"651:9:12","nodeType":"VariableDeclaration","scope":1348,"src":"637:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1345,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"636:25:12"},"scope":1390,"src":"598:64:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":1353,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"675:6:12","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[],"src":"681:2:12"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"tokenSymbol","nameLocation":"721:11:12","nodeType":"VariableDeclaration","scope":1353,"src":"707:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1350,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"706:27:12"},"scope":1390,"src":"666:68:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":1358,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"747:11:12","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[],"src":"758:2:12"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"totalTokensIssued","nameLocation":"792:17:12","nodeType":"VariableDeclaration","scope":1358,"src":"784:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:27:12"},"scope":1390,"src":"738:73:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":1367,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"824:8:12","nodeType":"FunctionDefinition","parameters":{"id":1363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"to","nameLocation":"841:2:12","nodeType":"VariableDeclaration","scope":1367,"src":"833:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1359,"name":"address","nodeType":"ElementaryTypeName","src":"833:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1362,"mutability":"mutable","name":"value","nameLocation":"853:5:12","nodeType":"VariableDeclaration","scope":1367,"src":"845:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1361,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:27:12"},"returnParameters":{"id":1366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"success","nameLocation":"883:7:12","nodeType":"VariableDeclaration","scope":1367,"src":"878:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1364,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"877:14:12"},"scope":1390,"src":"815:77:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4000aea0","id":1378,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"905:15:12","nodeType":"FunctionDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"to","nameLocation":"929:2:12","nodeType":"VariableDeclaration","scope":1378,"src":"921:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1368,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1371,"mutability":"mutable","name":"value","nameLocation":"941:5:12","nodeType":"VariableDeclaration","scope":1378,"src":"933:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1373,"mutability":"mutable","name":"data","nameLocation":"963:4:12","nodeType":"VariableDeclaration","scope":1378,"src":"948:19:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1372,"name":"bytes","nodeType":"ElementaryTypeName","src":"948:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"920:48:12"},"returnParameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"success","nameLocation":"992:7:12","nodeType":"VariableDeclaration","scope":1378,"src":"987:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1375,"name":"bool","nodeType":"ElementaryTypeName","src":"987:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"986:14:12"},"scope":1390,"src":"896:105:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":1389,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1014:12:12","nodeType":"FunctionDefinition","parameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1380,"mutability":"mutable","name":"from","nameLocation":"1035:4:12","nodeType":"VariableDeclaration","scope":1389,"src":"1027:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1379,"name":"address","nodeType":"ElementaryTypeName","src":"1027:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"to","nameLocation":"1049:2:12","nodeType":"VariableDeclaration","scope":1389,"src":"1041:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1381,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1384,"mutability":"mutable","name":"value","nameLocation":"1061:5:12","nodeType":"VariableDeclaration","scope":1389,"src":"1053:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"1053:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:41:12"},"returnParameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"success","nameLocation":"1091:7:12","nodeType":"VariableDeclaration","scope":1389,"src":"1086:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1386,"name":"bool","nodeType":"ElementaryTypeName","src":"1086:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1085:14:12"},"scope":1390,"src":"1005:95:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1391,"src":"57:1045:12","usedErrors":[],"usedEvents":[]}],"src":"32:1071:12"},"id":12},"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol","exportedSymbols":{"Buffer":[1812]},"id":1813,"license":"BSD-2-Clause","nodeType":"SourceUnit","nodes":[{"id":1392,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"41:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"Buffer","contractDependencies":[],"contractKind":"library","documentation":{"id":1393,"nodeType":"StructuredDocumentation","src":"66:378:13","text":" @dev A library for working with mutable byte buffers in Solidity.\n Byte buffers are mutable and expandable, and provide a variety of primitives\n for appending to them. At any time you can fetch a bytes object containing the\n current contents of the buffer. The bytes object should not be stored between\n operations, as it may change due to resizing of the buffer."},"fullyImplemented":true,"id":1812,"linearizedBaseContracts":[1812],"name":"Buffer","nameLocation":"453:6:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Buffer.buffer","documentation":{"id":1394,"nodeType":"StructuredDocumentation","src":"466:249:13","text":" @dev Represents a mutable buffer. Buffers have a current value (buf) and\n      a capacity. The capacity may be longer than the current value, in\n      which case it can be extended without the need to allocate more memory."},"id":1399,"members":[{"constant":false,"id":1396,"mutability":"mutable","name":"buf","nameLocation":"750:3:13","nodeType":"VariableDeclaration","scope":1399,"src":"744:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1395,"name":"bytes","nodeType":"ElementaryTypeName","src":"744:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"capacity","nameLocation":"768:8:13","nodeType":"VariableDeclaration","scope":1399,"src":"763:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint","nodeType":"ElementaryTypeName","src":"763:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"buffer","nameLocation":"727:6:13","nodeType":"StructDefinition","scope":1812,"src":"720:63:13","visibility":"public"},{"body":{"id":1436,"nodeType":"Block","src":"1105:470:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1411,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"1119:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":1412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1119:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1119:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1426,"nodeType":"IfStatement","src":"1115:81:13","trueBody":{"id":1425,"nodeType":"Block","src":"1139:57:13","statements":[{"expression":{"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1416,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"1153:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1165:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1418,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"1171:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1171:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1421,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1170:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1165:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1153:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1424,"nodeType":"ExpressionStatement","src":"1153:32:13"}]}},{"expression":{"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1427,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"1251:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1255:8:13","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"1251:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1430,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"1266:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1251:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1432,"nodeType":"ExpressionStatement","src":"1251:23:13"},{"AST":{"nodeType":"YulBlock","src":"1293:256:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1307:22:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1324:4:13","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1318:5:13"},"nodeType":"YulFunctionCall","src":"1318:11:13"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"1311:3:13","type":""}]},{"expression":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"1349:3:13"},{"name":"ptr","nodeType":"YulIdentifier","src":"1354:3:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1342:6:13"},"nodeType":"YulFunctionCall","src":"1342:16:13"},"nodeType":"YulExpressionStatement","src":"1342:16:13"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1378:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"1383:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1371:6:13"},"nodeType":"YulFunctionCall","src":"1371:14:13"},"nodeType":"YulExpressionStatement","src":"1371:14:13"},{"nodeType":"YulVariableDeclaration","src":"1398:38:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1413:2:13","type":"","value":"32"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1421:3:13"},{"name":"capacity","nodeType":"YulIdentifier","src":"1426:8:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1417:3:13"},"nodeType":"YulFunctionCall","src":"1417:18:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1409:3:13"},"nodeType":"YulFunctionCall","src":"1409:27:13"},"variables":[{"name":"fpm","nodeType":"YulTypedName","src":"1402:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1465:44:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1490:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1493:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1483:6:13"},"nodeType":"YulFunctionCall","src":"1483:12:13"},"nodeType":"YulExpressionStatement","src":"1483:12:13"}]},"condition":{"arguments":[{"name":"fpm","nodeType":"YulIdentifier","src":"1455:3:13"},{"name":"ptr","nodeType":"YulIdentifier","src":"1460:3:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1452:2:13"},"nodeType":"YulFunctionCall","src":"1452:12:13"},"nodeType":"YulIf","src":"1449:60:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1529:4:13","type":"","value":"0x40"},{"name":"fpm","nodeType":"YulIdentifier","src":"1535:3:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1522:6:13"},"nodeType":"YulFunctionCall","src":"1522:17:13"},"nodeType":"YulExpressionStatement","src":"1522:17:13"}]},"evmVersion":"paris","externalReferences":[{"declaration":1403,"isOffset":false,"isSlot":false,"src":"1349:3:13","valueSize":1},{"declaration":1405,"isOffset":false,"isSlot":false,"src":"1426:8:13","valueSize":1}],"id":1433,"nodeType":"InlineAssembly","src":"1284:265:13"},{"expression":{"id":1434,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"1565:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1410,"id":1435,"nodeType":"Return","src":"1558:10:13"}]},"documentation":{"id":1400,"nodeType":"StructuredDocumentation","src":"789:226:13","text":" @dev Initializes a buffer with an initial capacity.\n @param buf The buffer to initialize.\n @param capacity The number of bytes of space to allocate the buffer.\n @return The buffer, for chaining."},"id":1437,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1029:4:13","nodeType":"FunctionDefinition","parameters":{"id":1406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"buf","nameLocation":"1048:3:13","nodeType":"VariableDeclaration","scope":1437,"src":"1034:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1402,"nodeType":"UserDefinedTypeName","pathNode":{"id":1401,"name":"buffer","nameLocations":["1034:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"1034:6:13"},"referencedDeclaration":1399,"src":"1034:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"capacity","nameLocation":"1058:8:13","nodeType":"VariableDeclaration","scope":1437,"src":"1053:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1404,"name":"uint","nodeType":"ElementaryTypeName","src":"1053:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1033:34:13"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1437,"src":"1090:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1408,"nodeType":"UserDefinedTypeName","pathNode":{"id":1407,"name":"buffer","nameLocations":["1090:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"1090:6:13"},"referencedDeclaration":1399,"src":"1090:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"1089:15:13"},"scope":1812,"src":"1020:555:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1465,"nodeType":"Block","src":"1890:108:13","statements":[{"assignments":[1448],"declarations":[{"constant":false,"id":1448,"mutability":"mutable","name":"buf","nameLocation":"1914:3:13","nodeType":"VariableDeclaration","scope":1465,"src":"1900:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1447,"nodeType":"UserDefinedTypeName","pathNode":{"id":1446,"name":"buffer","nameLocations":["1900:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"1900:6:13"},"referencedDeclaration":1399,"src":"1900:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"id":1449,"nodeType":"VariableDeclarationStatement","src":"1900:17:13"},{"expression":{"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1450,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"1927:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1452,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1931:3:13","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"1927:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1453,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"1937:1:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1927:11:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1455,"nodeType":"ExpressionStatement","src":"1927:11:13"},{"expression":{"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1456,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"1948:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1952:8:13","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"1948:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1459,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"1963:1:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1965:6:13","memberName":"length","nodeType":"MemberAccess","src":"1963:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1948:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1462,"nodeType":"ExpressionStatement","src":"1948:23:13"},{"expression":{"id":1463,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"1988:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1445,"id":1464,"nodeType":"Return","src":"1981:10:13"}]},"documentation":{"id":1438,"nodeType":"StructuredDocumentation","src":"1581:232:13","text":" @dev Initializes a new buffer from an existing bytes object.\n      Changes to the buffer may mutate the original value.\n @param b The bytes object to initialize the buffer with.\n @return A new buffer."},"id":1466,"implemented":true,"kind":"function","modifiers":[],"name":"fromBytes","nameLocation":"1827:9:13","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"b","nameLocation":"1850:1:13","nodeType":"VariableDeclaration","scope":1466,"src":"1837:14:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"1837:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1836:16:13"},"returnParameters":{"id":1445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1466,"src":"1875:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1443,"nodeType":"UserDefinedTypeName","pathNode":{"id":1442,"name":"buffer","nameLocations":["1875:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"1875:6:13"},"referencedDeclaration":1399,"src":"1875:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"1874:15:13"},"scope":1812,"src":"1818:180:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1489,"nodeType":"Block","src":"2067:104:13","statements":[{"assignments":[1475],"declarations":[{"constant":false,"id":1475,"mutability":"mutable","name":"oldbuf","nameLocation":"2090:6:13","nodeType":"VariableDeclaration","scope":1489,"src":"2077:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1474,"name":"bytes","nodeType":"ElementaryTypeName","src":"2077:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1478,"initialValue":{"expression":{"id":1476,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"2099:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1477,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2103:3:13","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"2099:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2077:29:13"},{"expression":{"arguments":[{"id":1480,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"2121:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1481,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"2126:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1479,"name":"init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"2116:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2116:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1483,"nodeType":"ExpressionStatement","src":"2116:19:13"},{"expression":{"arguments":[{"id":1485,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"2152:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1486,"name":"oldbuf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"2157:6:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1484,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1592,1612,1718],"referencedDeclaration":1612,"src":"2145:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1488,"nodeType":"ExpressionStatement","src":"2145:19:13"}]},"id":1490,"implemented":true,"kind":"function","modifiers":[],"name":"resize","nameLocation":"2013:6:13","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1469,"mutability":"mutable","name":"buf","nameLocation":"2034:3:13","nodeType":"VariableDeclaration","scope":1490,"src":"2020:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1468,"nodeType":"UserDefinedTypeName","pathNode":{"id":1467,"name":"buffer","nameLocations":["2020:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"2020:6:13"},"referencedDeclaration":1399,"src":"2020:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"capacity","nameLocation":"2044:8:13","nodeType":"VariableDeclaration","scope":1490,"src":"2039:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1470,"name":"uint","nodeType":"ElementaryTypeName","src":"2039:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2019:34:13"},"returnParameters":{"id":1473,"nodeType":"ParameterList","parameters":[],"src":"2067:0:13"},"scope":1812,"src":"2004:167:13","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1503,"nodeType":"Block","src":"2394:123:13","statements":[{"AST":{"nodeType":"YulBlock","src":"2413:78:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2427:24:13","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"2447:3:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2441:5:13"},"nodeType":"YulFunctionCall","src":"2441:10:13"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"2431:6:13","type":""}]},{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"2471:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2479:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2464:6:13"},"nodeType":"YulFunctionCall","src":"2464:17:13"},"nodeType":"YulExpressionStatement","src":"2464:17:13"}]},"evmVersion":"paris","externalReferences":[{"declaration":1494,"isOffset":false,"isSlot":false,"src":"2447:3:13","valueSize":1}],"id":1500,"nodeType":"InlineAssembly","src":"2404:87:13"},{"expression":{"id":1501,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"2507:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1499,"id":1502,"nodeType":"Return","src":"2500:10:13"}]},"documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"2177:137:13","text":" @dev Sets buffer length to 0.\n @param buf The buffer to truncate.\n @return The original buffer, for chaining.."},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"truncate","nameLocation":"2328:8:13","nodeType":"FunctionDefinition","parameters":{"id":1495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"buf","nameLocation":"2351:3:13","nodeType":"VariableDeclaration","scope":1504,"src":"2337:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1493,"nodeType":"UserDefinedTypeName","pathNode":{"id":1492,"name":"buffer","nameLocations":["2337:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"2337:6:13"},"referencedDeclaration":1399,"src":"2337:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2336:19:13"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1504,"src":"2379:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1497,"nodeType":"UserDefinedTypeName","pathNode":{"id":1496,"name":"buffer","nameLocations":["2379:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"2379:6:13"},"referencedDeclaration":1399,"src":"2379:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2378:15:13"},"scope":1812,"src":"2319:198:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1591,"nodeType":"Block","src":"2945:1326:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1519,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"2963:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1520,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"2970:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2975:6:13","memberName":"length","nodeType":"MemberAccess","src":"2970:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2963:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2955:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2955:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1524,"nodeType":"ExpressionStatement","src":"2955:27:13"},{"assignments":[1526],"declarations":[{"constant":false,"id":1526,"mutability":"mutable","name":"off","nameLocation":"2998:3:13","nodeType":"VariableDeclaration","scope":1591,"src":"2993:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1525,"name":"uint","nodeType":"ElementaryTypeName","src":"2993:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1530,"initialValue":{"expression":{"expression":{"id":1527,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"3004:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3008:3:13","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"3004:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3012:6:13","memberName":"length","nodeType":"MemberAccess","src":"3004:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2993:25:13"},{"assignments":[1532],"declarations":[{"constant":false,"id":1532,"mutability":"mutable","name":"newCapacity","nameLocation":"3033:11:13","nodeType":"VariableDeclaration","scope":1591,"src":"3028:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint","nodeType":"ElementaryTypeName","src":"3028:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1536,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1533,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"3047:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1534,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"3053:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3047:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3028:28:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1537,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"3070:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1538,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"3084:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3088:8:13","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"3084:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3070:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1549,"nodeType":"IfStatement","src":"3066:85:13","trueBody":{"id":1548,"nodeType":"Block","src":"3098:53:13","statements":[{"expression":{"arguments":[{"id":1542,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"3119:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1543,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"3124:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3138:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3124:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1541,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"3112:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3112:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1547,"nodeType":"ExpressionStatement","src":"3112:28:13"}]}},{"assignments":[1551],"declarations":[{"constant":false,"id":1551,"mutability":"mutable","name":"dest","nameLocation":"3166:4:13","nodeType":"VariableDeclaration","scope":1591,"src":"3161:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1550,"name":"uint","nodeType":"ElementaryTypeName","src":"3161:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1552,"nodeType":"VariableDeclarationStatement","src":"3161:9:13"},{"assignments":[1554],"declarations":[{"constant":false,"id":1554,"mutability":"mutable","name":"src","nameLocation":"3185:3:13","nodeType":"VariableDeclaration","scope":1591,"src":"3180:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1553,"name":"uint","nodeType":"ElementaryTypeName","src":"3180:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1555,"nodeType":"VariableDeclarationStatement","src":"3180:8:13"},{"AST":{"nodeType":"YulBlock","src":"3207:498:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3270:24:13","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"3290:3:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3284:5:13"},"nodeType":"YulFunctionCall","src":"3284:10:13"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"3274:6:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:27:13","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3373:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3367:5:13"},"nodeType":"YulFunctionCall","src":"3367:13:13"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"3357:6:13","type":""}]},{"nodeType":"YulAssignment","src":"3472:33:13","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3488:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3496:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3484:3:13"},"nodeType":"YulFunctionCall","src":"3484:15:13"},{"name":"off","nodeType":"YulIdentifier","src":"3501:3:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3480:3:13"},"nodeType":"YulFunctionCall","src":"3480:25:13"},"variableNames":[{"name":"dest","nodeType":"YulIdentifier","src":"3472:4:13"}]},{"body":{"nodeType":"YulBlock","src":"3603:59:13","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3628:6:13"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"3636:11:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3621:6:13"},"nodeType":"YulFunctionCall","src":"3621:27:13"},"nodeType":"YulExpressionStatement","src":"3621:27:13"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"3582:11:13"},{"name":"buflen","nodeType":"YulIdentifier","src":"3595:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3579:2:13"},"nodeType":"YulFunctionCall","src":"3579:23:13"},"nodeType":"YulIf","src":"3576:86:13"},{"nodeType":"YulAssignment","src":"3675:20:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3686:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3692:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3682:3:13"},"nodeType":"YulFunctionCall","src":"3682:13:13"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3675:3:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1508,"isOffset":false,"isSlot":false,"src":"3290:3:13","valueSize":1},{"declaration":1510,"isOffset":false,"isSlot":false,"src":"3686:4:13","valueSize":1},{"declaration":1551,"isOffset":false,"isSlot":false,"src":"3472:4:13","valueSize":1},{"declaration":1532,"isOffset":false,"isSlot":false,"src":"3582:11:13","valueSize":1},{"declaration":1532,"isOffset":false,"isSlot":false,"src":"3636:11:13","valueSize":1},{"declaration":1526,"isOffset":false,"isSlot":false,"src":"3501:3:13","valueSize":1},{"declaration":1554,"isOffset":false,"isSlot":false,"src":"3675:3:13","valueSize":1}],"id":1556,"nodeType":"InlineAssembly","src":"3198:507:13"},{"body":{"id":1573,"nodeType":"Block","src":"3794:136:13","statements":[{"AST":{"nodeType":"YulBlock","src":"3817:56:13","statements":[{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3842:4:13"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3854:3:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3848:5:13"},"nodeType":"YulFunctionCall","src":"3848:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3835:6:13"},"nodeType":"YulFunctionCall","src":"3835:24:13"},"nodeType":"YulExpressionStatement","src":"3835:24:13"}]},"evmVersion":"paris","externalReferences":[{"declaration":1551,"isOffset":false,"isSlot":false,"src":"3842:4:13","valueSize":1},{"declaration":1554,"isOffset":false,"isSlot":false,"src":"3854:3:13","valueSize":1}],"id":1564,"nodeType":"InlineAssembly","src":"3808:65:13"},{"expression":{"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1565,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"3886:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3894:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3886:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1568,"nodeType":"ExpressionStatement","src":"3886:10:13"},{"expression":{"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1569,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"3910:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3917:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3910:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1572,"nodeType":"ExpressionStatement","src":"3910:9:13"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1557,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"3772:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3779:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3772:9:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1574,"loopExpression":{"expression":{"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1560,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"3783:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3790:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3783:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1563,"nodeType":"ExpressionStatement","src":"3783:9:13"},"nodeType":"ForStatement","src":"3765:165:13"},{"id":1588,"nodeType":"UncheckedBlock","src":"3972:272:13","statements":[{"assignments":[1576],"declarations":[{"constant":false,"id":1576,"mutability":"mutable","name":"mask","nameLocation":"4001:4:13","nodeType":"VariableDeclaration","scope":1588,"src":"3996:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1575,"name":"uint","nodeType":"ElementaryTypeName","src":"3996:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1586,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4009:3:13","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4017:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1579,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"4022:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4017:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1581,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4016:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4009:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1583,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4008:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4030:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4008:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3996:35:13"},{"AST":{"nodeType":"YulBlock","src":"4054:180:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4072:41:13","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4097:3:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4091:5:13"},"nodeType":"YulFunctionCall","src":"4091:10:13"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4107:4:13"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4103:3:13"},"nodeType":"YulFunctionCall","src":"4103:9:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4087:3:13"},"nodeType":"YulFunctionCall","src":"4087:26:13"},"variables":[{"name":"srcpart","nodeType":"YulTypedName","src":"4076:7:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4130:38:13","value":{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4156:4:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4150:5:13"},"nodeType":"YulFunctionCall","src":"4150:11:13"},{"name":"mask","nodeType":"YulIdentifier","src":"4163:4:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4146:3:13"},"nodeType":"YulFunctionCall","src":"4146:22:13"},"variables":[{"name":"destpart","nodeType":"YulTypedName","src":"4134:8:13","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4192:4:13"},{"arguments":[{"name":"destpart","nodeType":"YulIdentifier","src":"4201:8:13"},{"name":"srcpart","nodeType":"YulIdentifier","src":"4211:7:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4198:2:13"},"nodeType":"YulFunctionCall","src":"4198:21:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4185:6:13"},"nodeType":"YulFunctionCall","src":"4185:35:13"},"nodeType":"YulExpressionStatement","src":"4185:35:13"}]},"evmVersion":"paris","externalReferences":[{"declaration":1551,"isOffset":false,"isSlot":false,"src":"4156:4:13","valueSize":1},{"declaration":1551,"isOffset":false,"isSlot":false,"src":"4192:4:13","valueSize":1},{"declaration":1576,"isOffset":false,"isSlot":false,"src":"4107:4:13","valueSize":1},{"declaration":1576,"isOffset":false,"isSlot":false,"src":"4163:4:13","valueSize":1},{"declaration":1554,"isOffset":false,"isSlot":false,"src":"4097:3:13","valueSize":1}],"id":1587,"nodeType":"InlineAssembly","src":"4045:189:13"}]},{"expression":{"id":1589,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"4261:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1517,"id":1590,"nodeType":"Return","src":"4254:10:13"}]},"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"2523:316:13","text":" @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":1592,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"2853:6:13","nodeType":"FunctionDefinition","parameters":{"id":1513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"buf","nameLocation":"2874:3:13","nodeType":"VariableDeclaration","scope":1592,"src":"2860:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1507,"nodeType":"UserDefinedTypeName","pathNode":{"id":1506,"name":"buffer","nameLocations":["2860:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"2860:6:13"},"referencedDeclaration":1399,"src":"2860:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"data","nameLocation":"2892:4:13","nodeType":"VariableDeclaration","scope":1592,"src":"2879:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1509,"name":"bytes","nodeType":"ElementaryTypeName","src":"2879:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1512,"mutability":"mutable","name":"len","nameLocation":"2903:3:13","nodeType":"VariableDeclaration","scope":1592,"src":"2898:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1511,"name":"uint","nodeType":"ElementaryTypeName","src":"2898:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2859:48:13"},"returnParameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1592,"src":"2930:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1515,"nodeType":"UserDefinedTypeName","pathNode":{"id":1514,"name":"buffer","nameLocations":["2930:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"2930:6:13"},"referencedDeclaration":1399,"src":"2930:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2929:15:13"},"scope":1812,"src":"2844:1427:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1611,"nodeType":"Block","src":"4631:54:13","statements":[{"expression":{"arguments":[{"id":1605,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"4655:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1606,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"4660:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":1607,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"4666:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4671:6:13","memberName":"length","nodeType":"MemberAccess","src":"4666:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1604,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1592,1612,1718],"referencedDeclaration":1592,"src":"4648:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4648:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1603,"id":1610,"nodeType":"Return","src":"4641:37:13"}]},"documentation":{"id":1593,"nodeType":"StructuredDocumentation","src":"4277:257:13","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1612,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4548:6:13","nodeType":"FunctionDefinition","parameters":{"id":1599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"buf","nameLocation":"4569:3:13","nodeType":"VariableDeclaration","scope":1612,"src":"4555:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1595,"nodeType":"UserDefinedTypeName","pathNode":{"id":1594,"name":"buffer","nameLocations":["4555:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"4555:6:13"},"referencedDeclaration":1399,"src":"4555:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1598,"mutability":"mutable","name":"data","nameLocation":"4587:4:13","nodeType":"VariableDeclaration","scope":1612,"src":"4574:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1597,"name":"bytes","nodeType":"ElementaryTypeName","src":"4574:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4554:38:13"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1612,"src":"4616:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1601,"nodeType":"UserDefinedTypeName","pathNode":{"id":1600,"name":"buffer","nameLocations":["4616:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"4616:6:13"},"referencedDeclaration":1399,"src":"4616:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"4615:15:13"},"scope":1812,"src":"4539:146:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1652,"nodeType":"Block","src":"5037:610:13","statements":[{"assignments":[1625],"declarations":[{"constant":false,"id":1625,"mutability":"mutable","name":"off","nameLocation":"5052:3:13","nodeType":"VariableDeclaration","scope":1652,"src":"5047:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1624,"name":"uint","nodeType":"ElementaryTypeName","src":"5047:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1629,"initialValue":{"expression":{"expression":{"id":1626,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"5058:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1627,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5062:3:13","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"5058:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5066:6:13","memberName":"length","nodeType":"MemberAccess","src":"5058:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5047:25:13"},{"assignments":[1631],"declarations":[{"constant":false,"id":1631,"mutability":"mutable","name":"offPlusOne","nameLocation":"5087:10:13","nodeType":"VariableDeclaration","scope":1652,"src":"5082:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1630,"name":"uint","nodeType":"ElementaryTypeName","src":"5082:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1635,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1632,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1625,"src":"5100:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5106:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5100:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5082:25:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1636,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1625,"src":"5121:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1637,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"5128:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5132:8:13","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"5128:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5121:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1648,"nodeType":"IfStatement","src":"5117:77:13","trueBody":{"id":1647,"nodeType":"Block","src":"5142:52:13","statements":[{"expression":{"arguments":[{"id":1641,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"5163:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1642,"name":"offPlusOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"5168:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5181:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5168:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1640,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"5156:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5156:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1646,"nodeType":"ExpressionStatement","src":"5156:27:13"}]}},{"AST":{"nodeType":"YulBlock","src":"5213:407:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5276:24:13","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"5296:3:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5290:5:13"},"nodeType":"YulFunctionCall","src":"5290:10:13"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"5280:6:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5383:37:13","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5403:6:13"},{"name":"off","nodeType":"YulIdentifier","src":"5411:3:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5399:3:13"},"nodeType":"YulFunctionCall","src":"5399:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"5417:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5395:3:13"},"nodeType":"YulFunctionCall","src":"5395:25:13"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"5387:4:13","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"5441:4:13"},{"name":"data","nodeType":"YulIdentifier","src":"5447:4:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"5433:7:13"},"nodeType":"YulFunctionCall","src":"5433:19:13"},"nodeType":"YulExpressionStatement","src":"5433:19:13"},{"body":{"nodeType":"YulBlock","src":"5552:58:13","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5577:6:13"},{"name":"offPlusOne","nodeType":"YulIdentifier","src":"5585:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5570:6:13"},"nodeType":"YulFunctionCall","src":"5570:26:13"},"nodeType":"YulExpressionStatement","src":"5570:26:13"}]},"condition":{"arguments":[{"name":"offPlusOne","nodeType":"YulIdentifier","src":"5525:10:13"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5543:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5537:5:13"},"nodeType":"YulFunctionCall","src":"5537:13:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5522:2:13"},"nodeType":"YulFunctionCall","src":"5522:29:13"},"nodeType":"YulIf","src":"5519:91:13"}]},"evmVersion":"paris","externalReferences":[{"declaration":1616,"isOffset":false,"isSlot":false,"src":"5296:3:13","valueSize":1},{"declaration":1618,"isOffset":false,"isSlot":false,"src":"5447:4:13","valueSize":1},{"declaration":1625,"isOffset":false,"isSlot":false,"src":"5411:3:13","valueSize":1},{"declaration":1631,"isOffset":false,"isSlot":false,"src":"5525:10:13","valueSize":1},{"declaration":1631,"isOffset":false,"isSlot":false,"src":"5585:10:13","valueSize":1}],"id":1649,"nodeType":"InlineAssembly","src":"5204:416:13"},{"expression":{"id":1650,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"5637:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1623,"id":1651,"nodeType":"Return","src":"5630:10:13"}]},"documentation":{"id":1613,"nodeType":"StructuredDocumentation","src":"4691:252:13","text":" @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1653,"implemented":true,"kind":"function","modifiers":[],"name":"appendUint8","nameLocation":"4957:11:13","nodeType":"FunctionDefinition","parameters":{"id":1619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1616,"mutability":"mutable","name":"buf","nameLocation":"4983:3:13","nodeType":"VariableDeclaration","scope":1653,"src":"4969:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1615,"nodeType":"UserDefinedTypeName","pathNode":{"id":1614,"name":"buffer","nameLocations":["4969:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"4969:6:13"},"referencedDeclaration":1399,"src":"4969:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1618,"mutability":"mutable","name":"data","nameLocation":"4994:4:13","nodeType":"VariableDeclaration","scope":1653,"src":"4988:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1617,"name":"uint8","nodeType":"ElementaryTypeName","src":"4988:5:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4968:31:13"},"returnParameters":{"id":1623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1653,"src":"5022:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1621,"nodeType":"UserDefinedTypeName","pathNode":{"id":1620,"name":"buffer","nameLocations":["5022:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"5022:6:13"},"referencedDeclaration":1399,"src":"5022:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"5021:15:13"},"scope":1812,"src":"4948:699:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1717,"nodeType":"Block","src":"6079:854:13","statements":[{"assignments":[1668],"declarations":[{"constant":false,"id":1668,"mutability":"mutable","name":"off","nameLocation":"6094:3:13","nodeType":"VariableDeclaration","scope":1717,"src":"6089:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1667,"name":"uint","nodeType":"ElementaryTypeName","src":"6089:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1672,"initialValue":{"expression":{"expression":{"id":1669,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"6100:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1670,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6104:3:13","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"6100:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6108:6:13","memberName":"length","nodeType":"MemberAccess","src":"6100:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6089:25:13"},{"assignments":[1674],"declarations":[{"constant":false,"id":1674,"mutability":"mutable","name":"newCapacity","nameLocation":"6129:11:13","nodeType":"VariableDeclaration","scope":1717,"src":"6124:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1673,"name":"uint","nodeType":"ElementaryTypeName","src":"6124:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1678,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1675,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"6143:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1676,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"6149:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6143:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6124:28:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1679,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"6166:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1680,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"6180:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1681,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6184:8:13","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"6180:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6166:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1691,"nodeType":"IfStatement","src":"6162:85:13","trueBody":{"id":1690,"nodeType":"Block","src":"6194:53:13","statements":[{"expression":{"arguments":[{"id":1684,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"6215:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1685,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"6220:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6234:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6220:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1683,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"6208:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6208:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1689,"nodeType":"ExpressionStatement","src":"6208:28:13"}]}},{"id":1714,"nodeType":"UncheckedBlock","src":"6257:650:13","statements":[{"assignments":[1693],"declarations":[{"constant":false,"id":1693,"mutability":"mutable","name":"mask","nameLocation":"6286:4:13","nodeType":"VariableDeclaration","scope":1714,"src":"6281:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1692,"name":"uint","nodeType":"ElementaryTypeName","src":"6281:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1700,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6294:3:13","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1695,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"6301:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6294:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1697,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6293:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6308:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6293:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6281:28:13"},{"expression":{"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1701,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"6355:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1702,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"6362:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6371:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6376:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1705,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"6381:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6376:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1707,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6375:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6371:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1709,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6370:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6362:24:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6355:31:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1712,"nodeType":"ExpressionStatement","src":"6355:31:13"},{"AST":{"nodeType":"YulBlock","src":"6409:488:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6480:24:13","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"6500:3:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6494:5:13"},"nodeType":"YulFunctionCall","src":"6494:10:13"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"6484:6:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6603:36:13","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6619:6:13"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"6627:11:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6615:3:13"},"nodeType":"YulFunctionCall","src":"6615:24:13"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"6607:4:13","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"6663:4:13"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"6682:4:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6676:5:13"},"nodeType":"YulFunctionCall","src":"6676:11:13"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"6693:4:13"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6689:3:13"},"nodeType":"YulFunctionCall","src":"6689:9:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6672:3:13"},"nodeType":"YulFunctionCall","src":"6672:27:13"},{"name":"data","nodeType":"YulIdentifier","src":"6701:4:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6669:2:13"},"nodeType":"YulFunctionCall","src":"6669:37:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6656:6:13"},"nodeType":"YulFunctionCall","src":"6656:51:13"},"nodeType":"YulExpressionStatement","src":"6656:51:13"},{"body":{"nodeType":"YulBlock","src":"6816:67:13","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6845:6:13"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"6853:11:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6838:6:13"},"nodeType":"YulFunctionCall","src":"6838:27:13"},"nodeType":"YulExpressionStatement","src":"6838:27:13"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"6788:11:13"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6807:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6801:5:13"},"nodeType":"YulFunctionCall","src":"6801:13:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6785:2:13"},"nodeType":"YulFunctionCall","src":"6785:30:13"},"nodeType":"YulIf","src":"6782:101:13"}]},"evmVersion":"paris","externalReferences":[{"declaration":1657,"isOffset":false,"isSlot":false,"src":"6500:3:13","valueSize":1},{"declaration":1659,"isOffset":false,"isSlot":false,"src":"6701:4:13","valueSize":1},{"declaration":1693,"isOffset":false,"isSlot":false,"src":"6693:4:13","valueSize":1},{"declaration":1674,"isOffset":false,"isSlot":false,"src":"6627:11:13","valueSize":1},{"declaration":1674,"isOffset":false,"isSlot":false,"src":"6788:11:13","valueSize":1},{"declaration":1674,"isOffset":false,"isSlot":false,"src":"6853:11:13","valueSize":1}],"id":1713,"nodeType":"InlineAssembly","src":"6400:497:13"}]},{"expression":{"id":1715,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"6923:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1666,"id":1716,"nodeType":"Return","src":"6916:10:13"}]},"documentation":{"id":1654,"nodeType":"StructuredDocumentation","src":"5653:326:13","text":" @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to write (left-aligned).\n @return The original buffer, for chaining."},"id":1718,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"5993:6:13","nodeType":"FunctionDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"mutability":"mutable","name":"buf","nameLocation":"6014:3:13","nodeType":"VariableDeclaration","scope":1718,"src":"6000:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1656,"nodeType":"UserDefinedTypeName","pathNode":{"id":1655,"name":"buffer","nameLocations":["6000:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"6000:6:13"},"referencedDeclaration":1399,"src":"6000:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1659,"mutability":"mutable","name":"data","nameLocation":"6027:4:13","nodeType":"VariableDeclaration","scope":1718,"src":"6019:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6019:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"len","nameLocation":"6038:3:13","nodeType":"VariableDeclaration","scope":1718,"src":"6033:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1660,"name":"uint","nodeType":"ElementaryTypeName","src":"6033:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5999:43:13"},"returnParameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1718,"src":"6064:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1664,"nodeType":"UserDefinedTypeName","pathNode":{"id":1663,"name":"buffer","nameLocations":["6064:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"6064:6:13"},"referencedDeclaration":1399,"src":"6064:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"6063:15:13"},"scope":1812,"src":"5984:949:13","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1739,"nodeType":"Block","src":"7294:54:13","statements":[{"expression":{"arguments":[{"id":1731,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"7318:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"arguments":[{"id":1734,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"7331:4:13","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":1733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7323:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7323:7:13","typeDescriptions":{}}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7323:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":1736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:2:13","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":1730,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1592,1612,1718],"referencedDeclaration":1718,"src":"7311:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes32,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1729,"id":1738,"nodeType":"Return","src":"7304:37:13"}]},"documentation":{"id":1719,"nodeType":"StructuredDocumentation","src":"6939:256:13","text":" @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chhaining."},"id":1740,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes20","nameLocation":"7209:13:13","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1722,"mutability":"mutable","name":"buf","nameLocation":"7237:3:13","nodeType":"VariableDeclaration","scope":1740,"src":"7223:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1721,"nodeType":"UserDefinedTypeName","pathNode":{"id":1720,"name":"buffer","nameLocations":["7223:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"7223:6:13"},"referencedDeclaration":1399,"src":"7223:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"data","nameLocation":"7250:4:13","nodeType":"VariableDeclaration","scope":1740,"src":"7242:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1723,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7242:7:13","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"7222:33:13"},"returnParameters":{"id":1729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1740,"src":"7279:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1727,"nodeType":"UserDefinedTypeName","pathNode":{"id":1726,"name":"buffer","nameLocations":["7279:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"7279:6:13"},"referencedDeclaration":1399,"src":"7279:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"7278:15:13"},"scope":1812,"src":"7200:148:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1758,"nodeType":"Block","src":"7708:45:13","statements":[{"expression":{"arguments":[{"id":1753,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"7732:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1754,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"7737:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3332","id":1755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7743:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":1752,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1592,1612,1718],"referencedDeclaration":1718,"src":"7725:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes32,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7725:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1751,"id":1757,"nodeType":"Return","src":"7718:28:13"}]},"documentation":{"id":1741,"nodeType":"StructuredDocumentation","src":"7354:255:13","text":" @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1759,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes32","nameLocation":"7623:13:13","nodeType":"FunctionDefinition","parameters":{"id":1747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"mutability":"mutable","name":"buf","nameLocation":"7651:3:13","nodeType":"VariableDeclaration","scope":1759,"src":"7637:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1743,"nodeType":"UserDefinedTypeName","pathNode":{"id":1742,"name":"buffer","nameLocations":["7637:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"7637:6:13"},"referencedDeclaration":1399,"src":"7637:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1746,"mutability":"mutable","name":"data","nameLocation":"7664:4:13","nodeType":"VariableDeclaration","scope":1759,"src":"7656:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7656:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7636:33:13"},"returnParameters":{"id":1751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1759,"src":"7693:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1749,"nodeType":"UserDefinedTypeName","pathNode":{"id":1748,"name":"buffer","nameLocations":["7693:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"7693:6:13"},"referencedDeclaration":1399,"src":"7693:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"7692:15:13"},"scope":1812,"src":"7614:139:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1810,"nodeType":"Block","src":"8179:699:13","statements":[{"assignments":[1774],"declarations":[{"constant":false,"id":1774,"mutability":"mutable","name":"off","nameLocation":"8194:3:13","nodeType":"VariableDeclaration","scope":1810,"src":"8189:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1773,"name":"uint","nodeType":"ElementaryTypeName","src":"8189:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1778,"initialValue":{"expression":{"expression":{"id":1775,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"8200:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1776,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8204:3:13","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"8200:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8208:6:13","memberName":"length","nodeType":"MemberAccess","src":"8200:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8189:25:13"},{"assignments":[1780],"declarations":[{"constant":false,"id":1780,"mutability":"mutable","name":"newCapacity","nameLocation":"8229:11:13","nodeType":"VariableDeclaration","scope":1810,"src":"8224:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1779,"name":"uint","nodeType":"ElementaryTypeName","src":"8224:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1784,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1781,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"8243:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1782,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"8249:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8243:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8224:28:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1785,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"8266:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1786,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"8280:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1787,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8284:8:13","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"8280:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8266:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1797,"nodeType":"IfStatement","src":"8262:85:13","trueBody":{"id":1796,"nodeType":"Block","src":"8294:53:13","statements":[{"expression":{"arguments":[{"id":1790,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"8315:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1791,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"8320:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8334:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"8320:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1789,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"8308:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8308:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1795,"nodeType":"ExpressionStatement","src":"8308:28:13"}]}},{"assignments":[1799],"declarations":[{"constant":false,"id":1799,"mutability":"mutable","name":"mask","nameLocation":"8362:4:13","nodeType":"VariableDeclaration","scope":1810,"src":"8357:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1798,"name":"uint","nodeType":"ElementaryTypeName","src":"8357:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1806,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8370:3:13","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1801,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"8377:3:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8370:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1803,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8369:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8384:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8369:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8357:28:13"},{"AST":{"nodeType":"YulBlock","src":"8404:448:13","statements":[{"nodeType":"YulVariableDeclaration","src":"8467:24:13","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"8487:3:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8481:5:13"},"nodeType":"YulFunctionCall","src":"8481:10:13"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"8471:6:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8582:36:13","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8598:6:13"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"8606:11:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8594:3:13"},"nodeType":"YulFunctionCall","src":"8594:24:13"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"8586:4:13","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8638:4:13"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8657:4:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8651:5:13"},"nodeType":"YulFunctionCall","src":"8651:11:13"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"8668:4:13"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8664:3:13"},"nodeType":"YulFunctionCall","src":"8664:9:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8647:3:13"},"nodeType":"YulFunctionCall","src":"8647:27:13"},{"name":"data","nodeType":"YulIdentifier","src":"8676:4:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8644:2:13"},"nodeType":"YulFunctionCall","src":"8644:37:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8631:6:13"},"nodeType":"YulFunctionCall","src":"8631:51:13"},"nodeType":"YulExpressionStatement","src":"8631:51:13"},{"body":{"nodeType":"YulBlock","src":"8783:59:13","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8808:6:13"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"8816:11:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:13"},"nodeType":"YulFunctionCall","src":"8801:27:13"},"nodeType":"YulExpressionStatement","src":"8801:27:13"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"8755:11:13"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8774:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8768:5:13"},"nodeType":"YulFunctionCall","src":"8768:13:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8752:2:13"},"nodeType":"YulFunctionCall","src":"8752:30:13"},"nodeType":"YulIf","src":"8749:93:13"}]},"evmVersion":"paris","externalReferences":[{"declaration":1763,"isOffset":false,"isSlot":false,"src":"8487:3:13","valueSize":1},{"declaration":1765,"isOffset":false,"isSlot":false,"src":"8676:4:13","valueSize":1},{"declaration":1799,"isOffset":false,"isSlot":false,"src":"8668:4:13","valueSize":1},{"declaration":1780,"isOffset":false,"isSlot":false,"src":"8606:11:13","valueSize":1},{"declaration":1780,"isOffset":false,"isSlot":false,"src":"8755:11:13","valueSize":1},{"declaration":1780,"isOffset":false,"isSlot":false,"src":"8816:11:13","valueSize":1}],"id":1807,"nodeType":"InlineAssembly","src":"8395:457:13"},{"expression":{"id":1808,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"8868:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1772,"id":1809,"nodeType":"Return","src":"8861:10:13"}]},"documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"7759:319:13","text":" @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to write (right-aligned).\n @return The original buffer."},"id":1811,"implemented":true,"kind":"function","modifiers":[],"name":"appendInt","nameLocation":"8092:9:13","nodeType":"FunctionDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1763,"mutability":"mutable","name":"buf","nameLocation":"8116:3:13","nodeType":"VariableDeclaration","scope":1811,"src":"8102:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1762,"nodeType":"UserDefinedTypeName","pathNode":{"id":1761,"name":"buffer","nameLocations":["8102:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"8102:6:13"},"referencedDeclaration":1399,"src":"8102:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"data","nameLocation":"8126:4:13","nodeType":"VariableDeclaration","scope":1811,"src":"8121:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint","nodeType":"ElementaryTypeName","src":"8121:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"len","nameLocation":"8137:3:13","nodeType":"VariableDeclaration","scope":1811,"src":"8132:8:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint","nodeType":"ElementaryTypeName","src":"8132:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8101:40:13"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1811,"src":"8164:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1770,"nodeType":"UserDefinedTypeName","pathNode":{"id":1769,"name":"buffer","nameLocations":["8164:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"8164:6:13"},"referencedDeclaration":1399,"src":"8164:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"8163:15:13"},"scope":1812,"src":"8083:795:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1813,"src":"445:8435:13","usedErrors":[],"usedEvents":[]}],"src":"41:8839:13"},"id":13},"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol","exportedSymbols":{"Buffer":[1812],"CBOR":[2671]},"id":2672,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1814,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:14"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol","file":"../../@ensdomains/buffer/v0.1.0/Buffer.sol","id":1815,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2672,"sourceUnit":1813,"src":"57:52:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"CBOR","contractDependencies":[],"contractKind":"library","documentation":{"id":1816,"nodeType":"StructuredDocumentation","src":"111:553:14","text":" @dev A library for populating CBOR encoded payload in Solidity.\n https://datatracker.ietf.org/doc/html/rfc7049\n The library offers various write* and start* methods to encode values of different types.\n The resulted buffer can be obtained with data() method.\n Encoding of primitive types is staightforward, whereas encoding of sequences can result\n in an invalid CBOR if start/write/end flow is violated.\n For the purpose of gas saving, the library does not verify start/write/end flow internally,\n except for nested start/end pairs."},"fullyImplemented":true,"id":2671,"linearizedBaseContracts":[2671],"name":"CBOR","nameLocation":"674:4:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1820,"libraryName":{"id":1817,"name":"Buffer","nameLocations":["691:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1812,"src":"691:6:14"},"nodeType":"UsingForDirective","src":"685:31:14","typeName":{"id":1819,"nodeType":"UserDefinedTypeName","pathNode":{"id":1818,"name":"Buffer.buffer","nameLocations":["702:6:14","709:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"702:13:14"},"referencedDeclaration":1399,"src":"702:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}}},{"canonicalName":"CBOR.CBORBuffer","id":1826,"members":[{"constant":false,"id":1823,"mutability":"mutable","name":"buf","nameLocation":"764:3:14","nodeType":"VariableDeclaration","scope":1826,"src":"750:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1822,"nodeType":"UserDefinedTypeName","pathNode":{"id":1821,"name":"Buffer.buffer","nameLocations":["750:6:14","757:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1399,"src":"750:13:14"},"referencedDeclaration":1399,"src":"750:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"depth","nameLocation":"785:5:14","nodeType":"VariableDeclaration","scope":1826,"src":"777:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1824,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"CBORBuffer","nameLocation":"729:10:14","nodeType":"StructDefinition","scope":2671,"src":"722:75:14","visibility":"public"},{"constant":true,"id":1829,"mutability":"constant","name":"MAJOR_TYPE_INT","nameLocation":"826:14:14","nodeType":"VariableDeclaration","scope":2671,"src":"803:41:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1827,"name":"uint8","nodeType":"ElementaryTypeName","src":"803:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"30","id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"843:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":true,"id":1832,"mutability":"constant","name":"MAJOR_TYPE_NEGATIVE_INT","nameLocation":"873:23:14","nodeType":"VariableDeclaration","scope":2671,"src":"850:50:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1830,"name":"uint8","nodeType":"ElementaryTypeName","src":"850:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"899:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1835,"mutability":"constant","name":"MAJOR_TYPE_BYTES","nameLocation":"929:16:14","nodeType":"VariableDeclaration","scope":2671,"src":"906:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1833,"name":"uint8","nodeType":"ElementaryTypeName","src":"906:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":1834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"948:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":1838,"mutability":"constant","name":"MAJOR_TYPE_STRING","nameLocation":"978:17:14","nodeType":"VariableDeclaration","scope":2671,"src":"955:44:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1836,"name":"uint8","nodeType":"ElementaryTypeName","src":"955:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"998:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":1841,"mutability":"constant","name":"MAJOR_TYPE_ARRAY","nameLocation":"1028:16:14","nodeType":"VariableDeclaration","scope":2671,"src":"1005:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1839,"name":"uint8","nodeType":"ElementaryTypeName","src":"1005:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"34","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1047:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"private"},{"constant":true,"id":1844,"mutability":"constant","name":"MAJOR_TYPE_MAP","nameLocation":"1077:14:14","nodeType":"VariableDeclaration","scope":2671,"src":"1054:41:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1842,"name":"uint8","nodeType":"ElementaryTypeName","src":"1054:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"35","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1094:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"private"},{"constant":true,"id":1847,"mutability":"constant","name":"MAJOR_TYPE_TAG","nameLocation":"1124:14:14","nodeType":"VariableDeclaration","scope":2671,"src":"1101:41:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1845,"name":"uint8","nodeType":"ElementaryTypeName","src":"1101:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"36","id":1846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1141:1:14","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"visibility":"private"},{"constant":true,"id":1850,"mutability":"constant","name":"MAJOR_TYPE_CONTENT_FREE","nameLocation":"1171:23:14","nodeType":"VariableDeclaration","scope":2671,"src":"1148:50:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1848,"name":"uint8","nodeType":"ElementaryTypeName","src":"1148:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"37","id":1849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1197:1:14","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"visibility":"private"},{"constant":true,"id":1853,"mutability":"constant","name":"TAG_TYPE_BIGNUM","nameLocation":"1228:15:14","nodeType":"VariableDeclaration","scope":2671,"src":"1205:42:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1851,"name":"uint8","nodeType":"ElementaryTypeName","src":"1205:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":1852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1246:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":1856,"mutability":"constant","name":"TAG_TYPE_NEGATIVE_BIGNUM","nameLocation":"1276:24:14","nodeType":"VariableDeclaration","scope":2671,"src":"1253:51:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1854,"name":"uint8","nodeType":"ElementaryTypeName","src":"1253:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":1855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1303:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":1859,"mutability":"constant","name":"CBOR_FALSE","nameLocation":"1334:10:14","nodeType":"VariableDeclaration","scope":2671,"src":"1311:38:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1857,"name":"uint8","nodeType":"ElementaryTypeName","src":"1311:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1347:2:14","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"constant":true,"id":1862,"mutability":"constant","name":"CBOR_TRUE","nameLocation":"1378:9:14","nodeType":"VariableDeclaration","scope":2671,"src":"1355:37:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1860,"name":"uint8","nodeType":"ElementaryTypeName","src":"1355:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3231","id":1861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:2:14","typeDescriptions":{"typeIdentifier":"t_rational_21_by_1","typeString":"int_const 21"},"value":"21"},"visibility":"private"},{"constant":true,"id":1865,"mutability":"constant","name":"CBOR_NULL","nameLocation":"1421:9:14","nodeType":"VariableDeclaration","scope":2671,"src":"1398:37:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1863,"name":"uint8","nodeType":"ElementaryTypeName","src":"1398:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3232","id":1864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1433:2:14","typeDescriptions":{"typeIdentifier":"t_rational_22_by_1","typeString":"int_const 22"},"value":"22"},"visibility":"private"},{"constant":true,"id":1868,"mutability":"constant","name":"CBOR_UNDEFINED","nameLocation":"1464:14:14","nodeType":"VariableDeclaration","scope":2671,"src":"1441:42:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1866,"name":"uint8","nodeType":"ElementaryTypeName","src":"1441:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3233","id":1867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1481:2:14","typeDescriptions":{"typeIdentifier":"t_rational_23_by_1","typeString":"int_const 23"},"value":"23"},"visibility":"private"},{"body":{"id":1892,"nodeType":"Block","src":"1570:93:14","statements":[{"expression":{"arguments":[{"expression":{"id":1879,"name":"cbor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"1592:4:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1597:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"1592:8:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1881,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"1602:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1876,"name":"Buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"1580:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Buffer_$1812_$","typeString":"type(library Buffer)"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1587:4:14","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1437,"src":"1580:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1580:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1883,"nodeType":"ExpressionStatement","src":"1580:31:14"},{"expression":{"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1884,"name":"cbor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"1621:4:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1886,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1626:5:14","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1825,"src":"1621:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1634:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1621:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1889,"nodeType":"ExpressionStatement","src":"1621:14:14"},{"expression":{"id":1890,"name":"cbor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"1652:4:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"functionReturnParameters":1875,"id":1891,"nodeType":"Return","src":"1645:11:14"}]},"id":1893,"implemented":true,"kind":"function","modifiers":[],"name":"create","nameLocation":"1499:6:14","nodeType":"FunctionDefinition","parameters":{"id":1871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"capacity","nameLocation":"1514:8:14","nodeType":"VariableDeclaration","scope":1893,"src":"1506:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1869,"name":"uint256","nodeType":"ElementaryTypeName","src":"1506:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1505:18:14"},"returnParameters":{"id":1875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1874,"mutability":"mutable","name":"cbor","nameLocation":"1564:4:14","nodeType":"VariableDeclaration","scope":1893,"src":"1546:22:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1873,"nodeType":"UserDefinedTypeName","pathNode":{"id":1872,"name":"CBORBuffer","nameLocations":["1546:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"1546:10:14"},"referencedDeclaration":1826,"src":"1546:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"1545:24:14"},"scope":2671,"src":"1490:173:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1913,"nodeType":"Block","src":"1742:84:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1902,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"1760:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1903,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1764:5:14","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1825,"src":"1760:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1773:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1760:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642043424f52","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1776:14:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd61d0da58dad259aa66f3fa1a93613cc3b690958f0ccf5500de84dec9fbf234","typeString":"literal_string \"Invalid CBOR\""},"value":"Invalid CBOR"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fd61d0da58dad259aa66f3fa1a93613cc3b690958f0ccf5500de84dec9fbf234","typeString":"literal_string \"Invalid CBOR\""}],"id":1901,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1752:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1752:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1908,"nodeType":"ExpressionStatement","src":"1752:39:14"},{"expression":{"expression":{"expression":{"id":1909,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"1808:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1812:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"1808:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1911,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1816:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"1808:11:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1900,"id":1912,"nodeType":"Return","src":"1801:18:14"}]},"id":1914,"implemented":true,"kind":"function","modifiers":[],"name":"data","nameLocation":"1678:4:14","nodeType":"FunctionDefinition","parameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"buf","nameLocation":"1701:3:14","nodeType":"VariableDeclaration","scope":1914,"src":"1683:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1895,"nodeType":"UserDefinedTypeName","pathNode":{"id":1894,"name":"CBORBuffer","nameLocations":["1683:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"1683:10:14"},"referencedDeclaration":1826,"src":"1683:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"1682:23:14"},"returnParameters":{"id":1900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1914,"src":"1728:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1898,"name":"bytes","nodeType":"ElementaryTypeName","src":"1728:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1727:14:14"},"scope":2671,"src":"1669:157:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1946,"nodeType":"Block","src":"1906:128:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":1929,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"1943:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1943:19:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1932,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1942:21:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1933,"name":"TAG_TYPE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"1966:15:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1942:39:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1936:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1927,"name":"uint8","nodeType":"ElementaryTypeName","src":"1936:5:14","typeDescriptions":{}}},"id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1936:46:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":1922,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"1916:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1925,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1920:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"1916:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1926,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1924:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"1916:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1916:67:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1937,"nodeType":"ExpressionStatement","src":"1916:67:14"},{"expression":{"arguments":[{"id":1939,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"2004:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"arguments":[{"id":1942,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"2020:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1940,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2009:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2013:6:14","memberName":"encode","nodeType":"MemberAccess","src":"2009:10:14","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2009:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1938,"name":"writeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"1993:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1993:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1945,"nodeType":"ExpressionStatement","src":"1993:34:14"}]},"id":1947,"implemented":true,"kind":"function","modifiers":[],"name":"writeUInt256","nameLocation":"1841:12:14","nodeType":"FunctionDefinition","parameters":{"id":1920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"buf","nameLocation":"1872:3:14","nodeType":"VariableDeclaration","scope":1947,"src":"1854:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1916,"nodeType":"UserDefinedTypeName","pathNode":{"id":1915,"name":"CBORBuffer","nameLocations":["1854:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"1854:10:14"},"referencedDeclaration":1826,"src":"1854:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1919,"mutability":"mutable","name":"value","nameLocation":"1885:5:14","nodeType":"VariableDeclaration","scope":1947,"src":"1877:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1918,"name":"uint256","nodeType":"ElementaryTypeName","src":"1877:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1853:38:14"},"returnParameters":{"id":1921,"nodeType":"ParameterList","parameters":[],"src":"1906:0:14"},"scope":2671,"src":"1832:202:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1999,"nodeType":"Block","src":"2112:288:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"2126:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2134:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2126:9:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1997,"nodeType":"Block","src":"2336:58:14","statements":[{"expression":{"arguments":[{"id":1990,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"2363:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"arguments":[{"id":1993,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"2376:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2368:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"2368:7:14","typeDescriptions":{}}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2368:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1989,"name":"writeUInt256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"2350:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2350:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1996,"nodeType":"ExpressionStatement","src":"2350:33:14"}]},"id":1998,"nodeType":"IfStatement","src":"2122:272:14","trueBody":{"id":1988,"nodeType":"Block","src":"2137:193:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":1965,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"2195:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2213:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2195:19:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1968,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2194:21:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1969,"name":"TAG_TYPE_NEGATIVE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"2218:24:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2194:48:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2188:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1963,"name":"uint8","nodeType":"ElementaryTypeName","src":"2188:5:14","typeDescriptions":{}}},"id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2188:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":1958,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"2151:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1961,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2155:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"2151:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2159:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"2151:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2151:106:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1973,"nodeType":"ExpressionStatement","src":"2151:106:14"},{"expression":{"arguments":[{"id":1975,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"2282:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2306:2:14","subExpression":{"hexValue":"31","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2307:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"2311:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2306:10:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2298:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1978,"name":"uint256","nodeType":"ElementaryTypeName","src":"2298:7:14","typeDescriptions":{}}},"id":1984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1976,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2287:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2291:6:14","memberName":"encode","nodeType":"MemberAccess","src":"2287:10:14","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2287:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1974,"name":"writeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"2271:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2271:48:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1987,"nodeType":"ExpressionStatement","src":"2271:48:14"}]}}]},"id":2000,"implemented":true,"kind":"function","modifiers":[],"name":"writeInt256","nameLocation":"2049:11:14","nodeType":"FunctionDefinition","parameters":{"id":1953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1950,"mutability":"mutable","name":"buf","nameLocation":"2079:3:14","nodeType":"VariableDeclaration","scope":2000,"src":"2061:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1949,"nodeType":"UserDefinedTypeName","pathNode":{"id":1948,"name":"CBORBuffer","nameLocations":["2061:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"2061:10:14"},"referencedDeclaration":1826,"src":"2061:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1952,"mutability":"mutable","name":"value","nameLocation":"2091:5:14","nodeType":"VariableDeclaration","scope":2000,"src":"2084:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1951,"name":"int256","nodeType":"ElementaryTypeName","src":"2084:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2060:37:14"},"returnParameters":{"id":1954,"nodeType":"ParameterList","parameters":[],"src":"2112:0:14"},"scope":2671,"src":"2040:360:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2014,"nodeType":"Block","src":"2478:62:14","statements":[{"expression":{"arguments":[{"id":2009,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"2506:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2010,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"2511:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"2527:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2008,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2488:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2488:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2013,"nodeType":"ExpressionStatement","src":"2488:45:14"}]},"id":2015,"implemented":true,"kind":"function","modifiers":[],"name":"writeUInt64","nameLocation":"2415:11:14","nodeType":"FunctionDefinition","parameters":{"id":2006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2003,"mutability":"mutable","name":"buf","nameLocation":"2445:3:14","nodeType":"VariableDeclaration","scope":2015,"src":"2427:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2002,"nodeType":"UserDefinedTypeName","pathNode":{"id":2001,"name":"CBORBuffer","nameLocations":["2427:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"2427:10:14"},"referencedDeclaration":1826,"src":"2427:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2005,"mutability":"mutable","name":"value","nameLocation":"2457:5:14","nodeType":"VariableDeclaration","scope":2015,"src":"2450:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2004,"name":"uint64","nodeType":"ElementaryTypeName","src":"2450:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2426:37:14"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[],"src":"2478:0:14"},"scope":2671,"src":"2406:134:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2050,"nodeType":"Block","src":"2616:206:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int64","typeString":"int64"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"2629:5:14","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2638:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2629:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2048,"nodeType":"Block","src":"2724:92:14","statements":[{"expression":{"arguments":[{"id":2037,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"2756:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2038,"name":"MAJOR_TYPE_NEGATIVE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"2761:23:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"commonType":{"typeIdentifier":"t_int64","typeString":"int64"},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2793:2:14","subExpression":{"hexValue":"31","id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2794:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"2798:5:14","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"2793:10:14","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"}],"id":2040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2786:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2039,"name":"uint64","nodeType":"ElementaryTypeName","src":"2786:6:14","typeDescriptions":{}}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2786:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2036,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2738:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:67:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2047,"nodeType":"ExpressionStatement","src":"2738:67:14"}]},"id":2049,"nodeType":"IfStatement","src":"2626:190:14","trueBody":{"id":2035,"nodeType":"Block","src":"2641:78:14","statements":[{"expression":{"arguments":[{"id":2027,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"2673:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2028,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"2678:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"id":2031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"2701:5:14","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"}],"id":2030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2694:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2029,"name":"uint64","nodeType":"ElementaryTypeName","src":"2694:6:14","typeDescriptions":{}}},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2694:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2026,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2655:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2655:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2034,"nodeType":"ExpressionStatement","src":"2655:53:14"}]}}]},"id":2051,"implemented":true,"kind":"function","modifiers":[],"name":"writeInt64","nameLocation":"2555:10:14","nodeType":"FunctionDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2018,"mutability":"mutable","name":"buf","nameLocation":"2584:3:14","nodeType":"VariableDeclaration","scope":2051,"src":"2566:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2017,"nodeType":"UserDefinedTypeName","pathNode":{"id":2016,"name":"CBORBuffer","nameLocations":["2566:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"2566:10:14"},"referencedDeclaration":1826,"src":"2566:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2020,"mutability":"mutable","name":"value","nameLocation":"2595:5:14","nodeType":"VariableDeclaration","scope":2051,"src":"2589:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":2019,"name":"int64","nodeType":"ElementaryTypeName","src":"2589:5:14","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"2565:36:14"},"returnParameters":{"id":2022,"nodeType":"ParameterList","parameters":[],"src":"2616:0:14"},"scope":2671,"src":"2546:276:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2077,"nodeType":"Block","src":"2905:110:14","statements":[{"expression":{"arguments":[{"id":2060,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"2933:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2061,"name":"MAJOR_TYPE_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"2938:16:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"id":2064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"2963:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2969:6:14","memberName":"length","nodeType":"MemberAccess","src":"2963:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2956:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2062,"name":"uint64","nodeType":"ElementaryTypeName","src":"2956:6:14","typeDescriptions":{}}},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2956:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2059,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2915:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2915:62:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2068,"nodeType":"ExpressionStatement","src":"2915:62:14"},{"expression":{"arguments":[{"id":2074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"3002:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"expression":{"id":2069,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"2987:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2072,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2991:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"2987:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2073,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2995:6:14","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":1612,"src":"2987:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2987:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2076,"nodeType":"ExpressionStatement","src":"2987:21:14"}]},"id":2078,"implemented":true,"kind":"function","modifiers":[],"name":"writeBytes","nameLocation":"2837:10:14","nodeType":"FunctionDefinition","parameters":{"id":2057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"buf","nameLocation":"2866:3:14","nodeType":"VariableDeclaration","scope":2078,"src":"2848:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2053,"nodeType":"UserDefinedTypeName","pathNode":{"id":2052,"name":"CBORBuffer","nameLocations":["2848:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"2848:10:14"},"referencedDeclaration":1826,"src":"2848:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2056,"mutability":"mutable","name":"value","nameLocation":"2884:5:14","nodeType":"VariableDeclaration","scope":2078,"src":"2871:18:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2055,"name":"bytes","nodeType":"ElementaryTypeName","src":"2871:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2847:43:14"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[],"src":"2905:0:14"},"scope":2671,"src":"2828:187:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2110,"nodeType":"Block","src":"3100:125:14","statements":[{"expression":{"arguments":[{"id":2087,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"3128:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2088,"name":"MAJOR_TYPE_STRING","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"3133:17:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"arguments":[{"id":2093,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"3165:5:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3159:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2091,"name":"bytes","nodeType":"ElementaryTypeName","src":"3159:5:14","typeDescriptions":{}}},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3159:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3172:6:14","memberName":"length","nodeType":"MemberAccess","src":"3159:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3152:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2089,"name":"uint64","nodeType":"ElementaryTypeName","src":"3152:6:14","typeDescriptions":{}}},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3152:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2086,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"3110:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3110:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2098,"nodeType":"ExpressionStatement","src":"3110:70:14"},{"expression":{"arguments":[{"arguments":[{"id":2106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"3211:5:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3205:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2104,"name":"bytes","nodeType":"ElementaryTypeName","src":"3205:5:14","typeDescriptions":{}}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3205:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"expression":{"id":2099,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"3190:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2102,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3194:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"3190:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3198:6:14","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":1612,"src":"3190:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3190:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2109,"nodeType":"ExpressionStatement","src":"3190:28:14"}]},"id":2111,"implemented":true,"kind":"function","modifiers":[],"name":"writeString","nameLocation":"3030:11:14","nodeType":"FunctionDefinition","parameters":{"id":2084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"buf","nameLocation":"3060:3:14","nodeType":"VariableDeclaration","scope":2111,"src":"3042:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2080,"nodeType":"UserDefinedTypeName","pathNode":{"id":2079,"name":"CBORBuffer","nameLocations":["3042:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"3042:10:14"},"referencedDeclaration":1826,"src":"3042:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2083,"mutability":"mutable","name":"value","nameLocation":"3079:5:14","nodeType":"VariableDeclaration","scope":2111,"src":"3065:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2082,"name":"string","nodeType":"ElementaryTypeName","src":"3065:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3041:44:14"},"returnParameters":{"id":2085,"nodeType":"ParameterList","parameters":[],"src":"3100:0:14"},"scope":2671,"src":"3021:204:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2127,"nodeType":"Block","src":"3299:70:14","statements":[{"expression":{"arguments":[{"id":2120,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"3326:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"condition":{"id":2121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"3331:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2123,"name":"CBOR_FALSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"3351:10:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3331:30:14","trueExpression":{"id":2122,"name":"CBOR_TRUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"3339:9:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2119,"name":"writeContentFree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"3309:16:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3309:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2126,"nodeType":"ExpressionStatement","src":"3309:53:14"}]},"id":2128,"implemented":true,"kind":"function","modifiers":[],"name":"writeBool","nameLocation":"3240:9:14","nodeType":"FunctionDefinition","parameters":{"id":2117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2114,"mutability":"mutable","name":"buf","nameLocation":"3268:3:14","nodeType":"VariableDeclaration","scope":2128,"src":"3250:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2113,"nodeType":"UserDefinedTypeName","pathNode":{"id":2112,"name":"CBORBuffer","nameLocations":["3250:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"3250:10:14"},"referencedDeclaration":1826,"src":"3250:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2116,"mutability":"mutable","name":"value","nameLocation":"3278:5:14","nodeType":"VariableDeclaration","scope":2128,"src":"3273:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2115,"name":"bool","nodeType":"ElementaryTypeName","src":"3273:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3249:35:14"},"returnParameters":{"id":2118,"nodeType":"ParameterList","parameters":[],"src":"3299:0:14"},"scope":2671,"src":"3231:138:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2139,"nodeType":"Block","src":"3431:49:14","statements":[{"expression":{"arguments":[{"id":2135,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"3458:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2136,"name":"CBOR_NULL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"3463:9:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2134,"name":"writeContentFree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"3441:16:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3441:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2138,"nodeType":"ExpressionStatement","src":"3441:32:14"}]},"id":2140,"implemented":true,"kind":"function","modifiers":[],"name":"writeNull","nameLocation":"3384:9:14","nodeType":"FunctionDefinition","parameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"mutability":"mutable","name":"buf","nameLocation":"3412:3:14","nodeType":"VariableDeclaration","scope":2140,"src":"3394:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2130,"nodeType":"UserDefinedTypeName","pathNode":{"id":2129,"name":"CBORBuffer","nameLocations":["3394:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"3394:10:14"},"referencedDeclaration":1826,"src":"3394:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3393:23:14"},"returnParameters":{"id":2133,"nodeType":"ParameterList","parameters":[],"src":"3431:0:14"},"scope":2671,"src":"3375:105:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2151,"nodeType":"Block","src":"3547:54:14","statements":[{"expression":{"arguments":[{"id":2147,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"3574:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2148,"name":"CBOR_UNDEFINED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"3579:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2146,"name":"writeContentFree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"3557:16:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3557:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2150,"nodeType":"ExpressionStatement","src":"3557:37:14"}]},"id":2152,"implemented":true,"kind":"function","modifiers":[],"name":"writeUndefined","nameLocation":"3495:14:14","nodeType":"FunctionDefinition","parameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"buf","nameLocation":"3528:3:14","nodeType":"VariableDeclaration","scope":2152,"src":"3510:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2142,"nodeType":"UserDefinedTypeName","pathNode":{"id":2141,"name":"CBORBuffer","nameLocations":["3510:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"3510:10:14"},"referencedDeclaration":1826,"src":"3510:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3509:23:14"},"returnParameters":{"id":2145,"nodeType":"ParameterList","parameters":[],"src":"3547:0:14"},"scope":2671,"src":"3486:115:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2169,"nodeType":"Block","src":"3664:89:14","statements":[{"expression":{"arguments":[{"id":2159,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"3700:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2160,"name":"MAJOR_TYPE_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"3705:16:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2158,"name":"writeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"3674:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3674:48:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2162,"nodeType":"ExpressionStatement","src":"3674:48:14"},{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2163,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"3732:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2165,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3736:5:14","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1825,"src":"3732:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3732:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2168,"nodeType":"ExpressionStatement","src":"3732:14:14"}]},"id":2170,"implemented":true,"kind":"function","modifiers":[],"name":"startArray","nameLocation":"3616:10:14","nodeType":"FunctionDefinition","parameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"buf","nameLocation":"3645:3:14","nodeType":"VariableDeclaration","scope":2170,"src":"3627:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2154,"nodeType":"UserDefinedTypeName","pathNode":{"id":2153,"name":"CBORBuffer","nameLocations":["3627:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"3627:10:14"},"referencedDeclaration":1826,"src":"3627:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3626:23:14"},"returnParameters":{"id":2157,"nodeType":"ParameterList","parameters":[],"src":"3664:0:14"},"scope":2671,"src":"3607:146:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2184,"nodeType":"Block","src":"3836:71:14","statements":[{"expression":{"arguments":[{"id":2179,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"3870:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2180,"name":"MAJOR_TYPE_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"3875:16:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2181,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"3893:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2178,"name":"writeDefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"3846:23:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:54:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2183,"nodeType":"ExpressionStatement","src":"3846:54:14"}]},"id":2185,"implemented":true,"kind":"function","modifiers":[],"name":"startFixedArray","nameLocation":"3768:15:14","nodeType":"FunctionDefinition","parameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2173,"mutability":"mutable","name":"buf","nameLocation":"3802:3:14","nodeType":"VariableDeclaration","scope":2185,"src":"3784:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2172,"nodeType":"UserDefinedTypeName","pathNode":{"id":2171,"name":"CBORBuffer","nameLocations":["3784:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"3784:10:14"},"referencedDeclaration":1826,"src":"3784:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2175,"mutability":"mutable","name":"length","nameLocation":"3814:6:14","nodeType":"VariableDeclaration","scope":2185,"src":"3807:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2174,"name":"uint64","nodeType":"ElementaryTypeName","src":"3807:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3783:38:14"},"returnParameters":{"id":2177,"nodeType":"ParameterList","parameters":[],"src":"3836:0:14"},"scope":2671,"src":"3759:148:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2202,"nodeType":"Block","src":"3968:87:14","statements":[{"expression":{"arguments":[{"id":2192,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"4004:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2193,"name":"MAJOR_TYPE_MAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"4009:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2191,"name":"writeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"3978:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3978:46:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2195,"nodeType":"ExpressionStatement","src":"3978:46:14"},{"expression":{"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2196,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"4034:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2198,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4038:5:14","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1825,"src":"4034:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4047:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4034:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2201,"nodeType":"ExpressionStatement","src":"4034:14:14"}]},"id":2203,"implemented":true,"kind":"function","modifiers":[],"name":"startMap","nameLocation":"3922:8:14","nodeType":"FunctionDefinition","parameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2188,"mutability":"mutable","name":"buf","nameLocation":"3949:3:14","nodeType":"VariableDeclaration","scope":2203,"src":"3931:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2187,"nodeType":"UserDefinedTypeName","pathNode":{"id":2186,"name":"CBORBuffer","nameLocations":["3931:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"3931:10:14"},"referencedDeclaration":1826,"src":"3931:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3930:23:14"},"returnParameters":{"id":2190,"nodeType":"ParameterList","parameters":[],"src":"3968:0:14"},"scope":2671,"src":"3913:142:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2217,"nodeType":"Block","src":"4136:69:14","statements":[{"expression":{"arguments":[{"id":2212,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"4170:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2213,"name":"MAJOR_TYPE_MAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"4175:14:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2214,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"4191:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2211,"name":"writeDefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"4146:23:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4146:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2216,"nodeType":"ExpressionStatement","src":"4146:52:14"}]},"id":2218,"implemented":true,"kind":"function","modifiers":[],"name":"startFixedMap","nameLocation":"4070:13:14","nodeType":"FunctionDefinition","parameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"buf","nameLocation":"4102:3:14","nodeType":"VariableDeclaration","scope":2218,"src":"4084:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2205,"nodeType":"UserDefinedTypeName","pathNode":{"id":2204,"name":"CBORBuffer","nameLocations":["4084:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"4084:10:14"},"referencedDeclaration":1826,"src":"4084:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2208,"mutability":"mutable","name":"length","nameLocation":"4114:6:14","nodeType":"VariableDeclaration","scope":2218,"src":"4107:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2207,"name":"uint64","nodeType":"ElementaryTypeName","src":"4107:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4083:38:14"},"returnParameters":{"id":2210,"nodeType":"ParameterList","parameters":[],"src":"4136:0:14"},"scope":2671,"src":"4061:144:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2235,"nodeType":"Block","src":"4269:96:14","statements":[{"expression":{"arguments":[{"id":2225,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"4305:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2226,"name":"MAJOR_TYPE_CONTENT_FREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"4310:23:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2224,"name":"writeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"4279:25:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4279:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2228,"nodeType":"ExpressionStatement","src":"4279:55:14"},{"expression":{"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2229,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"4344:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2231,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4348:5:14","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1825,"src":"4344:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4357:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4344:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2234,"nodeType":"ExpressionStatement","src":"4344:14:14"}]},"id":2236,"implemented":true,"kind":"function","modifiers":[],"name":"endSequence","nameLocation":"4220:11:14","nodeType":"FunctionDefinition","parameters":{"id":2222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2221,"mutability":"mutable","name":"buf","nameLocation":"4250:3:14","nodeType":"VariableDeclaration","scope":2236,"src":"4232:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2220,"nodeType":"UserDefinedTypeName","pathNode":{"id":2219,"name":"CBORBuffer","nameLocations":["4232:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"4232:10:14"},"referencedDeclaration":1826,"src":"4232:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"4231:23:14"},"returnParameters":{"id":2223,"nodeType":"ParameterList","parameters":[],"src":"4269:0:14"},"scope":2671,"src":"4211:154:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2256,"nodeType":"Block","src":"4471:71:14","statements":[{"expression":{"arguments":[{"id":2247,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"4493:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2248,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"4498:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2246,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"4481:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4481:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2250,"nodeType":"ExpressionStatement","src":"4481:21:14"},{"expression":{"arguments":[{"id":2252,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"4524:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2253,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2243,"src":"4529:5:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2251,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"4512:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4512:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2255,"nodeType":"ExpressionStatement","src":"4512:23:14"}]},"id":2257,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVString","nameLocation":"4380:13:14","nodeType":"FunctionDefinition","parameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"mutability":"mutable","name":"buf","nameLocation":"4412:3:14","nodeType":"VariableDeclaration","scope":2257,"src":"4394:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2238,"nodeType":"UserDefinedTypeName","pathNode":{"id":2237,"name":"CBORBuffer","nameLocations":["4394:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"4394:10:14"},"referencedDeclaration":1826,"src":"4394:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2241,"mutability":"mutable","name":"key","nameLocation":"4431:3:14","nodeType":"VariableDeclaration","scope":2257,"src":"4417:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2240,"name":"string","nodeType":"ElementaryTypeName","src":"4417:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2243,"mutability":"mutable","name":"value","nameLocation":"4450:5:14","nodeType":"VariableDeclaration","scope":2257,"src":"4436:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2242,"name":"string","nodeType":"ElementaryTypeName","src":"4436:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4393:63:14"},"returnParameters":{"id":2245,"nodeType":"ParameterList","parameters":[],"src":"4471:0:14"},"scope":2671,"src":"4371:171:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2277,"nodeType":"Block","src":"4646:70:14","statements":[{"expression":{"arguments":[{"id":2268,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"4668:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2269,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"4673:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2267,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"4656:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4656:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2271,"nodeType":"ExpressionStatement","src":"4656:21:14"},{"expression":{"arguments":[{"id":2273,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"4698:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"4703:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2272,"name":"writeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"4687:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4687:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2276,"nodeType":"ExpressionStatement","src":"4687:22:14"}]},"id":2278,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVBytes","nameLocation":"4557:12:14","nodeType":"FunctionDefinition","parameters":{"id":2265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2260,"mutability":"mutable","name":"buf","nameLocation":"4588:3:14","nodeType":"VariableDeclaration","scope":2278,"src":"4570:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2259,"nodeType":"UserDefinedTypeName","pathNode":{"id":2258,"name":"CBORBuffer","nameLocations":["4570:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"4570:10:14"},"referencedDeclaration":1826,"src":"4570:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2262,"mutability":"mutable","name":"key","nameLocation":"4607:3:14","nodeType":"VariableDeclaration","scope":2278,"src":"4593:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2261,"name":"string","nodeType":"ElementaryTypeName","src":"4593:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2264,"mutability":"mutable","name":"value","nameLocation":"4625:5:14","nodeType":"VariableDeclaration","scope":2278,"src":"4612:18:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2263,"name":"bytes","nodeType":"ElementaryTypeName","src":"4612:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4569:62:14"},"returnParameters":{"id":2266,"nodeType":"ParameterList","parameters":[],"src":"4646:0:14"},"scope":2671,"src":"4548:168:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2298,"nodeType":"Block","src":"4817:72:14","statements":[{"expression":{"arguments":[{"id":2289,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"4839:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2290,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"4844:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2288,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"4827:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4827:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2292,"nodeType":"ExpressionStatement","src":"4827:21:14"},{"expression":{"arguments":[{"id":2294,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"4871:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"4876:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2293,"name":"writeUInt256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"4858:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4858:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2297,"nodeType":"ExpressionStatement","src":"4858:24:14"}]},"id":2299,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVUInt256","nameLocation":"4731:14:14","nodeType":"FunctionDefinition","parameters":{"id":2286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"buf","nameLocation":"4764:3:14","nodeType":"VariableDeclaration","scope":2299,"src":"4746:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2280,"nodeType":"UserDefinedTypeName","pathNode":{"id":2279,"name":"CBORBuffer","nameLocations":["4746:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"4746:10:14"},"referencedDeclaration":1826,"src":"4746:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"key","nameLocation":"4783:3:14","nodeType":"VariableDeclaration","scope":2299,"src":"4769:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2282,"name":"string","nodeType":"ElementaryTypeName","src":"4769:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2285,"mutability":"mutable","name":"value","nameLocation":"4796:5:14","nodeType":"VariableDeclaration","scope":2299,"src":"4788:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2284,"name":"uint256","nodeType":"ElementaryTypeName","src":"4788:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4745:57:14"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[],"src":"4817:0:14"},"scope":2671,"src":"4722:167:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2319,"nodeType":"Block","src":"4988:71:14","statements":[{"expression":{"arguments":[{"id":2310,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"5010:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2311,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"5015:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2309,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"4998:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4998:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2313,"nodeType":"ExpressionStatement","src":"4998:21:14"},{"expression":{"arguments":[{"id":2315,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"5041:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"5046:5:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2314,"name":"writeInt256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"5029:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_int256_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,int256) pure"}},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5029:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2318,"nodeType":"ExpressionStatement","src":"5029:23:14"}]},"id":2320,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVInt256","nameLocation":"4904:13:14","nodeType":"FunctionDefinition","parameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2302,"mutability":"mutable","name":"buf","nameLocation":"4936:3:14","nodeType":"VariableDeclaration","scope":2320,"src":"4918:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2301,"nodeType":"UserDefinedTypeName","pathNode":{"id":2300,"name":"CBORBuffer","nameLocations":["4918:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"4918:10:14"},"referencedDeclaration":1826,"src":"4918:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2304,"mutability":"mutable","name":"key","nameLocation":"4955:3:14","nodeType":"VariableDeclaration","scope":2320,"src":"4941:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2303,"name":"string","nodeType":"ElementaryTypeName","src":"4941:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2306,"mutability":"mutable","name":"value","nameLocation":"4967:5:14","nodeType":"VariableDeclaration","scope":2320,"src":"4960:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2305,"name":"int256","nodeType":"ElementaryTypeName","src":"4960:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4917:56:14"},"returnParameters":{"id":2308,"nodeType":"ParameterList","parameters":[],"src":"4988:0:14"},"scope":2671,"src":"4895:164:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2340,"nodeType":"Block","src":"5158:71:14","statements":[{"expression":{"arguments":[{"id":2331,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"5180:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2332,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"5185:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2330,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"5168:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2334,"nodeType":"ExpressionStatement","src":"5168:21:14"},{"expression":{"arguments":[{"id":2336,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"5211:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"5216:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2335,"name":"writeUInt64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"5199:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint64) pure"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5199:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2339,"nodeType":"ExpressionStatement","src":"5199:23:14"}]},"id":2341,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVUInt64","nameLocation":"5074:13:14","nodeType":"FunctionDefinition","parameters":{"id":2328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"buf","nameLocation":"5106:3:14","nodeType":"VariableDeclaration","scope":2341,"src":"5088:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2322,"nodeType":"UserDefinedTypeName","pathNode":{"id":2321,"name":"CBORBuffer","nameLocations":["5088:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"5088:10:14"},"referencedDeclaration":1826,"src":"5088:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2325,"mutability":"mutable","name":"key","nameLocation":"5125:3:14","nodeType":"VariableDeclaration","scope":2341,"src":"5111:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2324,"name":"string","nodeType":"ElementaryTypeName","src":"5111:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2327,"mutability":"mutable","name":"value","nameLocation":"5137:5:14","nodeType":"VariableDeclaration","scope":2341,"src":"5130:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2326,"name":"uint64","nodeType":"ElementaryTypeName","src":"5130:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5087:56:14"},"returnParameters":{"id":2329,"nodeType":"ParameterList","parameters":[],"src":"5158:0:14"},"scope":2671,"src":"5065:164:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2361,"nodeType":"Block","src":"5326:70:14","statements":[{"expression":{"arguments":[{"id":2352,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"5348:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2353,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2346,"src":"5353:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2351,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"5336:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5336:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2355,"nodeType":"ExpressionStatement","src":"5336:21:14"},{"expression":{"arguments":[{"id":2357,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"5378:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"5383:5:14","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_int64","typeString":"int64"}],"id":2356,"name":"writeInt64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"5367:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_int64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,int64) pure"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5367:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2360,"nodeType":"ExpressionStatement","src":"5367:22:14"}]},"id":2362,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVInt64","nameLocation":"5244:12:14","nodeType":"FunctionDefinition","parameters":{"id":2349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2344,"mutability":"mutable","name":"buf","nameLocation":"5275:3:14","nodeType":"VariableDeclaration","scope":2362,"src":"5257:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2343,"nodeType":"UserDefinedTypeName","pathNode":{"id":2342,"name":"CBORBuffer","nameLocations":["5257:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"5257:10:14"},"referencedDeclaration":1826,"src":"5257:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2346,"mutability":"mutable","name":"key","nameLocation":"5294:3:14","nodeType":"VariableDeclaration","scope":2362,"src":"5280:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2345,"name":"string","nodeType":"ElementaryTypeName","src":"5280:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2348,"mutability":"mutable","name":"value","nameLocation":"5305:5:14","nodeType":"VariableDeclaration","scope":2362,"src":"5299:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":2347,"name":"int64","nodeType":"ElementaryTypeName","src":"5299:5:14","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"5256:55:14"},"returnParameters":{"id":2350,"nodeType":"ParameterList","parameters":[],"src":"5326:0:14"},"scope":2671,"src":"5235:161:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2382,"nodeType":"Block","src":"5491:69:14","statements":[{"expression":{"arguments":[{"id":2373,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"5513:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2374,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"5518:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2372,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"5501:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5501:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2376,"nodeType":"ExpressionStatement","src":"5501:21:14"},{"expression":{"arguments":[{"id":2378,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"5542:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2369,"src":"5547:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2377,"name":"writeBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"5532:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_bool_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bool) pure"}},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5532:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2381,"nodeType":"ExpressionStatement","src":"5532:21:14"}]},"id":2383,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVBool","nameLocation":"5411:11:14","nodeType":"FunctionDefinition","parameters":{"id":2370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2365,"mutability":"mutable","name":"buf","nameLocation":"5441:3:14","nodeType":"VariableDeclaration","scope":2383,"src":"5423:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2364,"nodeType":"UserDefinedTypeName","pathNode":{"id":2363,"name":"CBORBuffer","nameLocations":["5423:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"5423:10:14"},"referencedDeclaration":1826,"src":"5423:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2367,"mutability":"mutable","name":"key","nameLocation":"5460:3:14","nodeType":"VariableDeclaration","scope":2383,"src":"5446:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2366,"name":"string","nodeType":"ElementaryTypeName","src":"5446:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2369,"mutability":"mutable","name":"value","nameLocation":"5470:5:14","nodeType":"VariableDeclaration","scope":2383,"src":"5465:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2368,"name":"bool","nodeType":"ElementaryTypeName","src":"5465:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5422:54:14"},"returnParameters":{"id":2371,"nodeType":"ParameterList","parameters":[],"src":"5491:0:14"},"scope":2671,"src":"5402:158:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2400,"nodeType":"Block","src":"5643:62:14","statements":[{"expression":{"arguments":[{"id":2392,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"5665:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2393,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"5670:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2391,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"5653:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5653:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2395,"nodeType":"ExpressionStatement","src":"5653:21:14"},{"expression":{"arguments":[{"id":2397,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"5694:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":2396,"name":"writeNull","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"5684:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5684:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2399,"nodeType":"ExpressionStatement","src":"5684:14:14"}]},"id":2401,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVNull","nameLocation":"5575:11:14","nodeType":"FunctionDefinition","parameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"buf","nameLocation":"5605:3:14","nodeType":"VariableDeclaration","scope":2401,"src":"5587:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2385,"nodeType":"UserDefinedTypeName","pathNode":{"id":2384,"name":"CBORBuffer","nameLocations":["5587:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"5587:10:14"},"referencedDeclaration":1826,"src":"5587:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2388,"mutability":"mutable","name":"key","nameLocation":"5624:3:14","nodeType":"VariableDeclaration","scope":2401,"src":"5610:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2387,"name":"string","nodeType":"ElementaryTypeName","src":"5610:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5586:42:14"},"returnParameters":{"id":2390,"nodeType":"ParameterList","parameters":[],"src":"5643:0:14"},"scope":2671,"src":"5566:139:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2418,"nodeType":"Block","src":"5793:67:14","statements":[{"expression":{"arguments":[{"id":2410,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"5815:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2411,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"5820:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2409,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"5803:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5803:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2413,"nodeType":"ExpressionStatement","src":"5803:21:14"},{"expression":{"arguments":[{"id":2415,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"5849:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":2414,"name":"writeUndefined","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"5834:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5834:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2417,"nodeType":"ExpressionStatement","src":"5834:19:14"}]},"id":2419,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVUndefined","nameLocation":"5720:16:14","nodeType":"FunctionDefinition","parameters":{"id":2407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"buf","nameLocation":"5755:3:14","nodeType":"VariableDeclaration","scope":2419,"src":"5737:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2403,"nodeType":"UserDefinedTypeName","pathNode":{"id":2402,"name":"CBORBuffer","nameLocations":["5737:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"5737:10:14"},"referencedDeclaration":1826,"src":"5737:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2406,"mutability":"mutable","name":"key","nameLocation":"5774:3:14","nodeType":"VariableDeclaration","scope":2419,"src":"5760:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2405,"name":"string","nodeType":"ElementaryTypeName","src":"5760:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5736:42:14"},"returnParameters":{"id":2408,"nodeType":"ParameterList","parameters":[],"src":"5793:0:14"},"scope":2671,"src":"5711:149:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2436,"nodeType":"Block","src":"5942:61:14","statements":[{"expression":{"arguments":[{"id":2428,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"5964:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2429,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"5969:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2427,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"5952:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5952:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2431,"nodeType":"ExpressionStatement","src":"5952:21:14"},{"expression":{"arguments":[{"id":2433,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"5992:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":2432,"name":"startMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"5983:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5983:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2435,"nodeType":"ExpressionStatement","src":"5983:13:14"}]},"id":2437,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVMap","nameLocation":"5875:10:14","nodeType":"FunctionDefinition","parameters":{"id":2425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2422,"mutability":"mutable","name":"buf","nameLocation":"5904:3:14","nodeType":"VariableDeclaration","scope":2437,"src":"5886:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2421,"nodeType":"UserDefinedTypeName","pathNode":{"id":2420,"name":"CBORBuffer","nameLocations":["5886:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"5886:10:14"},"referencedDeclaration":1826,"src":"5886:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2424,"mutability":"mutable","name":"key","nameLocation":"5923:3:14","nodeType":"VariableDeclaration","scope":2437,"src":"5909:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2423,"name":"string","nodeType":"ElementaryTypeName","src":"5909:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5885:42:14"},"returnParameters":{"id":2426,"nodeType":"ParameterList","parameters":[],"src":"5942:0:14"},"scope":2671,"src":"5866:137:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2454,"nodeType":"Block","src":"6087:63:14","statements":[{"expression":{"arguments":[{"id":2446,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"6109:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2447,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"6114:3:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2445,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"6097:11:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6097:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2449,"nodeType":"ExpressionStatement","src":"6097:21:14"},{"expression":{"arguments":[{"id":2451,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"6139:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":2450,"name":"startArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"6128:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:15:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2453,"nodeType":"ExpressionStatement","src":"6128:15:14"}]},"id":2455,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVArray","nameLocation":"6018:12:14","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2440,"mutability":"mutable","name":"buf","nameLocation":"6049:3:14","nodeType":"VariableDeclaration","scope":2455,"src":"6031:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2439,"nodeType":"UserDefinedTypeName","pathNode":{"id":2438,"name":"CBORBuffer","nameLocations":["6031:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"6031:10:14"},"referencedDeclaration":1826,"src":"6031:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"key","nameLocation":"6068:3:14","nodeType":"VariableDeclaration","scope":2455,"src":"6054:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2441,"name":"string","nodeType":"ElementaryTypeName","src":"6054:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6030:42:14"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[],"src":"6087:0:14"},"scope":2671,"src":"6009:141:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2602,"nodeType":"Block","src":"6276:639:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6290:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3233","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6299:2:14","typeDescriptions":{"typeIdentifier":"t_rational_23_by_1","typeString":"int_const 23"},"value":"23"},"src":"6290:11:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6386:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646","id":2486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6395:4:14","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"6386:13:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6522:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"307846464646","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6531:6:14","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xFFFF"},"src":"6522:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6660:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646464646464646","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6669:10:14","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xFFFFFFFF"},"src":"6660:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2597,"nodeType":"Block","src":"6798:111:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2579,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"6839:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6848:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6839:10:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2582,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6838:12:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3237","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6853:2:14","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"6838:17:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6832:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2577,"name":"uint8","nodeType":"ElementaryTypeName","src":"6832:5:14","typeDescriptions":{}}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2572,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6812:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6816:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6812:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2576,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6820:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"6812:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6812:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2587,"nodeType":"ExpressionStatement","src":"6812:45:14"},{"expression":{"arguments":[{"id":2593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6889:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"38","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6896:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"}],"expression":{"expression":{"id":2588,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6871:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2591,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6875:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6871:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2592,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6879:9:14","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1811,"src":"6871:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6871:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2596,"nodeType":"ExpressionStatement","src":"6871:27:14"}]},"id":2598,"nodeType":"IfStatement","src":"6656:253:14","trueBody":{"id":2571,"nodeType":"Block","src":"6681:111:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2553,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"6722:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6731:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6722:10:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2556,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6721:12:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3236","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6736:2:14","typeDescriptions":{"typeIdentifier":"t_rational_26_by_1","typeString":"int_const 26"},"value":"26"},"src":"6721:17:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6715:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2551,"name":"uint8","nodeType":"ElementaryTypeName","src":"6715:5:14","typeDescriptions":{}}},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6715:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2546,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6695:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6699:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6695:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2550,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6703:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"6695:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6695:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2561,"nodeType":"ExpressionStatement","src":"6695:45:14"},{"expression":{"arguments":[{"id":2567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6772:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"34","id":2568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6779:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"expression":{"id":2562,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6754:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2565,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6758:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6754:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2566,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6762:9:14","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1811,"src":"6754:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6754:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2570,"nodeType":"ExpressionStatement","src":"6754:27:14"}]}},"id":2599,"nodeType":"IfStatement","src":"6518:391:14","trueBody":{"id":2542,"nodeType":"Block","src":"6539:111:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2524,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"6580:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6589:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6580:10:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2527,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6579:12:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3235","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:2:14","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"src":"6579:17:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6573:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2522,"name":"uint8","nodeType":"ElementaryTypeName","src":"6573:5:14","typeDescriptions":{}}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6573:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2517,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6553:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2520,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6557:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6553:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2521,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6561:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"6553:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6553:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2532,"nodeType":"ExpressionStatement","src":"6553:45:14"},{"expression":{"arguments":[{"id":2538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6630:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"32","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6637:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"expression":{"id":2533,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6612:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6616:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6612:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6620:9:14","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1811,"src":"6612:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2541,"nodeType":"ExpressionStatement","src":"6612:27:14"}]}},"id":2600,"nodeType":"IfStatement","src":"6382:527:14","trueBody":{"id":2513,"nodeType":"Block","src":"6401:111:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"6442:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6451:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6442:10:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2498,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6441:12:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3234","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6456:2:14","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"6441:17:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6435:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2493,"name":"uint8","nodeType":"ElementaryTypeName","src":"6435:5:14","typeDescriptions":{}}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6435:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2488,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6415:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6419:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6415:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6423:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"6415:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6415:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2503,"nodeType":"ExpressionStatement","src":"6415:45:14"},{"expression":{"arguments":[{"id":2509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6492:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"31","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6499:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"expression":{"id":2504,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6474:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2507,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6478:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6474:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2508,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6482:9:14","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1811,"src":"6474:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6474:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2512,"nodeType":"ExpressionStatement","src":"6474:27:14"}]}},"id":2601,"nodeType":"IfStatement","src":"6286:623:14","trueBody":{"id":2484,"nodeType":"Block","src":"6303:73:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2475,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"6344:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6353:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6344:10:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2478,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6343:12:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"6358:5:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6343:20:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6337:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2473,"name":"uint8","nodeType":"ElementaryTypeName","src":"6337:5:14","typeDescriptions":{}}},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6337:27:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2468,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6317:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2471,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6321:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"6317:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2472,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6325:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"6317:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:48:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2483,"nodeType":"ExpressionStatement","src":"6317:48:14"}]}}]},"id":2603,"implemented":true,"kind":"function","modifiers":[],"name":"writeFixedNumeric","nameLocation":"6165:17:14","nodeType":"FunctionDefinition","parameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2458,"mutability":"mutable","name":"buf","nameLocation":"6210:3:14","nodeType":"VariableDeclaration","scope":2603,"src":"6192:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2457,"nodeType":"UserDefinedTypeName","pathNode":{"id":2456,"name":"CBORBuffer","nameLocations":["6192:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"6192:10:14"},"referencedDeclaration":1826,"src":"6192:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2460,"mutability":"mutable","name":"major","nameLocation":"6229:5:14","nodeType":"VariableDeclaration","scope":2603,"src":"6223:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2459,"name":"uint8","nodeType":"ElementaryTypeName","src":"6223:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2462,"mutability":"mutable","name":"value","nameLocation":"6251:5:14","nodeType":"VariableDeclaration","scope":2603,"src":"6244:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2461,"name":"uint64","nodeType":"ElementaryTypeName","src":"6244:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6182:80:14"},"returnParameters":{"id":2464,"nodeType":"ParameterList","parameters":[],"src":"6276:0:14"},"scope":2671,"src":"6156:759:14","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2627,"nodeType":"Block","src":"7025:62:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2618,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"7062:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7071:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"7062:10:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2621,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7061:12:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3331","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7076:2:14","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"7061:17:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7055:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2616,"name":"uint8","nodeType":"ElementaryTypeName","src":"7055:5:14","typeDescriptions":{}}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7055:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2611,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"7035:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2614,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7039:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"7035:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2615,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7043:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"7035:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7035:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2626,"nodeType":"ExpressionStatement","src":"7035:45:14"}]},"id":2628,"implemented":true,"kind":"function","modifiers":[],"name":"writeIndefiniteLengthType","nameLocation":"6930:25:14","nodeType":"FunctionDefinition","parameters":{"id":2609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2606,"mutability":"mutable","name":"buf","nameLocation":"6974:3:14","nodeType":"VariableDeclaration","scope":2628,"src":"6956:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2605,"nodeType":"UserDefinedTypeName","pathNode":{"id":2604,"name":"CBORBuffer","nameLocations":["6956:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"6956:10:14"},"referencedDeclaration":1826,"src":"6956:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2608,"mutability":"mutable","name":"major","nameLocation":"6985:5:14","nodeType":"VariableDeclaration","scope":2628,"src":"6979:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2607,"name":"uint8","nodeType":"ElementaryTypeName","src":"6979:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6955:36:14"},"returnParameters":{"id":2610,"nodeType":"ParameterList","parameters":[],"src":"7025:0:14"},"scope":2671,"src":"6921:166:14","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2644,"nodeType":"Block","src":"7210:54:14","statements":[{"expression":{"arguments":[{"id":2639,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"7238:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2640,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"7243:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2641,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"7250:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2638,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"7220:17:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1826_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7220:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2643,"nodeType":"ExpressionStatement","src":"7220:37:14"}]},"id":2645,"implemented":true,"kind":"function","modifiers":[],"name":"writeDefiniteLengthType","nameLocation":"7102:23:14","nodeType":"FunctionDefinition","parameters":{"id":2636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2631,"mutability":"mutable","name":"buf","nameLocation":"7144:3:14","nodeType":"VariableDeclaration","scope":2645,"src":"7126:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2630,"nodeType":"UserDefinedTypeName","pathNode":{"id":2629,"name":"CBORBuffer","nameLocations":["7126:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"7126:10:14"},"referencedDeclaration":1826,"src":"7126:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2633,"mutability":"mutable","name":"major","nameLocation":"7155:5:14","nodeType":"VariableDeclaration","scope":2645,"src":"7149:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2632,"name":"uint8","nodeType":"ElementaryTypeName","src":"7149:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2635,"mutability":"mutable","name":"length","nameLocation":"7169:6:14","nodeType":"VariableDeclaration","scope":2645,"src":"7162:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2634,"name":"uint64","nodeType":"ElementaryTypeName","src":"7162:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7125:51:14"},"returnParameters":{"id":2637,"nodeType":"ParameterList","parameters":[],"src":"7210:0:14"},"scope":2671,"src":"7093:171:14","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2669,"nodeType":"Block","src":"7345:83:14","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2660,"name":"MAJOR_TYPE_CONTENT_FREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"7382:23:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7409:1:14","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"7382:28:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2663,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7381:30:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7414:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7381:38:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7375:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2658,"name":"uint8","nodeType":"ElementaryTypeName","src":"7375:5:14","typeDescriptions":{}}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:45:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2653,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"7355:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7359:3:14","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"7355:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2657,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7363:11:14","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"7355:19:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$1399_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$1399_memory_ptr_$attached_to$_t_struct$_buffer_$1399_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:66:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$1399_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2668,"nodeType":"ExpressionStatement","src":"7355:66:14"}]},"id":2670,"implemented":true,"kind":"function","modifiers":[],"name":"writeContentFree","nameLocation":"7279:16:14","nodeType":"FunctionDefinition","parameters":{"id":2651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2648,"mutability":"mutable","name":"buf","nameLocation":"7314:3:14","nodeType":"VariableDeclaration","scope":2670,"src":"7296:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2647,"nodeType":"UserDefinedTypeName","pathNode":{"id":2646,"name":"CBORBuffer","nameLocations":["7296:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":1826,"src":"7296:10:14"},"referencedDeclaration":1826,"src":"7296:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1826_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2650,"mutability":"mutable","name":"value","nameLocation":"7325:5:14","nodeType":"VariableDeclaration","scope":2670,"src":"7319:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2649,"name":"uint8","nodeType":"ElementaryTypeName","src":"7319:5:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"7295:36:14"},"returnParameters":{"id":2652,"nodeType":"ParameterList","parameters":[],"src":"7345:0:14"},"scope":2671,"src":"7270:158:14","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2672,"src":"666:6764:14","usedErrors":[],"usedEvents":[]}],"src":"32:7398:14"},"id":14},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[2808],"IERC20Errors":[2713],"IERC721Errors":[2761]},"id":2809,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2673,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2674,"nodeType":"StructuredDocumentation","src":"138:139:15","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":2713,"linearizedBaseContracts":[2713],"name":"IERC20Errors","nameLocation":"288:12:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2675,"nodeType":"StructuredDocumentation","src":"307:309:15","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":2683,"name":"ERC20InsufficientBalance","nameLocation":"627:24:15","nodeType":"ErrorDefinition","parameters":{"id":2682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2677,"mutability":"mutable","name":"sender","nameLocation":"660:6:15","nodeType":"VariableDeclaration","scope":2683,"src":"652:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2676,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2679,"mutability":"mutable","name":"balance","nameLocation":"676:7:15","nodeType":"VariableDeclaration","scope":2683,"src":"668:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2678,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2681,"mutability":"mutable","name":"needed","nameLocation":"693:6:15","nodeType":"VariableDeclaration","scope":2683,"src":"685:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2680,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:15"},"src":"621:80:15"},{"documentation":{"id":2684,"nodeType":"StructuredDocumentation","src":"707:152:15","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":2688,"name":"ERC20InvalidSender","nameLocation":"870:18:15","nodeType":"ErrorDefinition","parameters":{"id":2687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2686,"mutability":"mutable","name":"sender","nameLocation":"897:6:15","nodeType":"VariableDeclaration","scope":2688,"src":"889:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2685,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:15"},"src":"864:41:15"},{"documentation":{"id":2689,"nodeType":"StructuredDocumentation","src":"911:159:15","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":2693,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:15","nodeType":"ErrorDefinition","parameters":{"id":2692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2691,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:15","nodeType":"VariableDeclaration","scope":2693,"src":"1102:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2690,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:15"},"src":"1075:45:15"},{"documentation":{"id":2694,"nodeType":"StructuredDocumentation","src":"1126:345:15","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":2702,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:15","nodeType":"ErrorDefinition","parameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2696,"mutability":"mutable","name":"spender","nameLocation":"1517:7:15","nodeType":"VariableDeclaration","scope":2702,"src":"1509:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2695,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2698,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:15","nodeType":"VariableDeclaration","scope":2702,"src":"1526:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2697,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2700,"mutability":"mutable","name":"needed","nameLocation":"1553:6:15","nodeType":"VariableDeclaration","scope":2702,"src":"1545:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2699,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:15"},"src":"1476:85:15"},{"documentation":{"id":2703,"nodeType":"StructuredDocumentation","src":"1567:174:15","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":2707,"name":"ERC20InvalidApprover","nameLocation":"1752:20:15","nodeType":"ErrorDefinition","parameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"approver","nameLocation":"1781:8:15","nodeType":"VariableDeclaration","scope":2707,"src":"1773:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2704,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:15"},"src":"1746:45:15"},{"documentation":{"id":2708,"nodeType":"StructuredDocumentation","src":"1797:195:15","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":2712,"name":"ERC20InvalidSpender","nameLocation":"2003:19:15","nodeType":"ErrorDefinition","parameters":{"id":2711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2710,"mutability":"mutable","name":"spender","nameLocation":"2031:7:15","nodeType":"VariableDeclaration","scope":2712,"src":"2023:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2709,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:15"},"src":"1997:43:15"}],"scope":2809,"src":"278:1764:15","usedErrors":[2683,2688,2693,2702,2707,2712],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2714,"nodeType":"StructuredDocumentation","src":"2044:141:15","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":2761,"linearizedBaseContracts":[2761],"name":"IERC721Errors","nameLocation":"2196:13:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2715,"nodeType":"StructuredDocumentation","src":"2216:219:15","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":2719,"name":"ERC721InvalidOwner","nameLocation":"2446:18:15","nodeType":"ErrorDefinition","parameters":{"id":2718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2717,"mutability":"mutable","name":"owner","nameLocation":"2473:5:15","nodeType":"VariableDeclaration","scope":2719,"src":"2465:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2716,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:15"},"src":"2440:40:15"},{"documentation":{"id":2720,"nodeType":"StructuredDocumentation","src":"2486:132:15","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":2724,"name":"ERC721NonexistentToken","nameLocation":"2629:22:15","nodeType":"ErrorDefinition","parameters":{"id":2723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2722,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:15","nodeType":"VariableDeclaration","scope":2724,"src":"2652:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2721,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:15"},"src":"2623:46:15"},{"documentation":{"id":2725,"nodeType":"StructuredDocumentation","src":"2675:289:15","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":2733,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:15","nodeType":"ErrorDefinition","parameters":{"id":2732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2727,"mutability":"mutable","name":"sender","nameLocation":"3004:6:15","nodeType":"VariableDeclaration","scope":2733,"src":"2996:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2726,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2729,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:15","nodeType":"VariableDeclaration","scope":2733,"src":"3012:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2728,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2731,"mutability":"mutable","name":"owner","nameLocation":"3037:5:15","nodeType":"VariableDeclaration","scope":2733,"src":"3029:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2730,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:15"},"src":"2969:75:15"},{"documentation":{"id":2734,"nodeType":"StructuredDocumentation","src":"3050:152:15","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":2738,"name":"ERC721InvalidSender","nameLocation":"3213:19:15","nodeType":"ErrorDefinition","parameters":{"id":2737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"sender","nameLocation":"3241:6:15","nodeType":"VariableDeclaration","scope":2738,"src":"3233:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2735,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:15"},"src":"3207:42:15"},{"documentation":{"id":2739,"nodeType":"StructuredDocumentation","src":"3255:159:15","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":2743,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:15","nodeType":"ErrorDefinition","parameters":{"id":2742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2741,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:15","nodeType":"VariableDeclaration","scope":2743,"src":"3447:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2740,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:15"},"src":"3419:46:15"},{"documentation":{"id":2744,"nodeType":"StructuredDocumentation","src":"3471:247:15","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":2750,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:15","nodeType":"ErrorDefinition","parameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2746,"mutability":"mutable","name":"operator","nameLocation":"3764:8:15","nodeType":"VariableDeclaration","scope":2750,"src":"3756:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2745,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2748,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:15","nodeType":"VariableDeclaration","scope":2750,"src":"3774:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:15"},"src":"3723:68:15"},{"documentation":{"id":2751,"nodeType":"StructuredDocumentation","src":"3797:174:15","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":2755,"name":"ERC721InvalidApprover","nameLocation":"3982:21:15","nodeType":"ErrorDefinition","parameters":{"id":2754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"approver","nameLocation":"4012:8:15","nodeType":"VariableDeclaration","scope":2755,"src":"4004:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2752,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:15"},"src":"3976:46:15"},{"documentation":{"id":2756,"nodeType":"StructuredDocumentation","src":"4028:197:15","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":2760,"name":"ERC721InvalidOperator","nameLocation":"4236:21:15","nodeType":"ErrorDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"operator","nameLocation":"4266:8:15","nodeType":"VariableDeclaration","scope":2760,"src":"4258:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2757,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:15"},"src":"4230:46:15"}],"scope":2809,"src":"2186:2092:15","usedErrors":[2719,2724,2733,2738,2743,2750,2755,2760],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2762,"nodeType":"StructuredDocumentation","src":"4280:143:15","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":2808,"linearizedBaseContracts":[2808],"name":"IERC1155Errors","nameLocation":"4434:14:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2763,"nodeType":"StructuredDocumentation","src":"4455:361:15","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":2773,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:15","nodeType":"ErrorDefinition","parameters":{"id":2772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2765,"mutability":"mutable","name":"sender","nameLocation":"4862:6:15","nodeType":"VariableDeclaration","scope":2773,"src":"4854:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2764,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2767,"mutability":"mutable","name":"balance","nameLocation":"4878:7:15","nodeType":"VariableDeclaration","scope":2773,"src":"4870:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2769,"mutability":"mutable","name":"needed","nameLocation":"4895:6:15","nodeType":"VariableDeclaration","scope":2773,"src":"4887:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2768,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2771,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:15","nodeType":"VariableDeclaration","scope":2773,"src":"4903:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2770,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:15"},"src":"4821:99:15"},{"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"4926:152:15","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":2778,"name":"ERC1155InvalidSender","nameLocation":"5089:20:15","nodeType":"ErrorDefinition","parameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"sender","nameLocation":"5118:6:15","nodeType":"VariableDeclaration","scope":2778,"src":"5110:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2775,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:15"},"src":"5083:43:15"},{"documentation":{"id":2779,"nodeType":"StructuredDocumentation","src":"5132:159:15","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":2783,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:15","nodeType":"ErrorDefinition","parameters":{"id":2782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2781,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:15","nodeType":"VariableDeclaration","scope":2783,"src":"5325:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2780,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:15"},"src":"5296:47:15"},{"documentation":{"id":2784,"nodeType":"StructuredDocumentation","src":"5349:256:15","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":2790,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:15","nodeType":"ErrorDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2786,"mutability":"mutable","name":"operator","nameLocation":"5653:8:15","nodeType":"VariableDeclaration","scope":2790,"src":"5645:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2785,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"owner","nameLocation":"5671:5:15","nodeType":"VariableDeclaration","scope":2790,"src":"5663:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2787,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:15"},"src":"5610:68:15"},{"documentation":{"id":2791,"nodeType":"StructuredDocumentation","src":"5684:174:15","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":2795,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:15","nodeType":"ErrorDefinition","parameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2793,"mutability":"mutable","name":"approver","nameLocation":"5900:8:15","nodeType":"VariableDeclaration","scope":2795,"src":"5892:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2792,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:15"},"src":"5863:47:15"},{"documentation":{"id":2796,"nodeType":"StructuredDocumentation","src":"5916:197:15","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":2800,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:15","nodeType":"ErrorDefinition","parameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2798,"mutability":"mutable","name":"operator","nameLocation":"6155:8:15","nodeType":"VariableDeclaration","scope":2800,"src":"6147:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2797,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:15"},"src":"6118:47:15"},{"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"6171:280:15","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":2807,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:15","nodeType":"ErrorDefinition","parameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2803,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:15","nodeType":"VariableDeclaration","scope":2807,"src":"6488:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2805,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:15","nodeType":"VariableDeclaration","scope":2807,"src":"6507:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2804,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:15"},"src":"6456:73:15"}],"scope":2809,"src":"4424:2107:15","usedErrors":[2773,2778,2783,2790,2795,2800,2807],"usedEvents":[]}],"src":"112:6420:15"},"id":15},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[4002],"ERC165":[4281],"ERC721":[3817],"IERC165":[4293],"IERC721":[3934],"IERC721Errors":[2761],"IERC721Metadata":[3980],"IERC721Receiver":[3952],"Strings":[4257]},"id":3818,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2810,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":2812,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3818,"sourceUnit":3935,"src":"133:38:16","symbolAliases":[{"foreign":{"id":2811,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"141:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":2814,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3818,"sourceUnit":3953,"src":"172:54:16","symbolAliases":[{"foreign":{"id":2813,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"180:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":2816,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3818,"sourceUnit":3981,"src":"227:65:16","symbolAliases":[{"foreign":{"id":2815,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"235:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":2818,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3818,"sourceUnit":4003,"src":"293:48:16","symbolAliases":[{"foreign":{"id":2817,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"301:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":2820,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3818,"sourceUnit":4258,"src":"342:48:16","symbolAliases":[{"foreign":{"id":2819,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"350:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":2823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3818,"sourceUnit":4282,"src":"391:69:16","symbolAliases":[{"foreign":{"id":2821,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"399:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2822,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"408:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":2825,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3818,"sourceUnit":2809,"src":"461:66:16","symbolAliases":[{"foreign":{"id":2824,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"469:13:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2827,"name":"Context","nameLocations":["804:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":4002,"src":"804:7:16"},"id":2828,"nodeType":"InheritanceSpecifier","src":"804:7:16"},{"baseName":{"id":2829,"name":"ERC165","nameLocations":["813:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":4281,"src":"813:6:16"},"id":2830,"nodeType":"InheritanceSpecifier","src":"813:6:16"},{"baseName":{"id":2831,"name":"IERC721","nameLocations":["821:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":3934,"src":"821:7:16"},"id":2832,"nodeType":"InheritanceSpecifier","src":"821:7:16"},{"baseName":{"id":2833,"name":"IERC721Metadata","nameLocations":["830:15:16"],"nodeType":"IdentifierPath","referencedDeclaration":3980,"src":"830:15:16"},"id":2834,"nodeType":"InheritanceSpecifier","src":"830:15:16"},{"baseName":{"id":2835,"name":"IERC721Errors","nameLocations":["847:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":2761,"src":"847:13:16"},"id":2836,"nodeType":"InheritanceSpecifier","src":"847:13:16"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"529:246:16","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":3817,"linearizedBaseContracts":[3817,2761,3980,3934,4281,4293,4002],"name":"ERC721","nameLocation":"794:6:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2839,"libraryName":{"id":2837,"name":"Strings","nameLocations":["873:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":4257,"src":"873:7:16"},"nodeType":"UsingForDirective","src":"867:26:16","typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":2841,"mutability":"mutable","name":"_name","nameLocation":"932:5:16","nodeType":"VariableDeclaration","scope":3817,"src":"917:20:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2840,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2843,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:16","nodeType":"VariableDeclaration","scope":3817,"src":"964:22:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2842,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2847,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:16","nodeType":"VariableDeclaration","scope":3817,"src":"993:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2846,"keyName":"tokenId","keyNameLocation":"1009:7:16","keyType":{"id":2844,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2845,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2851,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:16","nodeType":"VariableDeclaration","scope":3817,"src":"1051:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2850,"keyName":"owner","keyNameLocation":"1067:5:16","keyType":{"id":2848,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2855,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:16","nodeType":"VariableDeclaration","scope":3817,"src":"1109:59:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2854,"keyName":"tokenId","keyNameLocation":"1125:7:16","keyType":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2853,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2861,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:16","nodeType":"VariableDeclaration","scope":3817,"src":"1175:86:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":2860,"keyName":"owner","keyNameLocation":"1191:5:16","keyType":{"id":2856,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2859,"keyName":"operator","keyNameLocation":"1216:8:16","keyType":{"id":2857,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2858,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":2877,"nodeType":"Block","src":"1437:57:16","statements":[{"expression":{"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2869,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"1447:5:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2870,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"1455:5:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2872,"nodeType":"ExpressionStatement","src":"1447:13:16"},{"expression":{"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2873,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"1470:7:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2874,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"1480:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2876,"nodeType":"ExpressionStatement","src":"1470:17:16"}]},"documentation":{"id":2862,"nodeType":"StructuredDocumentation","src":"1268:108:16","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":2878,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2864,"mutability":"mutable","name":"name_","nameLocation":"1407:5:16","nodeType":"VariableDeclaration","scope":2878,"src":"1393:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2863,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:16","nodeType":"VariableDeclaration","scope":2878,"src":"1414:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2865,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:16"},"returnParameters":{"id":2868,"nodeType":"ParameterList","parameters":[],"src":"1437:0:16"},"scope":3817,"src":"1381:113:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4280,4292],"body":{"id":2908,"nodeType":"Block","src":"1669:192:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2889,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"1698:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2891,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"1718:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$3934_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$3934_$","typeString":"type(contract IERC721)"}],"id":2890,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1713:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$3934","typeString":"type(contract IERC721)"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2895,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"1754:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2897,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"1774:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$3980_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$3980_$","typeString":"type(contract IERC721Metadata)"}],"id":2896,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1769:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$3980","typeString":"type(contract IERC721Metadata)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2904,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"1842:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2902,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1818:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$3817_$","typeString":"type(contract super ERC721)"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:16","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":4280,"src":"1818:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2888,"id":2907,"nodeType":"Return","src":"1679:175:16"}]},"documentation":{"id":2879,"nodeType":"StructuredDocumentation","src":"1500:56:16","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2909,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:16","nodeType":"FunctionDefinition","overrides":{"id":2885,"nodeType":"OverrideSpecifier","overrides":[{"id":2883,"name":"ERC165","nameLocations":["1637:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":4281,"src":"1637:6:16"},{"id":2884,"name":"IERC165","nameLocations":["1645:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":4293,"src":"1645:7:16"}],"src":"1628:25:16"},"parameters":{"id":2882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2881,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:16","nodeType":"VariableDeclaration","scope":2909,"src":"1588:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2880,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:16"},"returnParameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2909,"src":"1663:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2886,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:16"},"scope":3817,"src":"1561:300:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3859],"body":{"id":2936,"nodeType":"Block","src":"1992:136:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"2006:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2918,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:16","typeDescriptions":{}}},"id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2931,"nodeType":"IfStatement","src":"2002:87:16","trueBody":{"id":2930,"nodeType":"Block","src":"2027:62:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2924,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:16","typeDescriptions":{}}},"id":2927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2923,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"2048:18:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2929,"nodeType":"RevertStatement","src":"2041:37:16"}]}},{"expression":{"baseExpression":{"id":2932,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"2105:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2934,"indexExpression":{"id":2933,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"2115:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2916,"id":2935,"nodeType":"Return","src":"2098:23:16"}]},"documentation":{"id":2910,"nodeType":"StructuredDocumentation","src":"1867:48:16","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":2937,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:16","nodeType":"FunctionDefinition","parameters":{"id":2913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2912,"mutability":"mutable","name":"owner","nameLocation":"1947:5:16","nodeType":"VariableDeclaration","scope":2937,"src":"1939:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2911,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:16"},"returnParameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2937,"src":"1983:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2914,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:16"},"scope":3817,"src":"1920:208:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3867],"body":{"id":2949,"nodeType":"Block","src":"2257:46:16","statements":[{"expression":{"arguments":[{"id":2946,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"2288:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2945,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"2274:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2944,"id":2948,"nodeType":"Return","src":"2267:29:16"}]},"documentation":{"id":2938,"nodeType":"StructuredDocumentation","src":"2134:46:16","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":2950,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:16","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:16","nodeType":"VariableDeclaration","scope":2950,"src":"2202:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:16"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2950,"src":"2248:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2942,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:16"},"scope":3817,"src":"2185:118:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3965],"body":{"id":2958,"nodeType":"Block","src":"2425:29:16","statements":[{"expression":{"id":2956,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"2442:5:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2955,"id":2957,"nodeType":"Return","src":"2435:12:16"}]},"documentation":{"id":2951,"nodeType":"StructuredDocumentation","src":"2309:51:16","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":2959,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:16","nodeType":"FunctionDefinition","parameters":{"id":2952,"nodeType":"ParameterList","parameters":[],"src":"2378:2:16"},"returnParameters":{"id":2955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2959,"src":"2410:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2953,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:16"},"scope":3817,"src":"2365:89:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3971],"body":{"id":2967,"nodeType":"Block","src":"2580:31:16","statements":[{"expression":{"id":2965,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"2597:7:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2964,"id":2966,"nodeType":"Return","src":"2590:14:16"}]},"documentation":{"id":2960,"nodeType":"StructuredDocumentation","src":"2460:53:16","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":2968,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:16","nodeType":"FunctionDefinition","parameters":{"id":2961,"nodeType":"ParameterList","parameters":[],"src":"2533:2:16"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2968,"src":"2565:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2962,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:16"},"scope":3817,"src":"2518:93:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3979],"body":{"id":3003,"nodeType":"Block","src":"2756:176:16","statements":[{"expression":{"arguments":[{"id":2977,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"2780:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2976,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"2766:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2979,"nodeType":"ExpressionStatement","src":"2766:22:16"},{"assignments":[2981],"declarations":[{"constant":false,"id":2981,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:16","nodeType":"VariableDeclaration","scope":3003,"src":"2799:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2980,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2984,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2982,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3013,"src":"2823:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:16"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2987,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"2856:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2985,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:16","typeDescriptions":{}}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:16","memberName":"length","nodeType":"MemberAccess","src":"2850:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:16","trueExpression":{"arguments":[{"id":2995,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"2892:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2996,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"2901:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:16","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":4070,"src":"2901:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2992,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:16","typeDescriptions":{}}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:16","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:16","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2975,"id":3002,"nodeType":"Return","src":"2843:82:16"}]},"documentation":{"id":2969,"nodeType":"StructuredDocumentation","src":"2617:55:16","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":3004,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:16","nodeType":"FunctionDefinition","parameters":{"id":2972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2971,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:16","nodeType":"VariableDeclaration","scope":3004,"src":"2695:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2970,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:16"},"returnParameters":{"id":2975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3004,"src":"2741:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2973,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:16"},"scope":3817,"src":"2677:255:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3012,"nodeType":"Block","src":"3240:26:16","statements":[{"expression":{"hexValue":"","id":3010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":3009,"id":3011,"nodeType":"Return","src":"3250:9:16"}]},"documentation":{"id":3005,"nodeType":"StructuredDocumentation","src":"2938:231:16","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":3013,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:16","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[],"src":"3191:2:16"},"returnParameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3013,"src":"3225:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3007,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:16"},"scope":3817,"src":"3174:92:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3907],"body":{"id":3028,"nodeType":"Block","src":"3384:52:16","statements":[{"expression":{"arguments":[{"id":3022,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3016,"src":"3403:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3023,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"3407:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3024,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"3416:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3021,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3620,3686],"referencedDeclaration":3620,"src":"3394:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3027,"nodeType":"ExpressionStatement","src":"3394:35:16"}]},"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"3272:46:16","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":3029,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:16","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"to","nameLocation":"3348:2:16","nodeType":"VariableDeclaration","scope":3029,"src":"3340:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3018,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:16","nodeType":"VariableDeclaration","scope":3029,"src":"3352:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3017,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:16"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[],"src":"3384:0:16"},"scope":3817,"src":"3323:113:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3923],"body":{"id":3045,"nodeType":"Block","src":"3573:78:16","statements":[{"expression":{"arguments":[{"id":3038,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"3597:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3037,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"3583:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3040,"nodeType":"ExpressionStatement","src":"3583:22:16"},{"expression":{"arguments":[{"id":3042,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3032,"src":"3636:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3041,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"3623:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3036,"id":3044,"nodeType":"Return","src":"3616:28:16"}]},"documentation":{"id":3030,"nodeType":"StructuredDocumentation","src":"3442:50:16","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":3046,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:16","nodeType":"FunctionDefinition","parameters":{"id":3033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3032,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:16","nodeType":"VariableDeclaration","scope":3046,"src":"3518:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3031,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:16"},"returnParameters":{"id":3036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3035,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3046,"src":"3564:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3034,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:16"},"scope":3817,"src":"3497:154:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3915],"body":{"id":3061,"nodeType":"Block","src":"3793:69:16","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3055,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"3822:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3057,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3049,"src":"3836:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3058,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"3846:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3054,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"3803:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3060,"nodeType":"ExpressionStatement","src":"3803:52:16"}]},"documentation":{"id":3047,"nodeType":"StructuredDocumentation","src":"3657:56:16","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":3062,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:16","nodeType":"FunctionDefinition","parameters":{"id":3052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"operator","nameLocation":"3753:8:16","nodeType":"VariableDeclaration","scope":3062,"src":"3745:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3048,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3051,"mutability":"mutable","name":"approved","nameLocation":"3768:8:16","nodeType":"VariableDeclaration","scope":3062,"src":"3763:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3050,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:16"},"returnParameters":{"id":3053,"nodeType":"ParameterList","parameters":[],"src":"3793:0:16"},"scope":3817,"src":"3718:144:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3933],"body":{"id":3078,"nodeType":"Block","src":"4022:59:16","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3072,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"4039:18:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3074,"indexExpression":{"id":3073,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"4058:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3076,"indexExpression":{"id":3075,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3067,"src":"4065:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3071,"id":3077,"nodeType":"Return","src":"4032:42:16"}]},"documentation":{"id":3063,"nodeType":"StructuredDocumentation","src":"3868:55:16","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":3079,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:16","nodeType":"FunctionDefinition","parameters":{"id":3068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3065,"mutability":"mutable","name":"owner","nameLocation":"3962:5:16","nodeType":"VariableDeclaration","scope":3079,"src":"3954:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3064,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3067,"mutability":"mutable","name":"operator","nameLocation":"3977:8:16","nodeType":"VariableDeclaration","scope":3079,"src":"3969:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3066,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:16"},"returnParameters":{"id":3071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3079,"src":"4016:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3069,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:16"},"scope":3817,"src":"3928:153:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3899],"body":{"id":3124,"nodeType":"Block","src":"4223:498:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3089,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4237:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3090,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:16","typeDescriptions":{}}},"id":3093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3103,"nodeType":"IfStatement","src":"4233:87:16","trueBody":{"id":3102,"nodeType":"Block","src":"4255:65:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3096,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:16","typeDescriptions":{}}},"id":3099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3095,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"4276:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3101,"nodeType":"RevertStatement","src":"4269:40:16"}]}},{"assignments":[3105],"declarations":[{"constant":false,"id":3105,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:16","nodeType":"VariableDeclaration","scope":3124,"src":"4538:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3104,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3112,"initialValue":{"arguments":[{"id":3107,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"4570:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3108,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"4574:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3109,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"4583:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3106,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"4562:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3113,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"4610:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3114,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"4627:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3123,"nodeType":"IfStatement","src":"4606:109:16","trueBody":{"id":3122,"nodeType":"Block","src":"4633:82:16","statements":[{"errorCall":{"arguments":[{"id":3117,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"4675:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3118,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"4681:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3119,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"4690:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3116,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"4654:20:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"RevertStatement","src":"4647:57:16"}]}}]},"documentation":{"id":3080,"nodeType":"StructuredDocumentation","src":"4087:51:16","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":3125,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:16","nodeType":"FunctionDefinition","parameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"from","nameLocation":"4173:4:16","nodeType":"VariableDeclaration","scope":3125,"src":"4165:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3081,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3084,"mutability":"mutable","name":"to","nameLocation":"4187:2:16","nodeType":"VariableDeclaration","scope":3125,"src":"4179:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3083,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3086,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:16","nodeType":"VariableDeclaration","scope":3125,"src":"4191:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:16"},"returnParameters":{"id":3088,"nodeType":"ParameterList","parameters":[],"src":"4223:0:16"},"scope":3817,"src":"4143:578:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3889],"body":{"id":3142,"nodeType":"Block","src":"4863:56:16","statements":[{"expression":{"arguments":[{"id":3136,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3128,"src":"4890:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3137,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4896:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3138,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4900:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3135,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[3143,3169],"referencedDeclaration":3169,"src":"4873:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3141,"nodeType":"ExpressionStatement","src":"4873:39:16"}]},"documentation":{"id":3126,"nodeType":"StructuredDocumentation","src":"4727:55:16","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":3143,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:16","nodeType":"FunctionDefinition","parameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3128,"mutability":"mutable","name":"from","nameLocation":"4821:4:16","nodeType":"VariableDeclaration","scope":3143,"src":"4813:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3127,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3130,"mutability":"mutable","name":"to","nameLocation":"4835:2:16","nodeType":"VariableDeclaration","scope":3143,"src":"4827:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3129,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3132,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:16","nodeType":"VariableDeclaration","scope":3143,"src":"4839:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3131,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:16"},"returnParameters":{"id":3134,"nodeType":"ParameterList","parameters":[],"src":"4863:0:16"},"scope":3817,"src":"4787:132:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3879],"body":{"id":3168,"nodeType":"Block","src":"5088:105:16","statements":[{"expression":{"arguments":[{"id":3156,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"5111:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3157,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"5117:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3158,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"5121:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3155,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"5098:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3160,"nodeType":"ExpressionStatement","src":"5098:31:16"},{"expression":{"arguments":[{"id":3162,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"5162:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3163,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"5168:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3164,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"5172:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3165,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3152,"src":"5181:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3161,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"5139:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3167,"nodeType":"ExpressionStatement","src":"5139:47:16"}]},"documentation":{"id":3144,"nodeType":"StructuredDocumentation","src":"4925:55:16","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":3169,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:16","nodeType":"FunctionDefinition","parameters":{"id":3153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3146,"mutability":"mutable","name":"from","nameLocation":"5019:4:16","nodeType":"VariableDeclaration","scope":3169,"src":"5011:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3145,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3148,"mutability":"mutable","name":"to","nameLocation":"5033:2:16","nodeType":"VariableDeclaration","scope":3169,"src":"5025:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3147,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3150,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:16","nodeType":"VariableDeclaration","scope":3169,"src":"5037:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3149,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3152,"mutability":"mutable","name":"data","nameLocation":"5067:4:16","nodeType":"VariableDeclaration","scope":3169,"src":"5054:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3151,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:16"},"returnParameters":{"id":3154,"nodeType":"ParameterList","parameters":[],"src":"5088:0:16"},"scope":3817,"src":"4985:208:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3181,"nodeType":"Block","src":"5782:40:16","statements":[{"expression":{"baseExpression":{"id":3177,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"5799:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3179,"indexExpression":{"id":3178,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"5807:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3176,"id":3180,"nodeType":"Return","src":"5792:23:16"}]},"documentation":{"id":3170,"nodeType":"StructuredDocumentation","src":"5199:503:16","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":3182,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:16","nodeType":"FunctionDefinition","parameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3172,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:16","nodeType":"VariableDeclaration","scope":3182,"src":"5725:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:16"},"returnParameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3175,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3182,"src":"5773:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3174,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:16"},"scope":3817,"src":"5707:115:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3194,"nodeType":"Block","src":"6017:48:16","statements":[{"expression":{"baseExpression":{"id":3190,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"6034:15:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3192,"indexExpression":{"id":3191,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"6050:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3189,"id":3193,"nodeType":"Return","src":"6027:31:16"}]},"documentation":{"id":3183,"nodeType":"StructuredDocumentation","src":"5828:105:16","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":3195,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:16","nodeType":"FunctionDefinition","parameters":{"id":3186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3185,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:16","nodeType":"VariableDeclaration","scope":3195,"src":"5960:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3184,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:16"},"returnParameters":{"id":3189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3195,"src":"6008:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3187,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:16"},"scope":3817,"src":"5938:127:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3230,"nodeType":"Block","src":"6485:163:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3207,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"6514:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3208,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:16","typeDescriptions":{}}},"id":3211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3213,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"6552:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3214,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"6561:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3217,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"6589:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3218,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"6596:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3216,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"6572:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3222,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"6621:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3221,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"6608:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3224,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"6633:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3227,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3206,"id":3229,"nodeType":"Return","src":"6495:146:16"}]},"documentation":{"id":3196,"nodeType":"StructuredDocumentation","src":"6071:300:16","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":3231,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:16","nodeType":"FunctionDefinition","parameters":{"id":3203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3198,"mutability":"mutable","name":"owner","nameLocation":"6407:5:16","nodeType":"VariableDeclaration","scope":3231,"src":"6399:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3197,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3200,"mutability":"mutable","name":"spender","nameLocation":"6422:7:16","nodeType":"VariableDeclaration","scope":3231,"src":"6414:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3199,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3202,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:16","nodeType":"VariableDeclaration","scope":3231,"src":"6431:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3201,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:16"},"returnParameters":{"id":3206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3231,"src":"6479:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3204,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:16"},"scope":3817,"src":"6376:272:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3267,"nodeType":"Block","src":"7179:271:16","statements":[{"condition":{"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:16","subExpression":{"arguments":[{"id":3242,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"7208:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3243,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"7215:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3244,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"7224:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3241,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"7194:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3266,"nodeType":"IfStatement","src":"7189:255:16","trueBody":{"id":3265,"nodeType":"Block","src":"7234:210:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3247,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"7252:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3248,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:16","typeDescriptions":{}}},"id":3251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3263,"nodeType":"Block","src":"7350:84:16","statements":[{"errorCall":{"arguments":[{"id":3259,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"7402:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3260,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"7411:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3258,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"7375:26:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3262,"nodeType":"RevertStatement","src":"7368:51:16"}]},"id":3264,"nodeType":"IfStatement","src":"7248:186:16","trueBody":{"id":3257,"nodeType":"Block","src":"7273:71:16","statements":[{"errorCall":{"arguments":[{"id":3254,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3238,"src":"7321:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3253,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"7298:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3256,"nodeType":"RevertStatement","src":"7291:38:16"}]}}]}}]},"documentation":{"id":3232,"nodeType":"StructuredDocumentation","src":"6654:423:16","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":3268,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:16","nodeType":"FunctionDefinition","parameters":{"id":3239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3234,"mutability":"mutable","name":"owner","nameLocation":"7116:5:16","nodeType":"VariableDeclaration","scope":3268,"src":"7108:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3233,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3236,"mutability":"mutable","name":"spender","nameLocation":"7131:7:16","nodeType":"VariableDeclaration","scope":3268,"src":"7123:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3235,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3238,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:16","nodeType":"VariableDeclaration","scope":3268,"src":"7140:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3237,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:16"},"returnParameters":{"id":3240,"nodeType":"ParameterList","parameters":[],"src":"7179:0:16"},"scope":3817,"src":"7082:368:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3283,"nodeType":"Block","src":"8167:78:16","statements":[{"id":3282,"nodeType":"UncheckedBlock","src":"8177:62:16","statements":[{"expression":{"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3276,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"8201:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3278,"indexExpression":{"id":3277,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"8211:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"8223:5:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3281,"nodeType":"ExpressionStatement","src":"8201:27:16"}]}]},"documentation":{"id":3269,"nodeType":"StructuredDocumentation","src":"7456:631:16","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":3284,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:16","nodeType":"FunctionDefinition","parameters":{"id":3274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3271,"mutability":"mutable","name":"account","nameLocation":"8126:7:16","nodeType":"VariableDeclaration","scope":3284,"src":"8118:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3270,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3273,"mutability":"mutable","name":"value","nameLocation":"8143:5:16","nodeType":"VariableDeclaration","scope":3284,"src":"8135:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3272,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:16"},"returnParameters":{"id":3275,"nodeType":"ParameterList","parameters":[],"src":"8167:0:16"},"scope":3817,"src":"8092:153:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3373,"nodeType":"Block","src":"8933:700:16","statements":[{"assignments":[3297],"declarations":[{"constant":false,"id":3297,"mutability":"mutable","name":"from","nameLocation":"8951:4:16","nodeType":"VariableDeclaration","scope":3373,"src":"8943:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3296,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3301,"initialValue":{"arguments":[{"id":3299,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"8967:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3298,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"8958:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3302,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"9035:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3303,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:16","typeDescriptions":{}}},"id":3306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3315,"nodeType":"IfStatement","src":"9031:86:16","trueBody":{"id":3314,"nodeType":"Block","src":"9055:62:16","statements":[{"expression":{"arguments":[{"id":3309,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"9086:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3310,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3291,"src":"9092:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3311,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"9098:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3308,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"9069:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3313,"nodeType":"ExpressionStatement","src":"9069:37:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3316,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"9161:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3317,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:16","typeDescriptions":{}}},"id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3343,"nodeType":"IfStatement","src":"9157:256:16","trueBody":{"id":3342,"nodeType":"Block","src":"9181:232:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3323,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:16","typeDescriptions":{}}},"id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3327,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"9298:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3328,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:16","typeDescriptions":{}}},"id":3331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":3332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3322,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3620,3686],"referencedDeclaration":3686,"src":"9277:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3334,"nodeType":"ExpressionStatement","src":"9277:48:16"},{"id":3341,"nodeType":"UncheckedBlock","src":"9340:63:16","statements":[{"expression":{"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3335,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"9368:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3337,"indexExpression":{"id":3336,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"9378:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3340,"nodeType":"ExpressionStatement","src":"9368:20:16"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3344,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"9427:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3345,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:16","typeDescriptions":{}}},"id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3358,"nodeType":"IfStatement","src":"9423:107:16","trueBody":{"id":3357,"nodeType":"Block","src":"9445:85:16","statements":[{"id":3356,"nodeType":"UncheckedBlock","src":"9459:61:16","statements":[{"expression":{"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3350,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"9487:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3352,"indexExpression":{"id":3351,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"9497:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3355,"nodeType":"ExpressionStatement","src":"9487:18:16"}]}]}},{"expression":{"id":3363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3359,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"9540:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3361,"indexExpression":{"id":3360,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"9548:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3362,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"9559:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3364,"nodeType":"ExpressionStatement","src":"9540:21:16"},{"eventCall":{"arguments":[{"id":3366,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"9586:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3367,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"9592:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3368,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"9596:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3365,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"9577:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3370,"nodeType":"EmitStatement","src":"9572:32:16"},{"expression":{"id":3371,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"9622:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3295,"id":3372,"nodeType":"Return","src":"9615:11:16"}]},"documentation":{"id":3285,"nodeType":"StructuredDocumentation","src":"8251:582:16","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":3374,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:16","nodeType":"FunctionDefinition","parameters":{"id":3292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3287,"mutability":"mutable","name":"to","nameLocation":"8863:2:16","nodeType":"VariableDeclaration","scope":3374,"src":"8855:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3286,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3289,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:16","nodeType":"VariableDeclaration","scope":3374,"src":"8867:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3288,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3291,"mutability":"mutable","name":"auth","nameLocation":"8892:4:16","nodeType":"VariableDeclaration","scope":3374,"src":"8884:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3290,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:16"},"returnParameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3374,"src":"8924:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3293,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:16"},"scope":3817,"src":"8838:795:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3423,"nodeType":"Block","src":"10008:274:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3382,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"10022:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3383,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:16","typeDescriptions":{}}},"id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3396,"nodeType":"IfStatement","src":"10018:87:16","trueBody":{"id":3395,"nodeType":"Block","src":"10040:65:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3389,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:16","typeDescriptions":{}}},"id":3392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3388,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"10061:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3394,"nodeType":"RevertStatement","src":"10054:40:16"}]}},{"assignments":[3398],"declarations":[{"constant":false,"id":3398,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:16","nodeType":"VariableDeclaration","scope":3423,"src":"10114:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3397,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3407,"initialValue":{"arguments":[{"id":3400,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"10146:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3401,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3379,"src":"10150:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3402,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:16","typeDescriptions":{}}},"id":3405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3399,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"10138:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3408,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"10184:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3409,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:16","typeDescriptions":{}}},"id":3412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3422,"nodeType":"IfStatement","src":"10180:96:16","trueBody":{"id":3421,"nodeType":"Block","src":"10213:63:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3415,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:16","typeDescriptions":{}}},"id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3414,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2738,"src":"10234:19:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3420,"nodeType":"RevertStatement","src":"10227:38:16"}]}}]},"documentation":{"id":3375,"nodeType":"StructuredDocumentation","src":"9639:311:16","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":3424,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:16","nodeType":"FunctionDefinition","parameters":{"id":3380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3377,"mutability":"mutable","name":"to","nameLocation":"9978:2:16","nodeType":"VariableDeclaration","scope":3424,"src":"9970:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3376,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3379,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:16","nodeType":"VariableDeclaration","scope":3424,"src":"9982:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3378,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:16"},"returnParameters":{"id":3381,"nodeType":"ParameterList","parameters":[],"src":"10008:0:16"},"scope":3817,"src":"9955:327:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3438,"nodeType":"Block","src":"10690:43:16","statements":[{"expression":{"arguments":[{"id":3433,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"10710:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3434,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"10714:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3432,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[3439,3465],"referencedDeclaration":3465,"src":"10700:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3437,"nodeType":"ExpressionStatement","src":"10700:26:16"}]},"documentation":{"id":3425,"nodeType":"StructuredDocumentation","src":"10288:340:16","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3439,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:16","nodeType":"FunctionDefinition","parameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3427,"mutability":"mutable","name":"to","nameLocation":"10660:2:16","nodeType":"VariableDeclaration","scope":3439,"src":"10652:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3426,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3429,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:16","nodeType":"VariableDeclaration","scope":3439,"src":"10664:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3428,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:16"},"returnParameters":{"id":3431,"nodeType":"ParameterList","parameters":[],"src":"10690:0:16"},"scope":3817,"src":"10633:100:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3464,"nodeType":"Block","src":"11038:98:16","statements":[{"expression":{"arguments":[{"id":3450,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"11054:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3451,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"11058:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3449,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3424,"src":"11048:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3453,"nodeType":"ExpressionStatement","src":"11048:18:16"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3456,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3455,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:16","typeDescriptions":{}}},"id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3459,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"11111:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3460,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"11115:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3461,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"11124:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3454,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"11076:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3463,"nodeType":"ExpressionStatement","src":"11076:53:16"}]},"documentation":{"id":3440,"nodeType":"StructuredDocumentation","src":"10739:210:16","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":3465,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:16","nodeType":"FunctionDefinition","parameters":{"id":3447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3442,"mutability":"mutable","name":"to","nameLocation":"10981:2:16","nodeType":"VariableDeclaration","scope":3465,"src":"10973:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3441,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3444,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:16","nodeType":"VariableDeclaration","scope":3465,"src":"10985:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3443,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3446,"mutability":"mutable","name":"data","nameLocation":"11015:4:16","nodeType":"VariableDeclaration","scope":3465,"src":"11002:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3445,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:16"},"returnParameters":{"id":3448,"nodeType":"ParameterList","parameters":[],"src":"11038:0:16"},"scope":3817,"src":"10954:182:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3497,"nodeType":"Block","src":"11503:186:16","statements":[{"assignments":[3472],"declarations":[{"constant":false,"id":3472,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:16","nodeType":"VariableDeclaration","scope":3497,"src":"11513:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3484,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":3476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3474,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:16","typeDescriptions":{}}},"id":3477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3478,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"11557:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3479,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:16","typeDescriptions":{}}},"id":3482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3473,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"11537:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3485,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3472,"src":"11591:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3486,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:16","typeDescriptions":{}}},"id":3489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3496,"nodeType":"IfStatement","src":"11587:96:16","trueBody":{"id":3495,"nodeType":"Block","src":"11620:63:16","statements":[{"errorCall":{"arguments":[{"id":3492,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"11664:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3491,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"11641:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3494,"nodeType":"RevertStatement","src":"11634:38:16"}]}}]},"documentation":{"id":3466,"nodeType":"StructuredDocumentation","src":"11142:315:16","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":3498,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:16","nodeType":"FunctionDefinition","parameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:16","nodeType":"VariableDeclaration","scope":3498,"src":"11477:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:16"},"returnParameters":{"id":3470,"nodeType":"ParameterList","parameters":[],"src":"11503:0:16"},"scope":3817,"src":"11462:227:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3557,"nodeType":"Block","src":"12084:389:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3508,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"12098:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3509,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:16","typeDescriptions":{}}},"id":3512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3522,"nodeType":"IfStatement","src":"12094:87:16","trueBody":{"id":3521,"nodeType":"Block","src":"12116:65:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3515,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:16","typeDescriptions":{}}},"id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3514,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"12137:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3520,"nodeType":"RevertStatement","src":"12130:40:16"}]}},{"assignments":[3524],"declarations":[{"constant":false,"id":3524,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:16","nodeType":"VariableDeclaration","scope":3557,"src":"12190:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3523,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3533,"initialValue":{"arguments":[{"id":3526,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"12222:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3527,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"12226:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3529,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3528,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:16","typeDescriptions":{}}},"id":3531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3525,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"12214:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3534,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"12260:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3535,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:16","typeDescriptions":{}}},"id":3538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3545,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"12362:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3546,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"12379:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3555,"nodeType":"IfStatement","src":"12358:109:16","trueBody":{"id":3554,"nodeType":"Block","src":"12385:82:16","statements":[{"errorCall":{"arguments":[{"id":3549,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"12427:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3550,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"12433:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3551,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"12442:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3548,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"12406:20:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3553,"nodeType":"RevertStatement","src":"12399:57:16"}]}},"id":3556,"nodeType":"IfStatement","src":"12256:211:16","trueBody":{"id":3544,"nodeType":"Block","src":"12289:63:16","statements":[{"errorCall":{"arguments":[{"id":3541,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"12333:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3540,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"12310:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3543,"nodeType":"RevertStatement","src":"12303:38:16"}]}}]},"documentation":{"id":3499,"nodeType":"StructuredDocumentation","src":"11695:313:16","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":3558,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:16","nodeType":"FunctionDefinition","parameters":{"id":3506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3501,"mutability":"mutable","name":"from","nameLocation":"12040:4:16","nodeType":"VariableDeclaration","scope":3558,"src":"12032:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3500,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3503,"mutability":"mutable","name":"to","nameLocation":"12054:2:16","nodeType":"VariableDeclaration","scope":3558,"src":"12046:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3502,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3505,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:16","nodeType":"VariableDeclaration","scope":3558,"src":"12058:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3504,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:16"},"returnParameters":{"id":3507,"nodeType":"ParameterList","parameters":[],"src":"12084:0:16"},"scope":3817,"src":"12013:460:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3575,"nodeType":"Block","src":"13481:53:16","statements":[{"expression":{"arguments":[{"id":3569,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3561,"src":"13505:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3570,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"13511:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3571,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3565,"src":"13515:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3568,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[3576,3602],"referencedDeclaration":3602,"src":"13491:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3574,"nodeType":"ExpressionStatement","src":"13491:36:16"}]},"documentation":{"id":3559,"nodeType":"StructuredDocumentation","src":"12479:922:16","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3576,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:16","nodeType":"FunctionDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3561,"mutability":"mutable","name":"from","nameLocation":"13437:4:16","nodeType":"VariableDeclaration","scope":3576,"src":"13429:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3560,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3563,"mutability":"mutable","name":"to","nameLocation":"13451:2:16","nodeType":"VariableDeclaration","scope":3576,"src":"13443:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3562,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3565,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:16","nodeType":"VariableDeclaration","scope":3576,"src":"13455:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3564,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:16"},"returnParameters":{"id":3567,"nodeType":"ParameterList","parameters":[],"src":"13481:0:16"},"scope":3817,"src":"13406:128:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3601,"nodeType":"Block","src":"13873:102:16","statements":[{"expression":{"arguments":[{"id":3589,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"13893:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3590,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"13899:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3591,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"13903:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3588,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3558,"src":"13883:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3593,"nodeType":"ExpressionStatement","src":"13883:28:16"},{"expression":{"arguments":[{"id":3595,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"13944:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3596,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"13950:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3597,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"13954:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3598,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3585,"src":"13963:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3594,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"13921:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3600,"nodeType":"ExpressionStatement","src":"13921:47:16"}]},"documentation":{"id":3577,"nodeType":"StructuredDocumentation","src":"13540:226:16","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":3602,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:16","nodeType":"FunctionDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3579,"mutability":"mutable","name":"from","nameLocation":"13802:4:16","nodeType":"VariableDeclaration","scope":3602,"src":"13794:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3578,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3581,"mutability":"mutable","name":"to","nameLocation":"13816:2:16","nodeType":"VariableDeclaration","scope":3602,"src":"13808:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3583,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:16","nodeType":"VariableDeclaration","scope":3602,"src":"13820:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3582,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3585,"mutability":"mutable","name":"data","nameLocation":"13850:4:16","nodeType":"VariableDeclaration","scope":3602,"src":"13837:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3584,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:16"},"returnParameters":{"id":3587,"nodeType":"ParameterList","parameters":[],"src":"13873:0:16"},"scope":3817,"src":"13771:204:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3619,"nodeType":"Block","src":"14488:50:16","statements":[{"expression":{"arguments":[{"id":3613,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"14507:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3614,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3607,"src":"14511:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3615,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"14520:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":3616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3612,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3620,3686],"referencedDeclaration":3686,"src":"14498:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3618,"nodeType":"ExpressionStatement","src":"14498:33:16"}]},"documentation":{"id":3603,"nodeType":"StructuredDocumentation","src":"13981:432:16","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":3620,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:16","nodeType":"FunctionDefinition","parameters":{"id":3610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3605,"mutability":"mutable","name":"to","nameLocation":"14444:2:16","nodeType":"VariableDeclaration","scope":3620,"src":"14436:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3604,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3607,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:16","nodeType":"VariableDeclaration","scope":3620,"src":"14448:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3606,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3609,"mutability":"mutable","name":"auth","nameLocation":"14473:4:16","nodeType":"VariableDeclaration","scope":3620,"src":"14465:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3608,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:16"},"returnParameters":{"id":3611,"nodeType":"ParameterList","parameters":[],"src":"14488:0:16"},"scope":3817,"src":"14418:120:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3685,"nodeType":"Block","src":"14814:568:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3632,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"14880:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3633,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"14893:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3634,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:16","typeDescriptions":{}}},"id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3678,"nodeType":"IfStatement","src":"14876:460:16","trueBody":{"id":3677,"nodeType":"Block","src":"14913:423:16","statements":[{"assignments":[3641],"declarations":[{"constant":false,"id":3641,"mutability":"mutable","name":"owner","nameLocation":"14935:5:16","nodeType":"VariableDeclaration","scope":3677,"src":"14927:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3640,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3645,"initialValue":{"arguments":[{"id":3643,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"14957:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3642,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"14943:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3646,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"15093:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3647,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:16","typeDescriptions":{}}},"id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"15115:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3653,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"15124:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:16","subExpression":{"arguments":[{"id":3657,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"15150:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3658,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"15157:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3656,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"15133:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3667,"nodeType":"IfStatement","src":"15089:142:16","trueBody":{"id":3666,"nodeType":"Block","src":"15164:67:16","statements":[{"errorCall":{"arguments":[{"id":3663,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3627,"src":"15211:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3662,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"15189:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3665,"nodeType":"RevertStatement","src":"15182:34:16"}]}},{"condition":{"id":3668,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"15249:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3676,"nodeType":"IfStatement","src":"15245:81:16","trueBody":{"id":3675,"nodeType":"Block","src":"15260:66:16","statements":[{"eventCall":{"arguments":[{"id":3670,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"15292:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3671,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3623,"src":"15299:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3672,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"15303:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3669,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"15283:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3674,"nodeType":"EmitStatement","src":"15278:33:16"}]}}]}},{"expression":{"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3679,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"15346:15:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3681,"indexExpression":{"id":3680,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"15362:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3682,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3623,"src":"15373:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3684,"nodeType":"ExpressionStatement","src":"15346:29:16"}]},"documentation":{"id":3621,"nodeType":"StructuredDocumentation","src":"14544:171:16","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":3686,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:16","nodeType":"FunctionDefinition","parameters":{"id":3630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3623,"mutability":"mutable","name":"to","nameLocation":"14746:2:16","nodeType":"VariableDeclaration","scope":3686,"src":"14738:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3622,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3625,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:16","nodeType":"VariableDeclaration","scope":3686,"src":"14750:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3624,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3627,"mutability":"mutable","name":"auth","nameLocation":"14775:4:16","nodeType":"VariableDeclaration","scope":3686,"src":"14767:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3626,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:16","nodeType":"VariableDeclaration","scope":3686,"src":"14781:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3628,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:16"},"returnParameters":{"id":3631,"nodeType":"ParameterList","parameters":[],"src":"14814:0:16"},"scope":3817,"src":"14720:662:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3722,"nodeType":"Block","src":"15684:219:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3696,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"15698:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3697,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:16","typeDescriptions":{}}},"id":3700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3707,"nodeType":"IfStatement","src":"15694:91:16","trueBody":{"id":3706,"nodeType":"Block","src":"15722:63:16","statements":[{"errorCall":{"arguments":[{"id":3703,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"15765:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3702,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2760,"src":"15743:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3705,"nodeType":"RevertStatement","src":"15736:38:16"}]}},{"expression":{"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3708,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"15794:18:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3711,"indexExpression":{"id":3709,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"15813:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3712,"indexExpression":{"id":3710,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"15820:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3713,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"15832:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3715,"nodeType":"ExpressionStatement","src":"15794:46:16"},{"eventCall":{"arguments":[{"id":3717,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3689,"src":"15870:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3718,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"15877:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3719,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"15887:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3716,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"15855:14:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3721,"nodeType":"EmitStatement","src":"15850:46:16"}]},"documentation":{"id":3687,"nodeType":"StructuredDocumentation","src":"15388:198:16","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":3723,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:16","nodeType":"FunctionDefinition","parameters":{"id":3694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3689,"mutability":"mutable","name":"owner","nameLocation":"15627:5:16","nodeType":"VariableDeclaration","scope":3723,"src":"15619:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3688,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3691,"mutability":"mutable","name":"operator","nameLocation":"15642:8:16","nodeType":"VariableDeclaration","scope":3723,"src":"15634:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3690,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3693,"mutability":"mutable","name":"approved","nameLocation":"15657:8:16","nodeType":"VariableDeclaration","scope":3723,"src":"15652:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3692,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:16"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[],"src":"15684:0:16"},"scope":3817,"src":"15591:312:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3751,"nodeType":"Block","src":"16210:169:16","statements":[{"assignments":[3732],"declarations":[{"constant":false,"id":3732,"mutability":"mutable","name":"owner","nameLocation":"16228:5:16","nodeType":"VariableDeclaration","scope":3751,"src":"16220:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3731,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3736,"initialValue":{"arguments":[{"id":3734,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"16245:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3733,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"16236:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3737,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"16267:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3738,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:16","typeDescriptions":{}}},"id":3741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3748,"nodeType":"IfStatement","src":"16263:88:16","trueBody":{"id":3747,"nodeType":"Block","src":"16288:63:16","statements":[{"errorCall":{"arguments":[{"id":3744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3726,"src":"16332:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3743,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2724,"src":"16309:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3746,"nodeType":"RevertStatement","src":"16302:38:16"}]}},{"expression":{"id":3749,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3732,"src":"16367:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3730,"id":3750,"nodeType":"Return","src":"16360:12:16"}]},"documentation":{"id":3724,"nodeType":"StructuredDocumentation","src":"15909:224:16","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":3752,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:16","nodeType":"FunctionDefinition","parameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:16","nodeType":"VariableDeclaration","scope":3752,"src":"16161:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3725,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:16"},"returnParameters":{"id":3730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3729,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3752,"src":"16201:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3728,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:16"},"scope":3817,"src":"16138:241:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3815,"nodeType":"Block","src":"17020:680:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3764,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"17034:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:16","memberName":"code","nodeType":"MemberAccess","src":"17034:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:16","memberName":"length","nodeType":"MemberAccess","src":"17034:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3814,"nodeType":"IfStatement","src":"17030:664:16","trueBody":{"id":3813,"nodeType":"Block","src":"17054:640:16","statements":[{"clauses":[{"block":{"id":3793,"nodeType":"Block","src":"17168:162:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3782,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"17190:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":3783,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"17200:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$3952_$","typeString":"type(contract IERC721Receiver)"}},"id":3784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:16","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":3951,"src":"17200:32:16","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:16","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3792,"nodeType":"IfStatement","src":"17186:130:16","trueBody":{"id":3791,"nodeType":"Block","src":"17243:73:16","statements":[{"errorCall":{"arguments":[{"id":3788,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"17294:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3787,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"17272:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3790,"nodeType":"RevertStatement","src":"17265:32:16"}]}}]},"errorName":"","id":3794,"nodeType":"TryCatchClause","parameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3780,"mutability":"mutable","name":"retval","nameLocation":"17160:6:16","nodeType":"VariableDeclaration","scope":3794,"src":"17153:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3779,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:16"},"src":"17144:186:16"},{"block":{"id":3810,"nodeType":"Block","src":"17359:325:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3798,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"17381:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:16","memberName":"length","nodeType":"MemberAccess","src":"17381:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3808,"nodeType":"Block","src":"17480:190:16","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:16","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:16","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:16"},"nodeType":"YulFunctionCall","src":"17599:15:16"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:16"},"nodeType":"YulFunctionCall","src":"17616:13:16"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:16"},"nodeType":"YulFunctionCall","src":"17592:38:16"},"nodeType":"YulExpressionStatement","src":"17592:38:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3796,"isOffset":false,"isSlot":false,"src":"17607:6:16","valueSize":1},{"declaration":3796,"isOffset":false,"isSlot":false,"src":"17622:6:16","valueSize":1}],"id":3807,"nodeType":"InlineAssembly","src":"17557:95:16"}]},"id":3809,"nodeType":"IfStatement","src":"17377:293:16","trueBody":{"id":3806,"nodeType":"Block","src":"17401:73:16","statements":[{"errorCall":{"arguments":[{"id":3803,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"17452:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3802,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"17430:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3805,"nodeType":"RevertStatement","src":"17423:32:16"}]}}]},"errorName":"","id":3811,"nodeType":"TryCatchClause","parameters":{"id":3797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"mutability":"mutable","name":"reason","nameLocation":"17351:6:16","nodeType":"VariableDeclaration","scope":3811,"src":"17338:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3795,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:16"},"src":"17331:353:16"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3773,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"17109:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3775,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"17123:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3776,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"17129:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3777,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3761,"src":"17138:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3770,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"17088:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3769,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"17072:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$3952_$","typeString":"type(contract IERC721Receiver)"}},"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$3952","typeString":"contract IERC721Receiver"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:16","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":3951,"src":"17072:36:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:16","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3812,"nodeType":"TryStatement","src":"17068:616:16"}]}}]},"documentation":{"id":3753,"nodeType":"StructuredDocumentation","src":"16385:528:16","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":3816,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:16","nodeType":"FunctionDefinition","parameters":{"id":3762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"from","nameLocation":"16958:4:16","nodeType":"VariableDeclaration","scope":3816,"src":"16950:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3754,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3757,"mutability":"mutable","name":"to","nameLocation":"16972:2:16","nodeType":"VariableDeclaration","scope":3816,"src":"16964:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3756,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3759,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:16","nodeType":"VariableDeclaration","scope":3816,"src":"16976:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3758,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3761,"mutability":"mutable","name":"data","nameLocation":"17006:4:16","nodeType":"VariableDeclaration","scope":3816,"src":"16993:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3760,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:16"},"returnParameters":{"id":3763,"nodeType":"ParameterList","parameters":[],"src":"17020:0:16"},"scope":3817,"src":"16918:782:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3818,"src":"776:16926:16","usedErrors":[2719,2724,2733,2738,2743,2750,2755,2760],"usedEvents":[3833,3842,3851]}],"src":"107:17596:16"},"id":16},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[4293],"IERC721":[3934]},"id":3935,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3819,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:17"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":3821,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3935,"sourceUnit":4294,"src":"134:62:17","symbolAliases":[{"foreign":{"id":3820,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"142:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3823,"name":"IERC165","nameLocations":["287:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":4293,"src":"287:7:17"},"id":3824,"nodeType":"InheritanceSpecifier","src":"287:7:17"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":3822,"nodeType":"StructuredDocumentation","src":"198:67:17","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":3934,"linearizedBaseContracts":[3934,4293],"name":"IERC721","nameLocation":"276:7:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3825,"nodeType":"StructuredDocumentation","src":"301:88:17","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3833,"name":"Transfer","nameLocation":"400:8:17","nodeType":"EventDefinition","parameters":{"id":3832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3827,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:17","nodeType":"VariableDeclaration","scope":3833,"src":"409:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3826,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3829,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:17","nodeType":"VariableDeclaration","scope":3833,"src":"431:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3828,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3831,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:17","nodeType":"VariableDeclaration","scope":3833,"src":"451:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3830,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:17"},"src":"394:82:17"},{"anonymous":false,"documentation":{"id":3834,"nodeType":"StructuredDocumentation","src":"482:94:17","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3842,"name":"Approval","nameLocation":"587:8:17","nodeType":"EventDefinition","parameters":{"id":3841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3836,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:17","nodeType":"VariableDeclaration","scope":3842,"src":"596:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3835,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3838,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:17","nodeType":"VariableDeclaration","scope":3842,"src":"619:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3837,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3840,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:17","nodeType":"VariableDeclaration","scope":3842,"src":"645:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3839,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:17"},"src":"581:89:17"},{"anonymous":false,"documentation":{"id":3843,"nodeType":"StructuredDocumentation","src":"676:117:17","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3851,"name":"ApprovalForAll","nameLocation":"804:14:17","nodeType":"EventDefinition","parameters":{"id":3850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3845,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:17","nodeType":"VariableDeclaration","scope":3851,"src":"819:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3844,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3847,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:17","nodeType":"VariableDeclaration","scope":3851,"src":"842:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3846,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3849,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:17","nodeType":"VariableDeclaration","scope":3851,"src":"868:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3848,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:17"},"src":"798:85:17"},{"documentation":{"id":3852,"nodeType":"StructuredDocumentation","src":"889:76:17","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":3859,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:17","nodeType":"FunctionDefinition","parameters":{"id":3855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3854,"mutability":"mutable","name":"owner","nameLocation":"997:5:17","nodeType":"VariableDeclaration","scope":3859,"src":"989:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3853,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:17"},"returnParameters":{"id":3858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3857,"mutability":"mutable","name":"balance","nameLocation":"1035:7:17","nodeType":"VariableDeclaration","scope":3859,"src":"1027:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3856,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:17"},"scope":3934,"src":"970:74:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3860,"nodeType":"StructuredDocumentation","src":"1050:131:17","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":3867,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:17","nodeType":"FunctionDefinition","parameters":{"id":3863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3862,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:17","nodeType":"VariableDeclaration","scope":3867,"src":"1203:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:17"},"returnParameters":{"id":3866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3865,"mutability":"mutable","name":"owner","nameLocation":"1251:5:17","nodeType":"VariableDeclaration","scope":3867,"src":"1243:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3864,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:17"},"scope":3934,"src":"1186:72:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3868,"nodeType":"StructuredDocumentation","src":"1264:565:17","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":3879,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:17","nodeType":"FunctionDefinition","parameters":{"id":3877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3870,"mutability":"mutable","name":"from","nameLocation":"1868:4:17","nodeType":"VariableDeclaration","scope":3879,"src":"1860:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3869,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3872,"mutability":"mutable","name":"to","nameLocation":"1882:2:17","nodeType":"VariableDeclaration","scope":3879,"src":"1874:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3871,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3874,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:17","nodeType":"VariableDeclaration","scope":3879,"src":"1886:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3873,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3876,"mutability":"mutable","name":"data","nameLocation":"1918:4:17","nodeType":"VariableDeclaration","scope":3879,"src":"1903:19:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3875,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:17"},"returnParameters":{"id":3878,"nodeType":"ParameterList","parameters":[],"src":"1932:0:17"},"scope":3934,"src":"1834:99:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3880,"nodeType":"StructuredDocumentation","src":"1939:705:17","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":3889,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:17","nodeType":"FunctionDefinition","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3882,"mutability":"mutable","name":"from","nameLocation":"2683:4:17","nodeType":"VariableDeclaration","scope":3889,"src":"2675:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3881,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3884,"mutability":"mutable","name":"to","nameLocation":"2697:2:17","nodeType":"VariableDeclaration","scope":3889,"src":"2689:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3883,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3886,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:17","nodeType":"VariableDeclaration","scope":3889,"src":"2701:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:17"},"returnParameters":{"id":3888,"nodeType":"ParameterList","parameters":[],"src":"2726:0:17"},"scope":3934,"src":"2649:78:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3890,"nodeType":"StructuredDocumentation","src":"2733:732:17","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3899,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:17","nodeType":"FunctionDefinition","parameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3892,"mutability":"mutable","name":"from","nameLocation":"3500:4:17","nodeType":"VariableDeclaration","scope":3899,"src":"3492:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3891,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3894,"mutability":"mutable","name":"to","nameLocation":"3514:2:17","nodeType":"VariableDeclaration","scope":3899,"src":"3506:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3893,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3896,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:17","nodeType":"VariableDeclaration","scope":3899,"src":"3518:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:17"},"returnParameters":{"id":3898,"nodeType":"ParameterList","parameters":[],"src":"3543:0:17"},"scope":3934,"src":"3470:74:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3900,"nodeType":"StructuredDocumentation","src":"3550:452:17","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3907,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:17","nodeType":"FunctionDefinition","parameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3902,"mutability":"mutable","name":"to","nameLocation":"4032:2:17","nodeType":"VariableDeclaration","scope":3907,"src":"4024:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3901,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3904,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:17","nodeType":"VariableDeclaration","scope":3907,"src":"4036:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3903,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:17"},"returnParameters":{"id":3906,"nodeType":"ParameterList","parameters":[],"src":"4061:0:17"},"scope":3934,"src":"4007:55:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3908,"nodeType":"StructuredDocumentation","src":"4068:315:17","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":3915,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:17","nodeType":"FunctionDefinition","parameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3910,"mutability":"mutable","name":"operator","nameLocation":"4423:8:17","nodeType":"VariableDeclaration","scope":3915,"src":"4415:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3909,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3912,"mutability":"mutable","name":"approved","nameLocation":"4438:8:17","nodeType":"VariableDeclaration","scope":3915,"src":"4433:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3911,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:17"},"returnParameters":{"id":3914,"nodeType":"ParameterList","parameters":[],"src":"4456:0:17"},"scope":3934,"src":"4388:69:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3916,"nodeType":"StructuredDocumentation","src":"4463:139:17","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":3923,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:17","nodeType":"FunctionDefinition","parameters":{"id":3919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3918,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:17","nodeType":"VariableDeclaration","scope":3923,"src":"4628:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3917,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:17"},"returnParameters":{"id":3922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3921,"mutability":"mutable","name":"operator","nameLocation":"4676:8:17","nodeType":"VariableDeclaration","scope":3923,"src":"4668:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3920,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:17"},"scope":3934,"src":"4607:79:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3924,"nodeType":"StructuredDocumentation","src":"4692:138:17","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":3933,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:17","nodeType":"FunctionDefinition","parameters":{"id":3929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"mutability":"mutable","name":"owner","nameLocation":"4869:5:17","nodeType":"VariableDeclaration","scope":3933,"src":"4861:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3925,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"operator","nameLocation":"4884:8:17","nodeType":"VariableDeclaration","scope":3933,"src":"4876:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3927,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:17"},"returnParameters":{"id":3932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3933,"src":"4917:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3930,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:17"},"scope":3934,"src":"4835:88:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3935,"src":"266:4659:17","usedErrors":[],"usedEvents":[3833,3842,3851]}],"src":"108:4818:17"},"id":17},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[3952]},"id":3953,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3936,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":3937,"nodeType":"StructuredDocumentation","src":"142:152:18","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":3952,"linearizedBaseContracts":[3952],"name":"IERC721Receiver","nameLocation":"305:15:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3938,"nodeType":"StructuredDocumentation","src":"327:500:18","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":3951,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:18","nodeType":"FunctionDefinition","parameters":{"id":3947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"operator","nameLocation":"875:8:18","nodeType":"VariableDeclaration","scope":3951,"src":"867:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3939,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3942,"mutability":"mutable","name":"from","nameLocation":"901:4:18","nodeType":"VariableDeclaration","scope":3951,"src":"893:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3941,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3944,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:18","nodeType":"VariableDeclaration","scope":3951,"src":"915:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3943,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3946,"mutability":"mutable","name":"data","nameLocation":"955:4:18","nodeType":"VariableDeclaration","scope":3951,"src":"940:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3945,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:18"},"returnParameters":{"id":3950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3949,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3951,"src":"984:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3948,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:18"},"scope":3952,"src":"832:160:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3953,"src":"295:699:18","usedErrors":[],"usedEvents":[]}],"src":"116:879:18"},"id":18},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[3934],"IERC721Metadata":[3980]},"id":3981,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3954,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":3956,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3981,"sourceUnit":3935,"src":"153:39:19","symbolAliases":[{"foreign":{"id":3955,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3934,"src":"161:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3958,"name":"IERC721","nameLocations":["357:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3934,"src":"357:7:19"},"id":3959,"nodeType":"InheritanceSpecifier","src":"357:7:19"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":3957,"nodeType":"StructuredDocumentation","src":"194:133:19","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":3980,"linearizedBaseContracts":[3980,3934,4293],"name":"IERC721Metadata","nameLocation":"338:15:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3960,"nodeType":"StructuredDocumentation","src":"371:58:19","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":3965,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:19","nodeType":"FunctionDefinition","parameters":{"id":3961,"nodeType":"ParameterList","parameters":[],"src":"447:2:19"},"returnParameters":{"id":3964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3965,"src":"473:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3962,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:19"},"scope":3980,"src":"434:54:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3966,"nodeType":"StructuredDocumentation","src":"494:60:19","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":3971,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:19","nodeType":"FunctionDefinition","parameters":{"id":3967,"nodeType":"ParameterList","parameters":[],"src":"574:2:19"},"returnParameters":{"id":3970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3971,"src":"600:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3968,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:19"},"scope":3980,"src":"559:56:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3972,"nodeType":"StructuredDocumentation","src":"621:90:19","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":3979,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:19","nodeType":"FunctionDefinition","parameters":{"id":3975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3974,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:19","nodeType":"VariableDeclaration","scope":3979,"src":"734:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3973,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:19"},"returnParameters":{"id":3978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3977,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3979,"src":"774:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3976,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:19"},"scope":3980,"src":"716:73:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3981,"src":"328:463:19","usedErrors":[],"usedEvents":[3833,3842,3851]}],"src":"127:665:19"},"id":19},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[4002]},"id":4003,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3982,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:20"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3983,"nodeType":"StructuredDocumentation","src":"127:496:20","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":4002,"linearizedBaseContracts":[4002],"name":"Context","nameLocation":"642:7:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":3991,"nodeType":"Block","src":"718:34:20","statements":[{"expression":{"expression":{"id":3988,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:20","memberName":"sender","nodeType":"MemberAccess","src":"735:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3987,"id":3990,"nodeType":"Return","src":"728:17:20"}]},"id":3992,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:20","nodeType":"FunctionDefinition","parameters":{"id":3984,"nodeType":"ParameterList","parameters":[],"src":"675:2:20"},"returnParameters":{"id":3987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3992,"src":"709:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3985,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:20"},"scope":4002,"src":"656:96:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4000,"nodeType":"Block","src":"825:32:20","statements":[{"expression":{"expression":{"id":3997,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:20","memberName":"data","nodeType":"MemberAccess","src":"842:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3996,"id":3999,"nodeType":"Return","src":"835:15:20"}]},"id":4001,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:20","nodeType":"FunctionDefinition","parameters":{"id":3993,"nodeType":"ParameterList","parameters":[],"src":"775:2:20"},"returnParameters":{"id":3996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4001,"src":"809:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3994,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:20"},"scope":4002,"src":"758:99:20","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4003,"src":"624:235:20","usedErrors":[],"usedEvents":[]}],"src":"101:759:20"},"id":20},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[5347],"SignedMath":[5452],"Strings":[4257]},"id":4258,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4004,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:21"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":4006,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4258,"sourceUnit":5348,"src":"127:37:21","symbolAliases":[{"foreign":{"id":4005,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5347,"src":"135:4:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":4008,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4258,"sourceUnit":5453,"src":"165:49:21","symbolAliases":[{"foreign":{"id":4007,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"173:10:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":4009,"nodeType":"StructuredDocumentation","src":"216:34:21","text":" @dev String operations."},"fullyImplemented":true,"id":4257,"linearizedBaseContracts":[4257],"name":"Strings","nameLocation":"259:7:21","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":4012,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:21","nodeType":"VariableDeclaration","scope":4257,"src":"273:56:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":4010,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":4011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":4015,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:21","nodeType":"VariableDeclaration","scope":4257,"src":"335:42:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4013,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":4014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":4016,"nodeType":"StructuredDocumentation","src":"384:81:21","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":4022,"name":"StringsInsufficientHexLength","nameLocation":"476:28:21","nodeType":"ErrorDefinition","parameters":{"id":4021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"value","nameLocation":"513:5:21","nodeType":"VariableDeclaration","scope":4022,"src":"505:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4017,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4020,"mutability":"mutable","name":"length","nameLocation":"528:6:21","nodeType":"VariableDeclaration","scope":4022,"src":"520:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4019,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:21"},"src":"470:66:21"},{"body":{"id":4069,"nodeType":"Block","src":"708:627:21","statements":[{"id":4068,"nodeType":"UncheckedBlock","src":"718:611:21","statements":[{"assignments":[4031],"declarations":[{"constant":false,"id":4031,"mutability":"mutable","name":"length","nameLocation":"750:6:21","nodeType":"VariableDeclaration","scope":4068,"src":"742:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4030,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4038,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"770:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4032,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5347,"src":"759:4:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5347_$","typeString":"type(library Math)"}},"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:21","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":5167,"src":"759:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:21"},{"assignments":[4040],"declarations":[{"constant":false,"id":4040,"mutability":"mutable","name":"buffer","nameLocation":"808:6:21","nodeType":"VariableDeclaration","scope":4068,"src":"794:20:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4039,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4045,"initialValue":{"arguments":[{"id":4043,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"828:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":4041,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:21"},{"assignments":[4047],"declarations":[{"constant":false,"id":4047,"mutability":"mutable","name":"ptr","nameLocation":"857:3:21","nodeType":"VariableDeclaration","scope":4068,"src":"849:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4046,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4048,"nodeType":"VariableDeclarationStatement","src":"849:11:21"},{"AST":{"nodeType":"YulBlock","src":"930:67:21","statements":[{"nodeType":"YulAssignment","src":"948:35:21","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:21","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:21"},"nodeType":"YulFunctionCall","src":"967:15:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:21"},"nodeType":"YulFunctionCall","src":"955:28:21"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4040,"isOffset":false,"isSlot":false,"src":"959:6:21","valueSize":1},{"declaration":4031,"isOffset":false,"isSlot":false,"src":"975:6:21","valueSize":1},{"declaration":4047,"isOffset":false,"isSlot":false,"src":"948:3:21","valueSize":1}],"id":4049,"nodeType":"InlineAssembly","src":"921:76:21"},{"body":{"id":4064,"nodeType":"Block","src":"1023:269:21","statements":[{"expression":{"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:21","subExpression":{"id":4051,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"1041:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4053,"nodeType":"ExpressionStatement","src":"1041:5:21"},{"AST":{"nodeType":"YulBlock","src":"1124:86:21","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:21","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:21"},"nodeType":"YulFunctionCall","src":"1164:14:21"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:21"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:21"},"nodeType":"YulFunctionCall","src":"1159:32:21"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:21"},"nodeType":"YulFunctionCall","src":"1146:46:21"},"nodeType":"YulExpressionStatement","src":"1146:46:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4012,"isOffset":false,"isSlot":false,"src":"1180:10:21","valueSize":1},{"declaration":4047,"isOffset":false,"isSlot":false,"src":"1154:3:21","valueSize":1},{"declaration":4025,"isOffset":false,"isSlot":false,"src":"1168:5:21","valueSize":1}],"id":4054,"nodeType":"InlineAssembly","src":"1115:95:21"},{"expression":{"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"1227:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":4056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4058,"nodeType":"ExpressionStatement","src":"1227:11:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"1260:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4063,"nodeType":"IfStatement","src":"1256:21:21","trueBody":{"id":4062,"nodeType":"Break","src":"1272:5:21"}}]},"condition":{"hexValue":"74727565","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":4065,"nodeType":"WhileStatement","src":"1010:282:21"},{"expression":{"id":4066,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"1312:6:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4029,"id":4067,"nodeType":"Return","src":"1305:13:21"}]}]},"documentation":{"id":4023,"nodeType":"StructuredDocumentation","src":"542:90:21","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":4070,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:21","nodeType":"FunctionDefinition","parameters":{"id":4026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4025,"mutability":"mutable","name":"value","nameLocation":"663:5:21","nodeType":"VariableDeclaration","scope":4070,"src":"655:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4024,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:21"},"returnParameters":{"id":4029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4070,"src":"693:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4027,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:21"},"scope":4257,"src":"637:698:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4095,"nodeType":"Block","src":"1511:92:21","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"1542:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":4085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:21","trueExpression":{"hexValue":"2d","id":4084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":4090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"1588:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":4088,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"1573:10:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5452_$","typeString":"type(library SignedMath)"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:21","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5451,"src":"1573:14:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4087,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4070,"src":"1564:8:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4078,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:21","typeDescriptions":{}}},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:21","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:21","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4077,"id":4094,"nodeType":"Return","src":"1521:75:21"}]},"documentation":{"id":4071,"nodeType":"StructuredDocumentation","src":"1341:89:21","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":4096,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:21","nodeType":"FunctionDefinition","parameters":{"id":4074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4073,"mutability":"mutable","name":"value","nameLocation":"1466:5:21","nodeType":"VariableDeclaration","scope":4096,"src":"1459:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4072,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:21"},"returnParameters":{"id":4077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4096,"src":"1496:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4075,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:21"},"scope":4257,"src":"1435:168:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4115,"nodeType":"Block","src":"1782:100:21","statements":[{"id":4114,"nodeType":"UncheckedBlock","src":"1792:84:21","statements":[{"expression":{"arguments":[{"id":4105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"1835:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"1854:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4106,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5347,"src":"1842:4:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5347_$","typeString":"type(library Math)"}},"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:21","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":5289,"src":"1842:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4104,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[4116,4199,4219],"referencedDeclaration":4199,"src":"1823:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4103,"id":4113,"nodeType":"Return","src":"1816:49:21"}]}]},"documentation":{"id":4097,"nodeType":"StructuredDocumentation","src":"1609:94:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":4116,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:21","nodeType":"FunctionDefinition","parameters":{"id":4100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4099,"mutability":"mutable","name":"value","nameLocation":"1737:5:21","nodeType":"VariableDeclaration","scope":4116,"src":"1729:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4098,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:21"},"returnParameters":{"id":4103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4116,"src":"1767:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4101,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:21"},"scope":4257,"src":"1708:174:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4198,"nodeType":"Block","src":"2095:435:21","statements":[{"assignments":[4127],"declarations":[{"constant":false,"id":4127,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:21","nodeType":"VariableDeclaration","scope":4198,"src":"2105:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4126,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4129,"initialValue":{"id":4128,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2126:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:21"},{"assignments":[4131],"declarations":[{"constant":false,"id":4131,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:21","nodeType":"VariableDeclaration","scope":4198,"src":"2141:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4130,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4140,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4135,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2177:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":4137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4132,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:21"},{"expression":{"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4141,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"2198:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4143,"indexExpression":{"hexValue":"30","id":4142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4146,"nodeType":"ExpressionStatement","src":"2198:15:21"},{"expression":{"id":4151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4147,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"2223:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4149,"indexExpression":{"hexValue":"31","id":4148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":4150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4152,"nodeType":"ExpressionStatement","src":"2223:15:21"},{"body":{"id":4181,"nodeType":"Block","src":"2293:95:21","statements":[{"expression":{"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4167,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"2307:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4169,"indexExpression":{"id":4168,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"2314:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4170,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"2319:10:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":4174,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4171,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"2330:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":4172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:21","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4176,"nodeType":"ExpressionStatement","src":"2307:40:21"},{"expression":{"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4177,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"2361:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4180,"nodeType":"ExpressionStatement","src":"2361:16:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4161,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"2281:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":4162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4182,"initializationExpression":{"assignments":[4154],"declarations":[{"constant":false,"id":4154,"mutability":"mutable","name":"i","nameLocation":"2261:1:21","nodeType":"VariableDeclaration","scope":4182,"src":"2253:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4153,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4160,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4156,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2269:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:21"},"loopExpression":{"expression":{"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:21","subExpression":{"id":4164,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"2290:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4166,"nodeType":"ExpressionStatement","src":"2288:3:21"},"nodeType":"ForStatement","src":"2248:140:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4183,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"2401:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4192,"nodeType":"IfStatement","src":"2397:96:21","trueBody":{"id":4191,"nodeType":"Block","src":"2418:75:21","statements":[{"errorCall":{"arguments":[{"id":4187,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2468:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4188,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2475:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4186,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"2439:28:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4190,"nodeType":"RevertStatement","src":"2432:50:21"}]}},{"expression":{"arguments":[{"id":4195,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"2516:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4193,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:21","typeDescriptions":{}}},"id":4196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4125,"id":4197,"nodeType":"Return","src":"2502:21:21"}]},"documentation":{"id":4117,"nodeType":"StructuredDocumentation","src":"1888:112:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":4199,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:21","nodeType":"FunctionDefinition","parameters":{"id":4122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4119,"mutability":"mutable","name":"value","nameLocation":"2034:5:21","nodeType":"VariableDeclaration","scope":4199,"src":"2026:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4118,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4121,"mutability":"mutable","name":"length","nameLocation":"2049:6:21","nodeType":"VariableDeclaration","scope":4199,"src":"2041:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:21"},"returnParameters":{"id":4125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4199,"src":"2080:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4123,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:21"},"scope":4257,"src":"2005:525:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4218,"nodeType":"Block","src":"2762:75:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":4212,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4202,"src":"2807:4:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4210,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:21","typeDescriptions":{}}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4208,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:21","typeDescriptions":{}}},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4215,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4015,"src":"2815:14:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4207,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[4116,4199,4219],"referencedDeclaration":4199,"src":"2779:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4206,"id":4217,"nodeType":"Return","src":"2772:58:21"}]},"documentation":{"id":4200,"nodeType":"StructuredDocumentation","src":"2536:148:21","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":4219,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:21","nodeType":"FunctionDefinition","parameters":{"id":4203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4202,"mutability":"mutable","name":"addr","nameLocation":"2718:4:21","nodeType":"VariableDeclaration","scope":4219,"src":"2710:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4201,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:21"},"returnParameters":{"id":4206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4219,"src":"2747:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4204,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:21"},"scope":4257,"src":"2689:148:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4255,"nodeType":"Block","src":"2992:104:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4231,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"3015:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4229,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:21","typeDescriptions":{}}},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:21","memberName":"length","nodeType":"MemberAccess","src":"3009:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4236,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"3034:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4234,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:21","typeDescriptions":{}}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:21","memberName":"length","nodeType":"MemberAccess","src":"3028:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4243,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"3063:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4241,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:21","typeDescriptions":{}}},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4240,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":4249,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"3086:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4247,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:21","typeDescriptions":{}}},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4246,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4228,"id":4254,"nodeType":"Return","src":"3002:87:21"}]},"documentation":{"id":4220,"nodeType":"StructuredDocumentation","src":"2843:66:21","text":" @dev Returns true if the two strings are equal."},"id":4256,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:21","nodeType":"FunctionDefinition","parameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4222,"mutability":"mutable","name":"a","nameLocation":"2943:1:21","nodeType":"VariableDeclaration","scope":4256,"src":"2929:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4221,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4224,"mutability":"mutable","name":"b","nameLocation":"2960:1:21","nodeType":"VariableDeclaration","scope":4256,"src":"2946:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4223,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:21"},"returnParameters":{"id":4228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4256,"src":"2986:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4226,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:21"},"scope":4257,"src":"2914:182:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4258,"src":"251:2847:21","usedErrors":[4022],"usedEvents":[]}],"src":"101:2998:21"},"id":21},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[4281],"IERC165":[4293]},"id":4282,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4259,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:22"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":4261,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4282,"sourceUnit":4294,"src":"140:38:22","symbolAliases":[{"foreign":{"id":4260,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"148:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4263,"name":"IERC165","nameLocations":["687:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":4293,"src":"687:7:22"},"id":4264,"nodeType":"InheritanceSpecifier","src":"687:7:22"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":4262,"nodeType":"StructuredDocumentation","src":"180:478:22","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":4281,"linearizedBaseContracts":[4281,4293],"name":"ERC165","nameLocation":"677:6:22","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[4292],"body":{"id":4279,"nodeType":"Block","src":"844:64:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4272,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"861:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4274,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4293,"src":"881:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$4293_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$4293_$","typeString":"type(contract IERC165)"}],"id":4273,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$4293","typeString":"type(contract IERC165)"}},"id":4276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:22","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4271,"id":4278,"nodeType":"Return","src":"854:47:22"}]},"documentation":{"id":4265,"nodeType":"StructuredDocumentation","src":"701:56:22","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":4280,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:22","nodeType":"FunctionDefinition","parameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:22","nodeType":"VariableDeclaration","scope":4280,"src":"789:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4266,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:22"},"returnParameters":{"id":4271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4280,"src":"838:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4269,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:22"},"scope":4281,"src":"762:146:22","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":4282,"src":"659:251:22","usedErrors":[],"usedEvents":[]}],"src":"114:797:22"},"id":22},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[4293]},"id":4294,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4283,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":4284,"nodeType":"StructuredDocumentation","src":"141:279:23","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":4293,"linearizedBaseContracts":[4293],"name":"IERC165","nameLocation":"431:7:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4285,"nodeType":"StructuredDocumentation","src":"445:340:23","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":4292,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:23","nodeType":"FunctionDefinition","parameters":{"id":4288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4287,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:23","nodeType":"VariableDeclaration","scope":4292,"src":"817:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4286,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:23"},"returnParameters":{"id":4291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4292,"src":"860:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4289,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:23"},"scope":4293,"src":"790:76:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4294,"src":"421:447:23","usedErrors":[],"usedEvents":[]}],"src":"115:754:23"},"id":23},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[5347]},"id":5348,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4295,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":4296,"nodeType":"StructuredDocumentation","src":"129:73:24","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5347,"linearizedBaseContracts":[5347],"name":"Math","nameLocation":"211:4:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4297,"nodeType":"StructuredDocumentation","src":"222:50:24","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":4299,"name":"MathOverflowedMulDiv","nameLocation":"283:20:24","nodeType":"ErrorDefinition","parameters":{"id":4298,"nodeType":"ParameterList","parameters":[],"src":"303:2:24"},"src":"277:29:24"},{"canonicalName":"Math.Rounding","id":4304,"members":[{"id":4300,"name":"Floor","nameLocation":"336:5:24","nodeType":"EnumValue","src":"336:5:24"},{"id":4301,"name":"Ceil","nameLocation":"379:4:24","nodeType":"EnumValue","src":"379:4:24"},{"id":4302,"name":"Trunc","nameLocation":"421:5:24","nodeType":"EnumValue","src":"421:5:24"},{"id":4303,"name":"Expand","nameLocation":"451:6:24","nodeType":"EnumValue","src":"451:6:24"}],"name":"Rounding","nameLocation":"317:8:24","nodeType":"EnumDefinition","src":"312:169:24"},{"body":{"id":4335,"nodeType":"Block","src":"661:140:24","statements":[{"id":4334,"nodeType":"UncheckedBlock","src":"671:124:24","statements":[{"assignments":[4317],"declarations":[{"constant":false,"id":4317,"mutability":"mutable","name":"c","nameLocation":"703:1:24","nodeType":"VariableDeclaration","scope":4334,"src":"695:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4316,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4321,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4318,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"707:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4319,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4309,"src":"711:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4322,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"730:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4323,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4307,"src":"734:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4329,"nodeType":"IfStatement","src":"726:28:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4327,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4315,"id":4328,"nodeType":"Return","src":"737:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":4331,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"782:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4332,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4315,"id":4333,"nodeType":"Return","src":"768:16:24"}]}]},"documentation":{"id":4305,"nodeType":"StructuredDocumentation","src":"487:93:24","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":4336,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:24","nodeType":"FunctionDefinition","parameters":{"id":4310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4307,"mutability":"mutable","name":"a","nameLocation":"609:1:24","nodeType":"VariableDeclaration","scope":4336,"src":"601:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4309,"mutability":"mutable","name":"b","nameLocation":"620:1:24","nodeType":"VariableDeclaration","scope":4336,"src":"612:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4308,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:24"},"returnParameters":{"id":4315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4336,"src":"646:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4311,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4336,"src":"652:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4313,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:24"},"scope":5347,"src":"585:216:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4363,"nodeType":"Block","src":"984:113:24","statements":[{"id":4362,"nodeType":"UncheckedBlock","src":"994:97:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4348,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"1022:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4349,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"1026:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4355,"nodeType":"IfStatement","src":"1018:28:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4353,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4347,"id":4354,"nodeType":"Return","src":"1029:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4357,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"1074:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"1078:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4360,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4347,"id":4361,"nodeType":"Return","src":"1060:20:24"}]}]},"documentation":{"id":4337,"nodeType":"StructuredDocumentation","src":"807:96:24","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":4364,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:24","nodeType":"FunctionDefinition","parameters":{"id":4342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4339,"mutability":"mutable","name":"a","nameLocation":"932:1:24","nodeType":"VariableDeclaration","scope":4364,"src":"924:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4338,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4341,"mutability":"mutable","name":"b","nameLocation":"943:1:24","nodeType":"VariableDeclaration","scope":4364,"src":"935:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4340,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:24"},"returnParameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4364,"src":"969:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4343,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4364,"src":"975:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4345,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:24"},"scope":5347,"src":"908:189:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4405,"nodeType":"Block","src":"1283:417:24","statements":[{"id":4404,"nodeType":"UncheckedBlock","src":"1293:401:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4376,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"1551:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4383,"nodeType":"IfStatement","src":"1547:28:24","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":4379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":4380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4381,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4375,"id":4382,"nodeType":"Return","src":"1559:16:24"}},{"assignments":[4385],"declarations":[{"constant":false,"id":4385,"mutability":"mutable","name":"c","nameLocation":"1597:1:24","nodeType":"VariableDeclaration","scope":4404,"src":"1589:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4384,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4389,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4386,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"1601:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4387,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"1605:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4390,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"1624:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4391,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"1628:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4393,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"1633:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4399,"nodeType":"IfStatement","src":"1620:33:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4397,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4375,"id":4398,"nodeType":"Return","src":"1636:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":4401,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"1681:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4402,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4375,"id":4403,"nodeType":"Return","src":"1667:16:24"}]}]},"documentation":{"id":4365,"nodeType":"StructuredDocumentation","src":"1103:99:24","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":4406,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:24","nodeType":"FunctionDefinition","parameters":{"id":4370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4367,"mutability":"mutable","name":"a","nameLocation":"1231:1:24","nodeType":"VariableDeclaration","scope":4406,"src":"1223:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4366,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4369,"mutability":"mutable","name":"b","nameLocation":"1242:1:24","nodeType":"VariableDeclaration","scope":4406,"src":"1234:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4368,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:24"},"returnParameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4406,"src":"1268:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4371,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4406,"src":"1274:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4373,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:24"},"scope":5347,"src":"1207:493:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4433,"nodeType":"Block","src":"1887:114:24","statements":[{"id":4432,"nodeType":"UncheckedBlock","src":"1897:98:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4418,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4411,"src":"1925:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4425,"nodeType":"IfStatement","src":"1921:29:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4423,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4417,"id":4424,"nodeType":"Return","src":"1933:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4427,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4409,"src":"1978:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4428,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4411,"src":"1982:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4430,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4417,"id":4431,"nodeType":"Return","src":"1964:20:24"}]}]},"documentation":{"id":4407,"nodeType":"StructuredDocumentation","src":"1706:100:24","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":4434,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:24","nodeType":"FunctionDefinition","parameters":{"id":4412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4409,"mutability":"mutable","name":"a","nameLocation":"1835:1:24","nodeType":"VariableDeclaration","scope":4434,"src":"1827:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4408,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4411,"mutability":"mutable","name":"b","nameLocation":"1846:1:24","nodeType":"VariableDeclaration","scope":4434,"src":"1838:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4410,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:24"},"returnParameters":{"id":4417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4434,"src":"1872:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4413,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4434,"src":"1878:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4415,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:24"},"scope":5347,"src":"1811:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4461,"nodeType":"Block","src":"2198:114:24","statements":[{"id":4460,"nodeType":"UncheckedBlock","src":"2208:98:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4446,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4439,"src":"2236:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4453,"nodeType":"IfStatement","src":"2232:29:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4451,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4445,"id":4452,"nodeType":"Return","src":"2244:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4455,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4437,"src":"2289:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4456,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4439,"src":"2293:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4458,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4445,"id":4459,"nodeType":"Return","src":"2275:20:24"}]}]},"documentation":{"id":4435,"nodeType":"StructuredDocumentation","src":"2007:110:24","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":4462,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:24","nodeType":"FunctionDefinition","parameters":{"id":4440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4437,"mutability":"mutable","name":"a","nameLocation":"2146:1:24","nodeType":"VariableDeclaration","scope":4462,"src":"2138:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4436,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4439,"mutability":"mutable","name":"b","nameLocation":"2157:1:24","nodeType":"VariableDeclaration","scope":4462,"src":"2149:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4438,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:24"},"returnParameters":{"id":4445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4462,"src":"2183:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4441,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4462,"src":"2189:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4443,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:24"},"scope":5347,"src":"2122:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4479,"nodeType":"Block","src":"2449:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4472,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4465,"src":"2466:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4473,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"2470:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4476,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"2478:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:24","trueExpression":{"id":4475,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4465,"src":"2474:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4471,"id":4478,"nodeType":"Return","src":"2459:20:24"}]},"documentation":{"id":4463,"nodeType":"StructuredDocumentation","src":"2318:59:24","text":" @dev Returns the largest of two numbers."},"id":4480,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:24","nodeType":"FunctionDefinition","parameters":{"id":4468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4465,"mutability":"mutable","name":"a","nameLocation":"2403:1:24","nodeType":"VariableDeclaration","scope":4480,"src":"2395:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4464,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4467,"mutability":"mutable","name":"b","nameLocation":"2414:1:24","nodeType":"VariableDeclaration","scope":4480,"src":"2406:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4466,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:24"},"returnParameters":{"id":4471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4480,"src":"2440:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4469,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:24"},"scope":5347,"src":"2382:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4497,"nodeType":"Block","src":"2624:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4490,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"2641:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4491,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4485,"src":"2645:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4494,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4485,"src":"2653:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:24","trueExpression":{"id":4493,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"2649:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4489,"id":4496,"nodeType":"Return","src":"2634:20:24"}]},"documentation":{"id":4481,"nodeType":"StructuredDocumentation","src":"2492:60:24","text":" @dev Returns the smallest of two numbers."},"id":4498,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:24","nodeType":"FunctionDefinition","parameters":{"id":4486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4483,"mutability":"mutable","name":"a","nameLocation":"2578:1:24","nodeType":"VariableDeclaration","scope":4498,"src":"2570:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4482,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4485,"mutability":"mutable","name":"b","nameLocation":"2589:1:24","nodeType":"VariableDeclaration","scope":4498,"src":"2581:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4484,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:24"},"returnParameters":{"id":4489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4498,"src":"2615:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4487,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:24"},"scope":5347,"src":"2557:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4520,"nodeType":"Block","src":"2845:82:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4508,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4501,"src":"2900:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4509,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"2904:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4511,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4512,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4501,"src":"2910:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4513,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"2914:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4507,"id":4519,"nodeType":"Return","src":"2892:28:24"}]},"documentation":{"id":4499,"nodeType":"StructuredDocumentation","src":"2667:102:24","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4521,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:24","nodeType":"FunctionDefinition","parameters":{"id":4504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4501,"mutability":"mutable","name":"a","nameLocation":"2799:1:24","nodeType":"VariableDeclaration","scope":4521,"src":"2791:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4500,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4503,"mutability":"mutable","name":"b","nameLocation":"2810:1:24","nodeType":"VariableDeclaration","scope":4521,"src":"2802:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4502,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:24"},"returnParameters":{"id":4507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4521,"src":"2836:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4505,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:24"},"scope":5347,"src":"2774:153:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4554,"nodeType":"Block","src":"3219:260:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4531,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4526,"src":"3233:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4539,"nodeType":"IfStatement","src":"3229:127:24","trueBody":{"id":4538,"nodeType":"Block","src":"3241:115:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4534,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"3340:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4535,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4526,"src":"3344:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4530,"id":4537,"nodeType":"Return","src":"3333:12:24"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4540,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"3444:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4544,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4524,"src":"3458:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4547,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4548,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4526,"src":"3467:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:24","trueExpression":{"hexValue":"30","id":4543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4530,"id":4553,"nodeType":"Return","src":"3437:35:24"}]},"documentation":{"id":4522,"nodeType":"StructuredDocumentation","src":"2933:210:24","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":4555,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:24","nodeType":"FunctionDefinition","parameters":{"id":4527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4524,"mutability":"mutable","name":"a","nameLocation":"3173:1:24","nodeType":"VariableDeclaration","scope":4555,"src":"3165:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4523,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4526,"mutability":"mutable","name":"b","nameLocation":"3184:1:24","nodeType":"VariableDeclaration","scope":4555,"src":"3176:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4525,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:24"},"returnParameters":{"id":4530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4555,"src":"3210:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4528,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:24"},"scope":5347,"src":"3148:331:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4680,"nodeType":"Block","src":"3901:4018:24","statements":[{"id":4679,"nodeType":"UncheckedBlock","src":"3911:4002:24","statements":[{"assignments":[4568],"declarations":[{"constant":false,"id":4568,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:24","nodeType":"VariableDeclaration","scope":4679,"src":"4232:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4567,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4572,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4569,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4558,"src":"4248:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4570,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4560,"src":"4252:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:24"},{"assignments":[4574],"declarations":[{"constant":false,"id":4574,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:24","nodeType":"VariableDeclaration","scope":4679,"src":"4312:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4573,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4575,"nodeType":"VariableDeclarationStatement","src":"4312:13:24"},{"AST":{"nodeType":"YulBlock","src":"4392:122:24","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:24"},"nodeType":"YulFunctionCall","src":"4433:6:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:24"},"nodeType":"YulFunctionCall","src":"4420:20:24"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:24","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:24","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:24"},"nodeType":"YulFunctionCall","src":"4470:14:24"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:24"},"nodeType":"YulFunctionCall","src":"4486:13:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:24"},"nodeType":"YulFunctionCall","src":"4466:34:24"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4568,"isOffset":false,"isSlot":false,"src":"4478:5:24","valueSize":1},{"declaration":4568,"isOffset":false,"isSlot":false,"src":"4493:5:24","valueSize":1},{"declaration":4574,"isOffset":false,"isSlot":false,"src":"4457:5:24","valueSize":1},{"declaration":4558,"isOffset":false,"isSlot":false,"src":"4427:1:24","valueSize":1},{"declaration":4560,"isOffset":false,"isSlot":false,"src":"4430:1:24","valueSize":1}],"id":4576,"nodeType":"InlineAssembly","src":"4383:131:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4577,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"4595:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4585,"nodeType":"IfStatement","src":"4591:368:24","trueBody":{"id":4584,"nodeType":"Block","src":"4607:352:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4580,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4568,"src":"4925:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4581,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"4933:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4566,"id":4583,"nodeType":"Return","src":"4918:26:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4586,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"5065:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4587,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"5080:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4593,"nodeType":"IfStatement","src":"5061:88:24","trueBody":{"id":4592,"nodeType":"Block","src":"5087:62:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4589,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4299,"src":"5112:20:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4591,"nodeType":"RevertStatement","src":"5105:29:24"}]}},{"assignments":[4595],"declarations":[{"constant":false,"id":4595,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:24","nodeType":"VariableDeclaration","scope":4679,"src":"5404:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4594,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4596,"nodeType":"VariableDeclarationStatement","src":"5404:17:24"},{"AST":{"nodeType":"YulBlock","src":"5444:291:24","statements":[{"nodeType":"YulAssignment","src":"5513:38:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:24"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:24"},"nodeType":"YulFunctionCall","src":"5526:25:24"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:24"}]},{"nodeType":"YulAssignment","src":"5633:41:24","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:24"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:24"},"nodeType":"YulFunctionCall","src":"5653:20:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:24"},"nodeType":"YulFunctionCall","src":"5642:32:24"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:24"}]},{"nodeType":"YulAssignment","src":"5691:30:24","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:24"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:24"},"nodeType":"YulFunctionCall","src":"5700:21:24"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4562,"isOffset":false,"isSlot":false,"src":"5539:11:24","valueSize":1},{"declaration":4568,"isOffset":false,"isSlot":false,"src":"5667:5:24","valueSize":1},{"declaration":4568,"isOffset":false,"isSlot":false,"src":"5691:5:24","valueSize":1},{"declaration":4568,"isOffset":false,"isSlot":false,"src":"5704:5:24","valueSize":1},{"declaration":4574,"isOffset":false,"isSlot":false,"src":"5633:5:24","valueSize":1},{"declaration":4574,"isOffset":false,"isSlot":false,"src":"5646:5:24","valueSize":1},{"declaration":4595,"isOffset":false,"isSlot":false,"src":"5513:9:24","valueSize":1},{"declaration":4595,"isOffset":false,"isSlot":false,"src":"5656:9:24","valueSize":1},{"declaration":4595,"isOffset":false,"isSlot":false,"src":"5711:9:24","valueSize":1},{"declaration":4558,"isOffset":false,"isSlot":false,"src":"5533:1:24","valueSize":1},{"declaration":4560,"isOffset":false,"isSlot":false,"src":"5536:1:24","valueSize":1}],"id":4597,"nodeType":"InlineAssembly","src":"5435:300:24"},{"assignments":[4599],"declarations":[{"constant":false,"id":4599,"mutability":"mutable","name":"twos","nameLocation":"5947:4:24","nodeType":"VariableDeclaration","scope":4679,"src":"5939:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4598,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4606,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4600,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"5954:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":4601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4602,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"5973:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4604,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:24"},{"AST":{"nodeType":"YulBlock","src":"6008:362:24","statements":[{"nodeType":"YulAssignment","src":"6073:37:24","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:24"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:24"},"nodeType":"YulFunctionCall","src":"6088:22:24"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:24"}]},{"nodeType":"YulAssignment","src":"6177:25:24","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:24"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:24"},"nodeType":"YulFunctionCall","src":"6186:16:24"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:24"}]},{"nodeType":"YulAssignment","src":"6317:39:24","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:24","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:24"},"nodeType":"YulFunctionCall","src":"6333:12:24"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:24"},"nodeType":"YulFunctionCall","src":"6329:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:24"},"nodeType":"YulFunctionCall","src":"6325:31:24"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4562,"isOffset":false,"isSlot":false,"src":"6073:11:24","valueSize":1},{"declaration":4562,"isOffset":false,"isSlot":false,"src":"6092:11:24","valueSize":1},{"declaration":4568,"isOffset":false,"isSlot":false,"src":"6177:5:24","valueSize":1},{"declaration":4568,"isOffset":false,"isSlot":false,"src":"6190:5:24","valueSize":1},{"declaration":4599,"isOffset":false,"isSlot":false,"src":"6105:4:24","valueSize":1},{"declaration":4599,"isOffset":false,"isSlot":false,"src":"6197:4:24","valueSize":1},{"declaration":4599,"isOffset":false,"isSlot":false,"src":"6317:4:24","valueSize":1},{"declaration":4599,"isOffset":false,"isSlot":false,"src":"6340:4:24","valueSize":1},{"declaration":4599,"isOffset":false,"isSlot":false,"src":"6347:4:24","valueSize":1}],"id":4607,"nodeType":"InlineAssembly","src":"5999:371:24"},{"expression":{"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4608,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4568,"src":"6436:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4609,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"6445:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4610,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"6453:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4613,"nodeType":"ExpressionStatement","src":"6436:21:24"},{"assignments":[4615],"declarations":[{"constant":false,"id":4615,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:24","nodeType":"VariableDeclaration","scope":4679,"src":"6775:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4614,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4622,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4617,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"6798:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4619,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:24"},{"expression":{"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4623,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7031:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4625,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"7046:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4626,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7060:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4630,"nodeType":"ExpressionStatement","src":"7031:36:24"},{"expression":{"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4631,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7100:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4633,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"7115:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4634,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7129:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4638,"nodeType":"ExpressionStatement","src":"7100:36:24"},{"expression":{"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4639,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7170:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4641,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"7185:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4642,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7199:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4646,"nodeType":"ExpressionStatement","src":"7170:36:24"},{"expression":{"id":4653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4647,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7240:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4649,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"7255:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4650,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7269:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4654,"nodeType":"ExpressionStatement","src":"7240:36:24"},{"expression":{"id":4661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4655,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7310:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4657,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"7325:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4658,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7339:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4662,"nodeType":"ExpressionStatement","src":"7310:36:24"},{"expression":{"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4663,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7381:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4665,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"7396:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4666,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7410:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4670,"nodeType":"ExpressionStatement","src":"7381:36:24"},{"expression":{"id":4675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4671,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"7851:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4672,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4568,"src":"7860:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4673,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4615,"src":"7868:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4676,"nodeType":"ExpressionStatement","src":"7851:24:24"},{"expression":{"id":4677,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"7896:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4566,"id":4678,"nodeType":"Return","src":"7889:13:24"}]}]},"documentation":{"id":4556,"nodeType":"StructuredDocumentation","src":"3485:313:24","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":4681,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:24","nodeType":"FunctionDefinition","parameters":{"id":4563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4558,"mutability":"mutable","name":"x","nameLocation":"3827:1:24","nodeType":"VariableDeclaration","scope":4681,"src":"3819:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4557,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4560,"mutability":"mutable","name":"y","nameLocation":"3838:1:24","nodeType":"VariableDeclaration","scope":4681,"src":"3830:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4559,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4562,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:24","nodeType":"VariableDeclaration","scope":4681,"src":"3841:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4561,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:24"},"returnParameters":{"id":4566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4565,"mutability":"mutable","name":"result","nameLocation":"3893:6:24","nodeType":"VariableDeclaration","scope":4681,"src":"3885:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4564,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:24"},"scope":5347,"src":"3803:4116:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4723,"nodeType":"Block","src":"8161:192:24","statements":[{"assignments":[4697],"declarations":[{"constant":false,"id":4697,"mutability":"mutable","name":"result","nameLocation":"8179:6:24","nodeType":"VariableDeclaration","scope":4723,"src":"8171:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4696,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4703,"initialValue":{"arguments":[{"id":4699,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"8195:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4700,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"8198:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4701,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"8201:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4698,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4681,4724],"referencedDeclaration":4681,"src":"8188:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4705,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4691,"src":"8244:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}],"id":4704,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"8227:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4304_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4708,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4684,"src":"8264:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4709,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"8267:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4710,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"8270:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4707,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4720,"nodeType":"IfStatement","src":"8223:101:24","trueBody":{"id":4719,"nodeType":"Block","src":"8288:36:24","statements":[{"expression":{"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4715,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"8302:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4718,"nodeType":"ExpressionStatement","src":"8302:11:24"}]}},{"expression":{"id":4721,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"8340:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4695,"id":4722,"nodeType":"Return","src":"8333:13:24"}]},"documentation":{"id":4682,"nodeType":"StructuredDocumentation","src":"7925:121:24","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4724,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:24","nodeType":"FunctionDefinition","parameters":{"id":4692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4684,"mutability":"mutable","name":"x","nameLocation":"8075:1:24","nodeType":"VariableDeclaration","scope":4724,"src":"8067:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4683,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4686,"mutability":"mutable","name":"y","nameLocation":"8086:1:24","nodeType":"VariableDeclaration","scope":4724,"src":"8078:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4685,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4688,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:24","nodeType":"VariableDeclaration","scope":4724,"src":"8089:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4687,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4691,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:24","nodeType":"VariableDeclaration","scope":4724,"src":"8110:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"},"typeName":{"id":4690,"nodeType":"UserDefinedTypeName","pathNode":{"id":4689,"name":"Rounding","nameLocations":["8110:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4304,"src":"8110:8:24"},"referencedDeclaration":4304,"src":"8110:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:24"},"returnParameters":{"id":4695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4724,"src":"8152:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4693,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:24"},"scope":5347,"src":"8051:302:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4835,"nodeType":"Block","src":"8644:1585:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4732,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"8658:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4738,"nodeType":"IfStatement","src":"8654:45:24","trueBody":{"id":4737,"nodeType":"Block","src":"8666:33:24","statements":[{"expression":{"hexValue":"30","id":4735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4731,"id":4736,"nodeType":"Return","src":"8680:8:24"}]}},{"assignments":[4740],"declarations":[{"constant":false,"id":4740,"mutability":"mutable","name":"result","nameLocation":"9386:6:24","nodeType":"VariableDeclaration","scope":4835,"src":"9378:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4739,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4749,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4743,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"9406:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4742,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[5003,5038],"referencedDeclaration":5003,"src":"9401:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4747,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:24"},{"id":4834,"nodeType":"UncheckedBlock","src":"9815:408:24","statements":[{"expression":{"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4750,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9839:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4751,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9849:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4752,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"9858:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4753,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9862:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4756,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4760,"nodeType":"ExpressionStatement","src":"9839:35:24"},{"expression":{"id":4770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4761,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9888:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4762,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9898:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4763,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"9907:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4764,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9911:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4767,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4771,"nodeType":"ExpressionStatement","src":"9888:35:24"},{"expression":{"id":4781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4772,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9937:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4773,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9947:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4774,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"9956:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4775,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9960:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4778,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4782,"nodeType":"ExpressionStatement","src":"9937:35:24"},{"expression":{"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4783,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9986:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4784,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"9996:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4785,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"10005:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4786,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10009:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4789,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4793,"nodeType":"ExpressionStatement","src":"9986:35:24"},{"expression":{"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4794,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10035:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10045:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4796,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"10054:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4797,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10058:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4800,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4804,"nodeType":"ExpressionStatement","src":"10035:35:24"},{"expression":{"id":4814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4805,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10084:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4806,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10094:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4807,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"10103:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4808,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10107:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4811,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4815,"nodeType":"ExpressionStatement","src":"10084:35:24"},{"expression":{"id":4825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4816,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10133:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4817,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10143:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4818,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"10152:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4819,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10156:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4822,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4826,"nodeType":"ExpressionStatement","src":"10133:35:24"},{"expression":{"arguments":[{"id":4828,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10193:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4829,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4727,"src":"10201:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"10205:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4827,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"10189:3:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4731,"id":4833,"nodeType":"Return","src":"10182:30:24"}]}]},"documentation":{"id":4725,"nodeType":"StructuredDocumentation","src":"8359:223:24","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4836,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:24","nodeType":"FunctionDefinition","parameters":{"id":4728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4727,"mutability":"mutable","name":"a","nameLocation":"8609:1:24","nodeType":"VariableDeclaration","scope":4836,"src":"8601:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4726,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:24"},"returnParameters":{"id":4731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4836,"src":"8635:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4729,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:24"},"scope":5347,"src":"8587:1642:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4870,"nodeType":"Block","src":"10405:164:24","statements":[{"id":4869,"nodeType":"UncheckedBlock","src":"10415:148:24","statements":[{"assignments":[4848],"declarations":[{"constant":false,"id":4848,"mutability":"mutable","name":"result","nameLocation":"10447:6:24","nodeType":"VariableDeclaration","scope":4869,"src":"10439:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4847,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4852,"initialValue":{"arguments":[{"id":4850,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"10461:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4849,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4836,4871],"referencedDeclaration":4836,"src":"10456:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4853,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"10484:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4855,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"10511:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}],"id":4854,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"10494:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4304_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4857,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"10524:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4858,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"10533:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4860,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"10542:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:24","trueExpression":{"hexValue":"31","id":4863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4866,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4846,"id":4868,"nodeType":"Return","src":"10477:75:24"}]}]},"documentation":{"id":4837,"nodeType":"StructuredDocumentation","src":"10235:89:24","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4871,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:24","nodeType":"FunctionDefinition","parameters":{"id":4843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"mutability":"mutable","name":"a","nameLocation":"10351:1:24","nodeType":"VariableDeclaration","scope":4871,"src":"10343:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4838,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4842,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:24","nodeType":"VariableDeclaration","scope":4871,"src":"10354:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"},"typeName":{"id":4841,"nodeType":"UserDefinedTypeName","pathNode":{"id":4840,"name":"Rounding","nameLocations":["10354:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4304,"src":"10354:8:24"},"referencedDeclaration":4304,"src":"10354:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:24"},"returnParameters":{"id":4846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4871,"src":"10396:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4844,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:24"},"scope":5347,"src":"10329:240:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5002,"nodeType":"Block","src":"10760:922:24","statements":[{"assignments":[4880],"declarations":[{"constant":false,"id":4880,"mutability":"mutable","name":"result","nameLocation":"10778:6:24","nodeType":"VariableDeclaration","scope":5002,"src":"10770:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4879,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4882,"initialValue":{"hexValue":"30","id":4881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:24"},{"id":4999,"nodeType":"UncheckedBlock","src":"10798:855:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"10826:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4897,"nodeType":"IfStatement","src":"10822:99:24","trueBody":{"id":4896,"nodeType":"Block","src":"10844:77:24","statements":[{"expression":{"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4888,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"10862:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4891,"nodeType":"ExpressionStatement","src":"10862:13:24"},{"expression":{"id":4894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4892,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"10893:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4895,"nodeType":"ExpressionStatement","src":"10893:13:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"10938:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4912,"nodeType":"IfStatement","src":"10934:96:24","trueBody":{"id":4911,"nodeType":"Block","src":"10955:75:24","statements":[{"expression":{"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"10973:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4906,"nodeType":"ExpressionStatement","src":"10973:12:24"},{"expression":{"id":4909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4907,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11003:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4910,"nodeType":"ExpressionStatement","src":"11003:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4913,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11047:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4927,"nodeType":"IfStatement","src":"11043:96:24","trueBody":{"id":4926,"nodeType":"Block","src":"11064:75:24","statements":[{"expression":{"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4918,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11082:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4921,"nodeType":"ExpressionStatement","src":"11082:12:24"},{"expression":{"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4922,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11112:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4925,"nodeType":"ExpressionStatement","src":"11112:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11156:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4942,"nodeType":"IfStatement","src":"11152:96:24","trueBody":{"id":4941,"nodeType":"Block","src":"11173:75:24","statements":[{"expression":{"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11191:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4936,"nodeType":"ExpressionStatement","src":"11191:12:24"},{"expression":{"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11221:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4940,"nodeType":"ExpressionStatement","src":"11221:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11265:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4957,"nodeType":"IfStatement","src":"11261:93:24","trueBody":{"id":4956,"nodeType":"Block","src":"11281:73:24","statements":[{"expression":{"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11299:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4951,"nodeType":"ExpressionStatement","src":"11299:11:24"},{"expression":{"id":4954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4952,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11328:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4955,"nodeType":"ExpressionStatement","src":"11328:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11371:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4972,"nodeType":"IfStatement","src":"11367:93:24","trueBody":{"id":4971,"nodeType":"Block","src":"11387:73:24","statements":[{"expression":{"id":4965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4963,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11405:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4966,"nodeType":"ExpressionStatement","src":"11405:11:24"},{"expression":{"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4967,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11434:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4970,"nodeType":"ExpressionStatement","src":"11434:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11477:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4987,"nodeType":"IfStatement","src":"11473:93:24","trueBody":{"id":4986,"nodeType":"Block","src":"11493:73:24","statements":[{"expression":{"id":4980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4978,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11511:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4981,"nodeType":"ExpressionStatement","src":"11511:11:24"},{"expression":{"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11540:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4985,"nodeType":"ExpressionStatement","src":"11540:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4988,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"11583:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4998,"nodeType":"IfStatement","src":"11579:64:24","trueBody":{"id":4997,"nodeType":"Block","src":"11599:44:24","statements":[{"expression":{"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11617:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4996,"nodeType":"ExpressionStatement","src":"11617:11:24"}]}}]},{"expression":{"id":5000,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11669:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4878,"id":5001,"nodeType":"Return","src":"11662:13:24"}]},"documentation":{"id":4872,"nodeType":"StructuredDocumentation","src":"10575:119:24","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":5003,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:24","nodeType":"FunctionDefinition","parameters":{"id":4875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4874,"mutability":"mutable","name":"value","nameLocation":"10721:5:24","nodeType":"VariableDeclaration","scope":5003,"src":"10713:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4873,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:24"},"returnParameters":{"id":4878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5003,"src":"10751:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4876,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:24"},"scope":5347,"src":"10699:983:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5037,"nodeType":"Block","src":"11915:168:24","statements":[{"id":5036,"nodeType":"UncheckedBlock","src":"11925:152:24","statements":[{"assignments":[5015],"declarations":[{"constant":false,"id":5015,"mutability":"mutable","name":"result","nameLocation":"11957:6:24","nodeType":"VariableDeclaration","scope":5036,"src":"11949:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5014,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5019,"initialValue":{"arguments":[{"id":5017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"11971:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5016,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[5003,5038],"referencedDeclaration":5003,"src":"11966:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5020,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5015,"src":"11998:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5022,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5009,"src":"12025:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}],"id":5021,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"12008:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4304_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":5025,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5015,"src":"12043:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5006,"src":"12052:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:24","trueExpression":{"hexValue":"31","id":5030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5033,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5013,"id":5035,"nodeType":"Return","src":"11991:75:24"}]}]},"documentation":{"id":5004,"nodeType":"StructuredDocumentation","src":"11688:142:24","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5038,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:24","nodeType":"FunctionDefinition","parameters":{"id":5010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5006,"mutability":"mutable","name":"value","nameLocation":"11857:5:24","nodeType":"VariableDeclaration","scope":5038,"src":"11849:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5005,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5009,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:24","nodeType":"VariableDeclaration","scope":5038,"src":"11864:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"},"typeName":{"id":5008,"nodeType":"UserDefinedTypeName","pathNode":{"id":5007,"name":"Rounding","nameLocations":["11864:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4304,"src":"11864:8:24"},"referencedDeclaration":4304,"src":"11864:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:24"},"returnParameters":{"id":5013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5038,"src":"11906:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5011,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:24"},"scope":5347,"src":"11835:248:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5166,"nodeType":"Block","src":"12276:854:24","statements":[{"assignments":[5047],"declarations":[{"constant":false,"id":5047,"mutability":"mutable","name":"result","nameLocation":"12294:6:24","nodeType":"VariableDeclaration","scope":5166,"src":"12286:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5046,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5049,"initialValue":{"hexValue":"30","id":5048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:24"},{"id":5163,"nodeType":"UncheckedBlock","src":"12314:787:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12342:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":5053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":5052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5066,"nodeType":"IfStatement","src":"12338:103:24","trueBody":{"id":5065,"nodeType":"Block","src":"12361:80:24","statements":[{"expression":{"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12379:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":5058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":5057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5060,"nodeType":"ExpressionStatement","src":"12379:17:24"},{"expression":{"id":5063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5061,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"12414:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":5062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5064,"nodeType":"ExpressionStatement","src":"12414:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5067,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12458:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":5069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5083,"nodeType":"IfStatement","src":"12454:103:24","trueBody":{"id":5082,"nodeType":"Block","src":"12477:80:24","statements":[{"expression":{"id":5076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12495:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":5074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5077,"nodeType":"ExpressionStatement","src":"12495:17:24"},{"expression":{"id":5080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5078,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"12530:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5081,"nodeType":"ExpressionStatement","src":"12530:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5084,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12574:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5100,"nodeType":"IfStatement","src":"12570:103:24","trueBody":{"id":5099,"nodeType":"Block","src":"12593:80:24","statements":[{"expression":{"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5089,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12611:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5094,"nodeType":"ExpressionStatement","src":"12611:17:24"},{"expression":{"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"12646:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5098,"nodeType":"ExpressionStatement","src":"12646:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5101,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12690:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5117,"nodeType":"IfStatement","src":"12686:100:24","trueBody":{"id":5116,"nodeType":"Block","src":"12708:78:24","statements":[{"expression":{"id":5110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12726:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5111,"nodeType":"ExpressionStatement","src":"12726:16:24"},{"expression":{"id":5114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5112,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"12760:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5115,"nodeType":"ExpressionStatement","src":"12760:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12803:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5134,"nodeType":"IfStatement","src":"12799:100:24","trueBody":{"id":5133,"nodeType":"Block","src":"12821:78:24","statements":[{"expression":{"id":5127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5123,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12839:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5128,"nodeType":"ExpressionStatement","src":"12839:16:24"},{"expression":{"id":5131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"12873:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5132,"nodeType":"ExpressionStatement","src":"12873:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5135,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12916:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5151,"nodeType":"IfStatement","src":"12912:100:24","trueBody":{"id":5150,"nodeType":"Block","src":"12934:78:24","statements":[{"expression":{"id":5144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"12952:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5145,"nodeType":"ExpressionStatement","src":"12952:16:24"},{"expression":{"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5146,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"12986:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5149,"nodeType":"ExpressionStatement","src":"12986:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5152,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5041,"src":"13029:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":5155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":5154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5162,"nodeType":"IfStatement","src":"13025:66:24","trueBody":{"id":5161,"nodeType":"Block","src":"13047:44:24","statements":[{"expression":{"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5157,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"13065:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5160,"nodeType":"ExpressionStatement","src":"13065:11:24"}]}}]},{"expression":{"id":5164,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5047,"src":"13117:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5045,"id":5165,"nodeType":"Return","src":"13110:13:24"}]},"documentation":{"id":5039,"nodeType":"StructuredDocumentation","src":"12089:120:24","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":5167,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:24","nodeType":"FunctionDefinition","parameters":{"id":5042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5041,"mutability":"mutable","name":"value","nameLocation":"12237:5:24","nodeType":"VariableDeclaration","scope":5167,"src":"12229:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5040,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:24"},"returnParameters":{"id":5045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5167,"src":"12267:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5043,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:24"},"scope":5347,"src":"12214:916:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5201,"nodeType":"Block","src":"13365:170:24","statements":[{"id":5200,"nodeType":"UncheckedBlock","src":"13375:154:24","statements":[{"assignments":[5179],"declarations":[{"constant":false,"id":5179,"mutability":"mutable","name":"result","nameLocation":"13407:6:24","nodeType":"VariableDeclaration","scope":5200,"src":"13399:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5178,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5183,"initialValue":{"arguments":[{"id":5181,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"13422:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5180,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[5167,5202],"referencedDeclaration":5167,"src":"13416:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5184,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"13449:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5186,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"13476:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}],"id":5185,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"13459:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4304_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":5189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5179,"src":"13495:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5170,"src":"13504:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:24","trueExpression":{"hexValue":"31","id":5194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5177,"id":5199,"nodeType":"Return","src":"13442:76:24"}]}]},"documentation":{"id":5168,"nodeType":"StructuredDocumentation","src":"13136:143:24","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5202,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:24","nodeType":"FunctionDefinition","parameters":{"id":5174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5170,"mutability":"mutable","name":"value","nameLocation":"13307:5:24","nodeType":"VariableDeclaration","scope":5202,"src":"13299:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5169,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5173,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:24","nodeType":"VariableDeclaration","scope":5202,"src":"13314:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"},"typeName":{"id":5172,"nodeType":"UserDefinedTypeName","pathNode":{"id":5171,"name":"Rounding","nameLocations":["13314:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4304,"src":"13314:8:24"},"referencedDeclaration":4304,"src":"13314:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:24"},"returnParameters":{"id":5177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5176,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5202,"src":"13356:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5175,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:24"},"scope":5347,"src":"13284:251:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5288,"nodeType":"Block","src":"13855:600:24","statements":[{"assignments":[5211],"declarations":[{"constant":false,"id":5211,"mutability":"mutable","name":"result","nameLocation":"13873:6:24","nodeType":"VariableDeclaration","scope":5288,"src":"13865:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5210,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5213,"initialValue":{"hexValue":"30","id":5212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:24"},{"id":5285,"nodeType":"UncheckedBlock","src":"13893:533:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"13921:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":5215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5228,"nodeType":"IfStatement","src":"13917:98:24","trueBody":{"id":5227,"nodeType":"Block","src":"13939:76:24","statements":[{"expression":{"id":5221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"13957:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":5220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5222,"nodeType":"ExpressionStatement","src":"13957:13:24"},{"expression":{"id":5225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5223,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"13988:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5226,"nodeType":"ExpressionStatement","src":"13988:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"14032:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":5230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5243,"nodeType":"IfStatement","src":"14028:95:24","trueBody":{"id":5242,"nodeType":"Block","src":"14049:74:24","statements":[{"expression":{"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"14067:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":5235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5237,"nodeType":"ExpressionStatement","src":"14067:12:24"},{"expression":{"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5238,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"14097:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5241,"nodeType":"ExpressionStatement","src":"14097:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"14140:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":5245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5258,"nodeType":"IfStatement","src":"14136:95:24","trueBody":{"id":5257,"nodeType":"Block","src":"14157:74:24","statements":[{"expression":{"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"14175:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":5250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5252,"nodeType":"ExpressionStatement","src":"14175:12:24"},{"expression":{"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5253,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"14205:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5256,"nodeType":"ExpressionStatement","src":"14205:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"14248:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":5260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5273,"nodeType":"IfStatement","src":"14244:95:24","trueBody":{"id":5272,"nodeType":"Block","src":"14265:74:24","statements":[{"expression":{"id":5266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5264,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"14283:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":5265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5267,"nodeType":"ExpressionStatement","src":"14283:12:24"},{"expression":{"id":5270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"14313:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5271,"nodeType":"ExpressionStatement","src":"14313:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5205,"src":"14356:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5284,"nodeType":"IfStatement","src":"14352:64:24","trueBody":{"id":5283,"nodeType":"Block","src":"14372:44:24","statements":[{"expression":{"id":5281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"14390:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5282,"nodeType":"ExpressionStatement","src":"14390:11:24"}]}}]},{"expression":{"id":5286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"14442:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5209,"id":5287,"nodeType":"Return","src":"14435:13:24"}]},"documentation":{"id":5203,"nodeType":"StructuredDocumentation","src":"13541:246:24","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":5289,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:24","nodeType":"FunctionDefinition","parameters":{"id":5206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5205,"mutability":"mutable","name":"value","nameLocation":"13816:5:24","nodeType":"VariableDeclaration","scope":5289,"src":"13808:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5204,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:24"},"returnParameters":{"id":5209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5289,"src":"13846:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5207,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:24"},"scope":5347,"src":"13792:663:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5326,"nodeType":"Block","src":"14692:177:24","statements":[{"id":5325,"nodeType":"UncheckedBlock","src":"14702:161:24","statements":[{"assignments":[5301],"declarations":[{"constant":false,"id":5301,"mutability":"mutable","name":"result","nameLocation":"14734:6:24","nodeType":"VariableDeclaration","scope":5325,"src":"14726:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5300,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5305,"initialValue":{"arguments":[{"id":5303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5292,"src":"14750:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5302,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[5289,5327],"referencedDeclaration":5289,"src":"14743:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5306,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"14777:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5308,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5295,"src":"14804:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}],"id":5307,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"14787:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4304_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5311,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"14823:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":5312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5314,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5292,"src":"14838:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:24","trueExpression":{"hexValue":"31","id":5319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5299,"id":5324,"nodeType":"Return","src":"14770:82:24"}]}]},"documentation":{"id":5290,"nodeType":"StructuredDocumentation","src":"14461:144:24","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5327,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:24","nodeType":"FunctionDefinition","parameters":{"id":5296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5292,"mutability":"mutable","name":"value","nameLocation":"14634:5:24","nodeType":"VariableDeclaration","scope":5327,"src":"14626:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5291,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5295,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:24","nodeType":"VariableDeclaration","scope":5327,"src":"14641:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"},"typeName":{"id":5294,"nodeType":"UserDefinedTypeName","pathNode":{"id":5293,"name":"Rounding","nameLocations":["14641:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4304,"src":"14641:8:24"},"referencedDeclaration":4304,"src":"14641:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:24"},"returnParameters":{"id":5299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5327,"src":"14683:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5297,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:24"},"scope":5347,"src":"14610:259:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5345,"nodeType":"Block","src":"15067:48:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5338,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5331,"src":"15090:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}],"id":5337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5336,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:24","typeDescriptions":{}}},"id":5339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":5340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":5342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5335,"id":5344,"nodeType":"Return","src":"15077:31:24"}]},"documentation":{"id":5328,"nodeType":"StructuredDocumentation","src":"14875:113:24","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":5346,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:24","nodeType":"FunctionDefinition","parameters":{"id":5332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5331,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:24","nodeType":"VariableDeclaration","scope":5346,"src":"15019:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"},"typeName":{"id":5330,"nodeType":"UserDefinedTypeName","pathNode":{"id":5329,"name":"Rounding","nameLocations":["15019:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4304,"src":"15019:8:24"},"referencedDeclaration":4304,"src":"15019:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4304","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:24"},"returnParameters":{"id":5335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5334,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5346,"src":"15061:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5333,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:24"},"scope":5347,"src":"14993:122:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5348,"src":"203:14914:24","usedErrors":[4299],"usedEvents":[]}],"src":"103:15015:24"},"id":24},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[5452]},"id":5453,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5349,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":5350,"nodeType":"StructuredDocumentation","src":"135:80:25","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5452,"linearizedBaseContracts":[5452],"name":"SignedMath","nameLocation":"224:10:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":5367,"nodeType":"Block","src":"376:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5360,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5353,"src":"393:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5361,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"397:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5364,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"405:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:25","trueExpression":{"id":5363,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5353,"src":"401:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5359,"id":5366,"nodeType":"Return","src":"386:20:25"}]},"documentation":{"id":5351,"nodeType":"StructuredDocumentation","src":"241:66:25","text":" @dev Returns the largest of two signed numbers."},"id":5368,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:25","nodeType":"FunctionDefinition","parameters":{"id":5356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5353,"mutability":"mutable","name":"a","nameLocation":"332:1:25","nodeType":"VariableDeclaration","scope":5368,"src":"325:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5352,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5355,"mutability":"mutable","name":"b","nameLocation":"342:1:25","nodeType":"VariableDeclaration","scope":5368,"src":"335:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5354,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:25"},"returnParameters":{"id":5359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5368,"src":"368:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5357,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:25"},"scope":5452,"src":"312:101:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5385,"nodeType":"Block","src":"555:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5378,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"572:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5379,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5373,"src":"576:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5382,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5373,"src":"584:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:25","trueExpression":{"id":5381,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5371,"src":"580:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5377,"id":5384,"nodeType":"Return","src":"565:20:25"}]},"documentation":{"id":5369,"nodeType":"StructuredDocumentation","src":"419:67:25","text":" @dev Returns the smallest of two signed numbers."},"id":5386,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:25","nodeType":"FunctionDefinition","parameters":{"id":5374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5371,"mutability":"mutable","name":"a","nameLocation":"511:1:25","nodeType":"VariableDeclaration","scope":5386,"src":"504:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5370,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5373,"mutability":"mutable","name":"b","nameLocation":"521:1:25","nodeType":"VariableDeclaration","scope":5386,"src":"514:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5372,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:25"},"returnParameters":{"id":5377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5386,"src":"547:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5375,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:25"},"scope":5452,"src":"491:101:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5429,"nodeType":"Block","src":"797:162:25","statements":[{"assignments":[5397],"declarations":[{"constant":false,"id":5397,"mutability":"mutable","name":"x","nameLocation":"866:1:25","nodeType":"VariableDeclaration","scope":5429,"src":"859:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5396,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5410,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5398,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"871:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5399,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"875:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5401,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5402,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"882:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5403,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"886:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5405,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5408,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:25"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5411,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"911:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5416,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"931:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5414,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:25","typeDescriptions":{}}},"id":5417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:25","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5412,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:25","typeDescriptions":{}}},"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5421,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5389,"src":"945:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5422,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5391,"src":"949:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5424,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5426,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5395,"id":5428,"nodeType":"Return","src":"904:48:25"}]},"documentation":{"id":5387,"nodeType":"StructuredDocumentation","src":"598:126:25","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":5430,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:25","nodeType":"FunctionDefinition","parameters":{"id":5392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5389,"mutability":"mutable","name":"a","nameLocation":"753:1:25","nodeType":"VariableDeclaration","scope":5430,"src":"746:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5388,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5391,"mutability":"mutable","name":"b","nameLocation":"763:1:25","nodeType":"VariableDeclaration","scope":5430,"src":"756:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5390,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:25"},"returnParameters":{"id":5395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5430,"src":"789:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5393,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:25"},"scope":5452,"src":"729:230:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5450,"nodeType":"Block","src":"1103:158:25","statements":[{"id":5449,"nodeType":"UncheckedBlock","src":"1113:142:25","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5440,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"1228:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":5441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:25","subExpression":{"id":5444,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"1242:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:25","trueExpression":{"id":5443,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"1237:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:25","typeDescriptions":{}}},"id":5447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5437,"id":5448,"nodeType":"Return","src":"1213:31:25"}]}]},"documentation":{"id":5431,"nodeType":"StructuredDocumentation","src":"965:78:25","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5451,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:25","nodeType":"FunctionDefinition","parameters":{"id":5434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5433,"mutability":"mutable","name":"n","nameLocation":"1068:1:25","nodeType":"VariableDeclaration","scope":5451,"src":"1061:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5432,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:25"},"returnParameters":{"id":5437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5451,"src":"1094:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5435,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:25"},"scope":5452,"src":"1048:213:25","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5453,"src":"216:1047:25","usedErrors":[],"usedEvents":[]}],"src":"109:1155:25"},"id":25},"contracts/HorizonFujiAssistant.sol":{"ast":{"absolutePath":"contracts/HorizonFujiAssistant.sol","exportedSymbols":{"HorizonFujiAssistant":[5606]},"id":5607,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5454,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"HorizonFujiAssistant","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5606,"linearizedBaseContracts":[5606],"name":"HorizonFujiAssistant","nameLocation":"70:20:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":5604,"nodeType":"Block","src":"195:1096:26","statements":[{"assignments":[5462],"declarations":[{"constant":false,"id":5462,"mutability":"mutable","name":"b","nameLocation":"219:1:26","nodeType":"VariableDeclaration","scope":5604,"src":"206:14:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5461,"name":"bytes","nodeType":"ElementaryTypeName","src":"206:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":5467,"initialValue":{"arguments":[{"id":5465,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"229:1:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"223:5:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5463,"name":"bytes","nodeType":"ElementaryTypeName","src":"223:5:26","typeDescriptions":{}}},"id":5466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"223:8:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"206:25:26"},{"assignments":[5469],"declarations":[{"constant":false,"id":5469,"mutability":"mutable","name":"result","nameLocation":"247:6:26","nodeType":"VariableDeclaration","scope":5604,"src":"242:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5468,"name":"uint","nodeType":"ElementaryTypeName","src":"242:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5471,"initialValue":{"hexValue":"30","id":5470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"256:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"242:15:26"},{"assignments":[5473],"declarations":[{"constant":false,"id":5473,"mutability":"mutable","name":"decimalFound","nameLocation":"273:12:26","nodeType":"VariableDeclaration","scope":5604,"src":"268:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5472,"name":"bool","nodeType":"ElementaryTypeName","src":"268:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5475,"initialValue":{"hexValue":"66616c7365","id":5474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"288:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"268:25:26"},{"assignments":[5477],"declarations":[{"constant":false,"id":5477,"mutability":"mutable","name":"decimalPlace","nameLocation":"309:12:26","nodeType":"VariableDeclaration","scope":5604,"src":"304:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5476,"name":"uint","nodeType":"ElementaryTypeName","src":"304:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5479,"initialValue":{"hexValue":"30","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"324:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"304:21:26"},{"body":{"id":5575,"nodeType":"Block","src":"374:661:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5491,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"393:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5493,"indexExpression":{"id":5492,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"395:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"393:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"52","id":5494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"401:3:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""},"value":"R"},"src":"393:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5496,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"408:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5498,"indexExpression":{"id":5497,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"410:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"408:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"24","id":5499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"416:3:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_b104e6a8e5e1477c7a8346486401cbd4f10ab4840a4201066d9b59b747cb6f88","typeString":"literal_string \"$\""},"value":"$"},"src":"408:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"393:26:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5502,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"423:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5504,"indexExpression":{"id":5503,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"425:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"423:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"2e","id":5505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"431:3:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},"value":"."},"src":"423:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"393:41:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5508,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"438:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5510,"indexExpression":{"id":5509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"440:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"438:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"20","id":5511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"446:3:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_681afa780d17da29203322b473d3f210a7d621259a4e6ce9e403f5a266ff719a","typeString":"literal_string \" \""},"value":" "},"src":"438:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"393:56:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5516,"nodeType":"IfStatement","src":"389:105:26","trueBody":{"id":5515,"nodeType":"Block","src":"451:43:26","statements":[{"id":5514,"nodeType":"Continue","src":"470:8:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5517,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"514:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5519,"indexExpression":{"id":5518,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"516:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"514:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"2c","id":5520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"522:3:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},"src":"514:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5528,"nodeType":"IfStatement","src":"510:98:26","trueBody":{"id":5527,"nodeType":"Block","src":"527:81:26","statements":[{"expression":{"id":5524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5522,"name":"decimalFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5473,"src":"546:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"561:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"546:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5525,"nodeType":"ExpressionStatement","src":"546:19:26"},{"id":5526,"nodeType":"Continue","src":"584:8:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5529,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"628:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5531,"indexExpression":{"id":5530,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"630:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"628:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783330","id":5532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"636:4:26","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"0x30"},"src":"628:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5534,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"644:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5536,"indexExpression":{"id":5535,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"646:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"644:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30783339","id":5537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"652:4:26","typeDescriptions":{"typeIdentifier":"t_rational_57_by_1","typeString":"int_const 57"},"value":"0x39"},"src":"644:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"628:28:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5573,"nodeType":"Block","src":"953:71:26","statements":[{"expression":{"arguments":[{"hexValue":"54686174206973206e6f7420612076616c696420737472696e67","id":5570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"979:28:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_45ca75376c8d672aa0ae4eafa03b7d3aa3c7cde1a3439f9617870590b402e2a1","typeString":"literal_string \"That is not a valid string\""},"value":"That is not a valid string"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_45ca75376c8d672aa0ae4eafa03b7d3aa3c7cde1a3439f9617870590b402e2a1","typeString":"literal_string \"That is not a valid string\""}],"id":5569,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"972:6:26","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"972:36:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5572,"nodeType":"ExpressionStatement","src":"972:36:26"}]},"id":5574,"nodeType":"IfStatement","src":"624:400:26","trueBody":{"id":5568,"nodeType":"Block","src":"658:289:26","statements":[{"expression":{"id":5554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5540,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"696:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"705:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3130","id":5542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"714:2:26","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"705:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":5546,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"726:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5548,"indexExpression":{"id":5547,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"728:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"726:4:26","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":5545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"720:5:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5544,"name":"uint8","nodeType":"ElementaryTypeName","src":"720:5:26","typeDescriptions":{}}},"id":5549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"720:11:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3438","id":5550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"734:2:26","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"720:16:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5552,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"719:18:26","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"705:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"696:41:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5555,"nodeType":"ExpressionStatement","src":"696:41:26"},{"condition":{"id":5556,"name":"decimalFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5473,"src":"760:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5567,"nodeType":"IfStatement","src":"756:176:26","trueBody":{"id":5566,"nodeType":"Block","src":"774:158:26","statements":[{"expression":{"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"797:14:26","subExpression":{"id":5557,"name":"decimalPlace","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"797:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5559,"nodeType":"ExpressionStatement","src":"797:14:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5560,"name":"decimalPlace","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"838:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":5561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"854:1:26","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"838:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5565,"nodeType":"IfStatement","src":"834:79:26","trueBody":{"id":5564,"nodeType":"Block","src":"857:56:26","statements":[{"id":5563,"nodeType":"Break","src":"884:5:26"}]}}]}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5484,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"355:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5485,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5462,"src":"359:1:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"361:6:26","memberName":"length","nodeType":"MemberAccess","src":"359:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"355:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5576,"initializationExpression":{"assignments":[5481],"declarations":[{"constant":false,"id":5481,"mutability":"mutable","name":"i","nameLocation":"348:1:26","nodeType":"VariableDeclaration","scope":5576,"src":"343:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5480,"name":"uint","nodeType":"ElementaryTypeName","src":"343:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5483,"initialValue":{"hexValue":"30","id":5482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"352:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"343:10:26"},"loopExpression":{"expression":{"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"369:3:26","subExpression":{"id":5488,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"369:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5490,"nodeType":"ExpressionStatement","src":"369:3:26"},"nodeType":"ForStatement","src":"338:697:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5577,"name":"decimalPlace","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"1051:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"32","id":5578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1066:1:26","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1051:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5601,"nodeType":"IfStatement","src":"1047:211:26","trueBody":{"id":5600,"nodeType":"Block","src":"1069:189:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5580,"name":"decimalPlace","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"1088:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":5581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1104:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1088:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5588,"name":"decimalPlace","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"1164:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1180:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1164:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":5591,"name":"decimalFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5473,"src":"1185:12:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1164:33:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5598,"nodeType":"IfStatement","src":"1160:87:26","trueBody":{"id":5597,"nodeType":"Block","src":"1199:48:26","statements":[{"expression":{"id":5595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5593,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"1218:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"313030","id":5594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1228:3:26","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"1218:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5596,"nodeType":"ExpressionStatement","src":"1218:13:26"}]}},"id":5599,"nodeType":"IfStatement","src":"1084:163:26","trueBody":{"id":5587,"nodeType":"Block","src":"1107:47:26","statements":[{"expression":{"id":5585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5583,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"1126:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"hexValue":"3130","id":5584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:2:26","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1126:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5586,"nodeType":"ExpressionStatement","src":"1126:12:26"}]}}]}},{"expression":{"id":5602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5469,"src":"1277:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5460,"id":5603,"nodeType":"Return","src":"1270:13:26"}]},"functionSelector":"1bd95155","id":5605,"implemented":true,"kind":"function","modifiers":[],"name":"stringToUint","nameLocation":"138:12:26","nodeType":"FunctionDefinition","parameters":{"id":5457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5456,"mutability":"mutable","name":"s","nameLocation":"165:1:26","nodeType":"VariableDeclaration","scope":5605,"src":"151:15:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5455,"name":"string","nodeType":"ElementaryTypeName","src":"151:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"150:17:26"},"returnParameters":{"id":5460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5605,"src":"189:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5458,"name":"uint","nodeType":"ElementaryTypeName","src":"189:4:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"188:6:26"},"scope":5606,"src":"129:1162:26","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":5607,"src":"61:1233:26","usedErrors":[],"usedEvents":[]}],"src":"33:1263:26"},"id":26},"contracts/HorizonFujiR.sol":{"ast":{"absolutePath":"contracts/HorizonFujiR.sol","exportedSymbols":{"CCIPReceiver":[119],"Client":[241],"Context":[4002],"DestinationChainNotWhitelisted":[5641],"ERC165":[4281],"ERC721":[3817],"FailedToWithdrawEth":[5637],"FunctionsClient":[449],"FunctionsRequest":[1235],"HorizonFujiAssistant":[5606],"HorizonFujiR":[6615],"HorizonFujiS":[7177],"HorizonFunctions":[7450],"IERC165":[4293],"IERC20":[319],"IERC721":[3934],"IERC721Errors":[2761],"IERC721Metadata":[3980],"IERC721Receiver":[3952],"IRouterClient":[184],"LinkTokenInterface":[1390],"NotEnoughBalance":[5627],"NothingToWithdraw":[5629],"SenderNotWhitelisted":[5649],"SourceChainNotWhitelisted":[5645],"Strings":[4257]},"id":6616,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5608,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"33:23:27"},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol","id":5610,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":185,"src":"60:99:27","symbolAliases":[{"foreign":{"id":5609,"name":"IRouterClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"68:13:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","id":5612,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":242,"src":"161:84:27","symbolAliases":[{"foreign":{"id":5611,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"169:6:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","id":5614,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":120,"src":"247:99:27","symbolAliases":[{"foreign":{"id":5613,"name":"CCIPReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"255:12:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol","file":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol","id":5616,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":320,"src":"348:117:27","symbolAliases":[{"foreign":{"id":5615,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"356:6:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","file":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","id":5618,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":1391,"src":"467:106:27","symbolAliases":[{"foreign":{"id":5617,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"475:18:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":5619,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":3818,"src":"575:57:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/HorizonFunctions.sol","file":"./HorizonFunctions.sol","id":5620,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":7451,"src":"634:32:27","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/HorizonFujiS.sol","file":"./HorizonFujiS.sol","id":5621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6616,"sourceUnit":7178,"src":"668:28:27","symbolAliases":[],"unitAlias":""},{"errorSelector":"8f0f4206","id":5627,"name":"NotEnoughBalance","nameLocation":"769:16:27","nodeType":"ErrorDefinition","parameters":{"id":5626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5623,"mutability":"mutable","name":"currentBalance","nameLocation":"794:14:27","nodeType":"VariableDeclaration","scope":5627,"src":"786:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5622,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5625,"mutability":"mutable","name":"calculatedFees","nameLocation":"818:14:27","nodeType":"VariableDeclaration","scope":5627,"src":"810:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5624,"name":"uint256","nodeType":"ElementaryTypeName","src":"810:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"785:48:27"},"src":"763:71:27"},{"errorSelector":"d0d04f60","id":5629,"name":"NothingToWithdraw","nameLocation":"842:17:27","nodeType":"ErrorDefinition","parameters":{"id":5628,"nodeType":"ParameterList","parameters":[],"src":"859:2:27"},"src":"836:26:27"},{"errorSelector":"9d11f563","id":5637,"name":"FailedToWithdrawEth","nameLocation":"870:19:27","nodeType":"ErrorDefinition","parameters":{"id":5636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5631,"mutability":"mutable","name":"owner","nameLocation":"898:5:27","nodeType":"VariableDeclaration","scope":5637,"src":"890:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5630,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5633,"mutability":"mutable","name":"target","nameLocation":"913:6:27","nodeType":"VariableDeclaration","scope":5637,"src":"905:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5632,"name":"address","nodeType":"ElementaryTypeName","src":"905:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5635,"mutability":"mutable","name":"value","nameLocation":"929:5:27","nodeType":"VariableDeclaration","scope":5637,"src":"921:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5634,"name":"uint256","nodeType":"ElementaryTypeName","src":"921:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"889:46:27"},"src":"864:72:27"},{"errorSelector":"4651d51a","id":5641,"name":"DestinationChainNotWhitelisted","nameLocation":"944:30:27","nodeType":"ErrorDefinition","parameters":{"id":5640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5639,"mutability":"mutable","name":"destinationChainSelector","nameLocation":"982:24:27","nodeType":"VariableDeclaration","scope":5641,"src":"975:31:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5638,"name":"uint64","nodeType":"ElementaryTypeName","src":"975:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"974:33:27"},"src":"938:70:27"},{"errorSelector":"2682bad2","id":5645,"name":"SourceChainNotWhitelisted","nameLocation":"1016:25:27","nodeType":"ErrorDefinition","parameters":{"id":5644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5643,"mutability":"mutable","name":"sourceChainSelector","nameLocation":"1049:19:27","nodeType":"VariableDeclaration","scope":5645,"src":"1042:26:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5642,"name":"uint64","nodeType":"ElementaryTypeName","src":"1042:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1041:28:27"},"src":"1010:60:27"},{"errorSelector":"bf3f9389","id":5649,"name":"SenderNotWhitelisted","nameLocation":"1078:20:27","nodeType":"ErrorDefinition","parameters":{"id":5648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5647,"mutability":"mutable","name":"sender","nameLocation":"1107:6:27","nodeType":"VariableDeclaration","scope":5649,"src":"1099:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5646,"name":"address","nodeType":"ElementaryTypeName","src":"1099:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1098:16:27"},"src":"1072:43:27"},{"abstract":false,"baseContracts":[{"baseName":{"id":5650,"name":"CCIPReceiver","nameLocations":["1144:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":119,"src":"1144:12:27"},"id":5651,"nodeType":"InheritanceSpecifier","src":"1144:12:27"}],"canonicalName":"HorizonFujiR","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6615,"linearizedBaseContracts":[6615,119,331,132],"name":"HorizonFujiR","nameLocation":"1128:12:27","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"b1e312a29937cc11967b0e4a346fef1ae132424ebaba9dc6d90249dba053e87c","id":5661,"name":"MessageReceived","nameLocation":"1241:15:27","nodeType":"EventDefinition","parameters":{"id":5660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5653,"indexed":true,"mutability":"mutable","name":"messageId","nameLocation":"1274:9:27","nodeType":"VariableDeclaration","scope":5661,"src":"1258:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1258:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5655,"indexed":true,"mutability":"mutable","name":"sourceChainSelector","nameLocation":"1300:19:27","nodeType":"VariableDeclaration","scope":5661,"src":"1285:34:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5654,"name":"uint64","nodeType":"ElementaryTypeName","src":"1285:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":5657,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"1329:6:27","nodeType":"VariableDeclaration","scope":5661,"src":"1321:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5656,"name":"address","nodeType":"ElementaryTypeName","src":"1321:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5659,"indexed":false,"mutability":"mutable","name":"text","nameLocation":"1344:4:27","nodeType":"VariableDeclaration","scope":5661,"src":"1337:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5658,"name":"string","nodeType":"ElementaryTypeName","src":"1337:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1256:93:27"},"src":"1235:115:27"},{"anonymous":false,"eventSelector":"90d31678ec129d3863be095922ef7b97386bcca9b61e15d2d53347cddceeb0a7","id":5667,"name":"TheRwaValueIsLessThanTheMinimumNeeded","nameLocation":"1362:37:27","nodeType":"EventDefinition","parameters":{"id":5666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5663,"indexed":false,"mutability":"mutable","name":"_rwaId","nameLocation":"1405:6:27","nodeType":"VariableDeclaration","scope":5667,"src":"1400:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5662,"name":"uint","nodeType":"ElementaryTypeName","src":"1400:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5665,"indexed":false,"mutability":"mutable","name":"_rwaValue","nameLocation":"1418:9:27","nodeType":"VariableDeclaration","scope":5667,"src":"1413:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5664,"name":"uint","nodeType":"ElementaryTypeName","src":"1413:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:29:27"},"src":"1356:73:27"},{"anonymous":false,"eventSelector":"cc6833fd9787745c083edfcc3ae70e4cd35ab78cf84f127388a790fd6ed17fbb","id":5674,"name":"VerifyingRwaValue","nameLocation":"1441:17:27","nodeType":"EventDefinition","parameters":{"id":5673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5669,"indexed":false,"mutability":"mutable","name":"_rwaId","nameLocation":"1464:6:27","nodeType":"VariableDeclaration","scope":5674,"src":"1459:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5668,"name":"uint","nodeType":"ElementaryTypeName","src":"1459:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5672,"indexed":false,"mutability":"mutable","name":"args","nameLocation":"1481:4:27","nodeType":"VariableDeclaration","scope":5674,"src":"1472:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":5670,"name":"string","nodeType":"ElementaryTypeName","src":"1472:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5671,"nodeType":"ArrayTypeName","src":"1472:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"1458:28:27"},"src":"1435:52:27"},{"anonymous":false,"eventSelector":"93bffd1bde7afe8c47a27012597f0dc2c5ccea5fc1323d424e13c21065d594e8","id":5684,"name":"EnsuranceAdd","nameLocation":"1499:12:27","nodeType":"EventDefinition","parameters":{"id":5683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5676,"indexed":false,"mutability":"mutable","name":"provisoryOwner","nameLocation":"1520:14:27","nodeType":"VariableDeclaration","scope":5684,"src":"1512:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5675,"name":"address","nodeType":"ElementaryTypeName","src":"1512:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5678,"indexed":false,"mutability":"mutable","name":"_rwaId","nameLocation":"1541:6:27","nodeType":"VariableDeclaration","scope":5684,"src":"1536:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5677,"name":"uint","nodeType":"ElementaryTypeName","src":"1536:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5680,"indexed":false,"mutability":"mutable","name":"_titleId","nameLocation":"1554:8:27","nodeType":"VariableDeclaration","scope":5684,"src":"1549:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5679,"name":"uint","nodeType":"ElementaryTypeName","src":"1549:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5682,"indexed":false,"mutability":"mutable","name":"_drawNumber","nameLocation":"1569:11:27","nodeType":"VariableDeclaration","scope":5684,"src":"1564:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5681,"name":"uint","nodeType":"ElementaryTypeName","src":"1564:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1511:70:27"},"src":"1493:89:27"},{"anonymous":false,"eventSelector":"e9c6e81492bc93fe089982a07565c4a3a6e0c968c5c00b0cd69a8dac9bf37b49","id":5694,"name":"RWARefunded","nameLocation":"1594:11:27","nodeType":"EventDefinition","parameters":{"id":5693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5686,"indexed":false,"mutability":"mutable","name":"_titleId","nameLocation":"1611:8:27","nodeType":"VariableDeclaration","scope":5694,"src":"1606:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5685,"name":"uint","nodeType":"ElementaryTypeName","src":"1606:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5688,"indexed":false,"mutability":"mutable","name":"_drawNumber","nameLocation":"1626:11:27","nodeType":"VariableDeclaration","scope":5694,"src":"1621:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5687,"name":"uint","nodeType":"ElementaryTypeName","src":"1621:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5690,"indexed":false,"mutability":"mutable","name":"_rwaOwner","nameLocation":"1647:9:27","nodeType":"VariableDeclaration","scope":5694,"src":"1639:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5689,"name":"address","nodeType":"ElementaryTypeName","src":"1639:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5692,"indexed":false,"mutability":"mutable","name":"_colateralId","nameLocation":"1663:12:27","nodeType":"VariableDeclaration","scope":5694,"src":"1658:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5691,"name":"uint","nodeType":"ElementaryTypeName","src":"1658:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1605:71:27"},"src":"1588:89:27"},{"anonymous":false,"eventSelector":"f7b2a02710587555e8088cb5d6a5e52b1468ddc5b8c44e8ec467726812208edf","id":5702,"name":"RWAPriceAtMoment","nameLocation":"1689:16:27","nodeType":"EventDefinition","parameters":{"id":5701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5696,"indexed":false,"mutability":"mutable","name":"_contractId","nameLocation":"1711:11:27","nodeType":"VariableDeclaration","scope":5702,"src":"1706:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5695,"name":"uint","nodeType":"ElementaryTypeName","src":"1706:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5698,"indexed":false,"mutability":"mutable","name":"_rwaValue","nameLocation":"1729:9:27","nodeType":"VariableDeclaration","scope":5702,"src":"1724:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5697,"name":"uint","nodeType":"ElementaryTypeName","src":"1724:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5700,"indexed":false,"mutability":"mutable","name":"_referenceValue","nameLocation":"1745:15:27","nodeType":"VariableDeclaration","scope":5702,"src":"1740:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5699,"name":"uint","nodeType":"ElementaryTypeName","src":"1740:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1705:56:27"},"src":"1683:79:27"},{"anonymous":false,"eventSelector":"17c27c1a1d8499a9f8ed78294056bfb908efabe86085655ffdd026928ecb6747","id":5710,"name":"PriceLowEvent","nameLocation":"1774:13:27","nodeType":"EventDefinition","parameters":{"id":5709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5704,"indexed":false,"mutability":"mutable","name":"_contractId","nameLocation":"1793:11:27","nodeType":"VariableDeclaration","scope":5710,"src":"1788:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5703,"name":"uint","nodeType":"ElementaryTypeName","src":"1788:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5706,"indexed":false,"mutability":"mutable","name":"_rwaValue","nameLocation":"1811:9:27","nodeType":"VariableDeclaration","scope":5710,"src":"1806:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5705,"name":"uint","nodeType":"ElementaryTypeName","src":"1806:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5708,"indexed":false,"mutability":"mutable","name":"_referenceValue","nameLocation":"1827:15:27","nodeType":"VariableDeclaration","scope":5710,"src":"1822:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5707,"name":"uint","nodeType":"ElementaryTypeName","src":"1822:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1787:56:27"},"src":"1768:76:27"},{"anonymous":false,"eventSelector":"9828062d5a194b52d5bc47302cbc7c1d9f19ecac0d17c48feb100d0cf396ad0d","id":5718,"name":"TitleCancelledTheRWAWillBeSold","nameLocation":"1856:30:27","nodeType":"EventDefinition","parameters":{"id":5717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5712,"indexed":false,"mutability":"mutable","name":"_contractId","nameLocation":"1892:11:27","nodeType":"VariableDeclaration","scope":5718,"src":"1887:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5711,"name":"uint","nodeType":"ElementaryTypeName","src":"1887:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5714,"indexed":false,"mutability":"mutable","name":"_rwaValue","nameLocation":"1911:9:27","nodeType":"VariableDeclaration","scope":5718,"src":"1906:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5713,"name":"uint","nodeType":"ElementaryTypeName","src":"1906:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5716,"indexed":false,"mutability":"mutable","name":"rwaValue","nameLocation":"1927:8:27","nodeType":"VariableDeclaration","scope":5718,"src":"1922:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5715,"name":"uint","nodeType":"ElementaryTypeName","src":"1922:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1886:50:27"},"src":"1850:87:27"},{"constant":false,"id":5720,"mutability":"mutable","name":"lastReceivedMessageId","nameLocation":"2025:21:27","nodeType":"VariableDeclaration","scope":6615,"src":"2009:37:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5719,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2009:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":5722,"mutability":"mutable","name":"lastReceivedText","nameLocation":"2067:16:27","nodeType":"VariableDeclaration","scope":6615,"src":"2053:30:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":5721,"name":"bytes","nodeType":"ElementaryTypeName","src":"2053:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"private"},{"constant":false,"id":5724,"mutability":"mutable","name":"horizonR","nameLocation":"2172:8:27","nodeType":"VariableDeclaration","scope":6615,"src":"2156:24:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5723,"name":"address","nodeType":"ElementaryTypeName","src":"2156:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":5726,"mutability":"mutable","name":"subscriptionId","nameLocation":"2257:14:27","nodeType":"VariableDeclaration","scope":6615,"src":"2242:29:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5725,"name":"uint64","nodeType":"ElementaryTypeName","src":"2242:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":5728,"mutability":"mutable","name":"router","nameLocation":"2286:6:27","nodeType":"VariableDeclaration","scope":6615,"src":"2278:14:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5727,"name":"address","nodeType":"ElementaryTypeName","src":"2278:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5730,"mutability":"mutable","name":"gasLimit","nameLocation":"2306:8:27","nodeType":"VariableDeclaration","scope":6615,"src":"2299:15:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5729,"name":"uint32","nodeType":"ElementaryTypeName","src":"2299:6:27","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":5732,"mutability":"mutable","name":"donID","nameLocation":"2329:5:27","nodeType":"VariableDeclaration","scope":6615,"src":"2321:13:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2321:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5735,"mutability":"mutable","name":"linkToken","nameLocation":"2410:9:27","nodeType":"VariableDeclaration","scope":6615,"src":"2391:28:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"},"typeName":{"id":5734,"nodeType":"UserDefinedTypeName","pathNode":{"id":5733,"name":"LinkTokenInterface","nameLocations":["2391:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":1390,"src":"2391:18:27"},"referencedDeclaration":1390,"src":"2391:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"visibility":"internal"},{"canonicalName":"HorizonFujiR.Permissions","id":5763,"members":[{"constant":false,"id":5737,"mutability":"mutable","name":"idTitle","nameLocation":"2467:7:27","nodeType":"VariableDeclaration","scope":5763,"src":"2462:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5736,"name":"uint","nodeType":"ElementaryTypeName","src":"2462:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5739,"mutability":"mutable","name":"drawNumber","nameLocation":"2490:10:27","nodeType":"VariableDeclaration","scope":5763,"src":"2485:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5738,"name":"uint","nodeType":"ElementaryTypeName","src":"2485:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5741,"mutability":"mutable","name":"contractId","nameLocation":"2516:10:27","nodeType":"VariableDeclaration","scope":5763,"src":"2511:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5740,"name":"uint","nodeType":"ElementaryTypeName","src":"2511:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5743,"mutability":"mutable","name":"rwaOwner","nameLocation":"2545:8:27","nodeType":"VariableDeclaration","scope":5763,"src":"2537:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5742,"name":"address","nodeType":"ElementaryTypeName","src":"2537:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5745,"mutability":"mutable","name":"ensuranceValueNeeded","nameLocation":"2569:20:27","nodeType":"VariableDeclaration","scope":5763,"src":"2564:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5744,"name":"uint","nodeType":"ElementaryTypeName","src":"2564:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5747,"mutability":"mutable","name":"ensureValueNow","nameLocation":"2605:14:27","nodeType":"VariableDeclaration","scope":5763,"src":"2600:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5746,"name":"uint","nodeType":"ElementaryTypeName","src":"2600:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5749,"mutability":"mutable","name":"colateralId","nameLocation":"2635:11:27","nodeType":"VariableDeclaration","scope":5763,"src":"2630:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5748,"name":"uint","nodeType":"ElementaryTypeName","src":"2630:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5752,"mutability":"mutable","name":"args","nameLocation":"2666:4:27","nodeType":"VariableDeclaration","scope":5763,"src":"2657:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":5750,"name":"string","nodeType":"ElementaryTypeName","src":"2657:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5751,"nodeType":"ArrayTypeName","src":"2657:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":5754,"mutability":"mutable","name":"lastRequestId","nameLocation":"2689:13:27","nodeType":"VariableDeclaration","scope":5763,"src":"2681:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5753,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2681:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5756,"mutability":"mutable","name":"lastRequestTime","nameLocation":"2718:15:27","nodeType":"VariableDeclaration","scope":5763,"src":"2713:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5755,"name":"uint","nodeType":"ElementaryTypeName","src":"2713:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5758,"mutability":"mutable","name":"lastResponseTime","nameLocation":"2749:16:27","nodeType":"VariableDeclaration","scope":5763,"src":"2744:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5757,"name":"uint","nodeType":"ElementaryTypeName","src":"2744:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5760,"mutability":"mutable","name":"colateralLocked","nameLocation":"2781:15:27","nodeType":"VariableDeclaration","scope":5763,"src":"2776:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5759,"name":"bool","nodeType":"ElementaryTypeName","src":"2776:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5762,"mutability":"mutable","name":"isPermission","nameLocation":"2812:12:27","nodeType":"VariableDeclaration","scope":5763,"src":"2807:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5761,"name":"bool","nodeType":"ElementaryTypeName","src":"2807:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Permissions","nameLocation":"2439:11:27","nodeType":"StructDefinition","scope":6615,"src":"2432:400:27","visibility":"public"},{"canonicalName":"HorizonFujiR.RwaMonitor","id":5770,"members":[{"constant":false,"id":5765,"mutability":"mutable","name":"rwaId","nameLocation":"2873:5:27","nodeType":"VariableDeclaration","scope":5770,"src":"2868:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5764,"name":"uint","nodeType":"ElementaryTypeName","src":"2868:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5767,"mutability":"mutable","name":"hashPermission","nameLocation":"2897:14:27","nodeType":"VariableDeclaration","scope":5770,"src":"2889:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5766,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2889:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5769,"mutability":"mutable","name":"isActive","nameLocation":"2927:8:27","nodeType":"VariableDeclaration","scope":5770,"src":"2922:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5768,"name":"bool","nodeType":"ElementaryTypeName","src":"2922:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"RwaMonitor","nameLocation":"2847:10:27","nodeType":"StructDefinition","scope":6615,"src":"2840:103:27","visibility":"public"},{"constant":false,"id":5774,"mutability":"mutable","name":"rwaMonitors","nameLocation":"3007:11:27","nodeType":"VariableDeclaration","scope":6615,"src":"2994:24:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor[]"},"typeName":{"baseType":{"id":5772,"nodeType":"UserDefinedTypeName","pathNode":{"id":5771,"name":"RwaMonitor","nameLocations":["2994:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":5770,"src":"2994:10:27"},"referencedDeclaration":5770,"src":"2994:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage_ptr","typeString":"struct HorizonFujiR.RwaMonitor"}},"id":5773,"nodeType":"ArrayTypeName","src":"2994:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage_ptr","typeString":"struct HorizonFujiR.RwaMonitor[]"}},"visibility":"internal"},{"constant":false,"functionSelector":"e9982c39","id":5779,"mutability":"mutable","name":"permissionsInfo","nameLocation":"3119:15:27","nodeType":"VariableDeclaration","scope":6615,"src":"3080:54:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions)"},"typeName":{"id":5778,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5775,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3088:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3080:31:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5777,"nodeType":"UserDefinedTypeName","pathNode":{"id":5776,"name":"Permissions","nameLocations":["3099:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":5763,"src":"3099:11:27"},"referencedDeclaration":5763,"src":"3099:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"}}},"visibility":"public"},{"constant":false,"functionSelector":"7dc91a02","id":5783,"mutability":"mutable","name":"whitelistedSourceChains","nameLocation":"3234:23:27","nodeType":"VariableDeclaration","scope":6615,"src":"3203:54:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"},"typeName":{"id":5782,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5780,"name":"uint64","nodeType":"ElementaryTypeName","src":"3211:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"3203:23:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5781,"name":"bool","nodeType":"ElementaryTypeName","src":"3221:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"272efc69","id":5787,"mutability":"mutable","name":"whitelistedSenders","nameLocation":"3350:18:27","nodeType":"VariableDeclaration","scope":6615,"src":"3318:50:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":5786,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5784,"name":"address","nodeType":"ElementaryTypeName","src":"3326:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3318:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5785,"name":"bool","nodeType":"ElementaryTypeName","src":"3337:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"id":5796,"mutability":"mutable","name":"sender","nameLocation":"3390:6:27","nodeType":"VariableDeclaration","scope":6615,"src":"3377:87:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"},"typeName":{"id":5789,"nodeType":"UserDefinedTypeName","pathNode":{"id":5788,"name":"HorizonFujiS","nameLocations":["3377:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":7177,"src":"3377:12:27"},"referencedDeclaration":7177,"src":"3377:12:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}},"value":{"arguments":[{"arguments":[{"hexValue":"307835464137363939323261363432383735386662343434353338313565326334333663353743336337","id":5793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3420:42:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x5FA769922a6428758fb44453815e2c436c57C3c7"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3412:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5791,"name":"address","nodeType":"ElementaryTypeName","src":"3412:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":5794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3412:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5790,"name":"HorizonFujiS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7177,"src":"3399:12:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_HorizonFujiS_$7177_$","typeString":"type(contract HorizonFujiS)"}},"id":5795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3399:65:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}},"visibility":"internal"},{"constant":false,"id":5805,"mutability":"mutable","name":"functions","nameLocation":"3507:9:27","nodeType":"VariableDeclaration","scope":6615,"src":"3490:98:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFunctions_$7450","typeString":"contract HorizonFunctions"},"typeName":{"id":5798,"nodeType":"UserDefinedTypeName","pathNode":{"id":5797,"name":"HorizonFunctions","nameLocations":["3490:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":7450,"src":"3490:16:27"},"referencedDeclaration":7450,"src":"3490:16:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFunctions_$7450","typeString":"contract HorizonFunctions"}},"value":{"arguments":[{"arguments":[{"hexValue":"307835464137363939323261363432383735386662343434353338313565326334333663353743336337","id":5802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3544:42:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x5FA769922a6428758fb44453815e2c436c57C3c7"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3536:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5800,"name":"address","nodeType":"ElementaryTypeName","src":"3536:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":5803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3536:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5799,"name":"HorizonFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7450,"src":"3519:16:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_HorizonFunctions_$7450_$","typeString":"type(contract HorizonFunctions)"}},"id":5804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3519:69:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFunctions_$7450","typeString":"contract HorizonFunctions"}},"visibility":"internal"},{"constant":false,"id":5814,"mutability":"mutable","name":"rwa","nameLocation":"3621:3:27","nodeType":"VariableDeclaration","scope":6615,"src":"3614:72:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"},"typeName":{"id":5807,"nodeType":"UserDefinedTypeName","pathNode":{"id":5806,"name":"ERC721","nameLocations":["3614:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":3817,"src":"3614:6:27"},"referencedDeclaration":3817,"src":"3614:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"}},"value":{"arguments":[{"arguments":[{"hexValue":"307835464137363939323261363432383735386662343434353338313565326334333663353743336337","id":5811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3642:42:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x5FA769922a6428758fb44453815e2c436c57C3c7"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3634:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5809,"name":"address","nodeType":"ElementaryTypeName","src":"3634:8:27","stateMutability":"payable","typeDescriptions":{}}},"id":5812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":5808,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"3627:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$3817_$","typeString":"type(contract ERC721)"}},"id":5813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3627:59:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"}},"visibility":"internal"},{"body":{"id":5831,"nodeType":"Block","src":"3856:125:27","statements":[{"assignments":[5826],"declarations":[{"constant":false,"id":5826,"mutability":"mutable","name":"linkToken","nameLocation":"3931:9:27","nodeType":"VariableDeclaration","scope":5831,"src":"3912:28:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"},"typeName":{"id":5825,"nodeType":"UserDefinedTypeName","pathNode":{"id":5824,"name":"LinkTokenInterface","nameLocations":["3912:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":1390,"src":"3912:18:27"},"referencedDeclaration":1390,"src":"3912:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"visibility":"internal"}],"id":5830,"initialValue":{"arguments":[{"id":5828,"name":"_linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5816,"src":"3962:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5827,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"3943:18:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$1390_$","typeString":"type(contract LinkTokenInterface)"}},"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3943:30:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"nodeType":"VariableDeclarationStatement","src":"3912:61:27"}]},"id":5832,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":5821,"name":"_routerCCIP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5818,"src":"3843:11:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5822,"kind":"baseConstructorSpecifier","modifierName":{"id":5820,"name":"CCIPReceiver","nameLocations":["3830:12:27"],"nodeType":"IdentifierPath","referencedDeclaration":119,"src":"3830:12:27"},"nodeType":"ModifierInvocation","src":"3830:25:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5816,"mutability":"mutable","name":"_linkToken","nameLocation":"3734:10:27","nodeType":"VariableDeclaration","scope":5832,"src":"3726:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5815,"name":"address","nodeType":"ElementaryTypeName","src":"3726:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5818,"mutability":"mutable","name":"_routerCCIP","nameLocation":"3817:11:27","nodeType":"VariableDeclaration","scope":5832,"src":"3809:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5817,"name":"address","nodeType":"ElementaryTypeName","src":"3809:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3725:104:27"},"returnParameters":{"id":5823,"nodeType":"ParameterList","parameters":[],"src":"3856:0:27"},"scope":6615,"src":"3714:267:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5841,"nodeType":"Block","src":"4043:46:27","statements":[{"expression":{"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5837,"name":"horizonR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5724,"src":"4054:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5838,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5834,"src":"4065:16:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4054:27:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5840,"nodeType":"ExpressionStatement","src":"4054:27:27"}]},"functionSelector":"69d83ed1","id":5842,"implemented":true,"kind":"function","modifiers":[],"name":"addReceiver","nameLocation":"3998:11:27","nodeType":"FunctionDefinition","parameters":{"id":5835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5834,"mutability":"mutable","name":"_receiverAddress","nameLocation":"4018:16:27","nodeType":"VariableDeclaration","scope":5842,"src":"4010:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5833,"name":"address","nodeType":"ElementaryTypeName","src":"4010:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4009:26:27"},"returnParameters":{"id":5836,"nodeType":"ParameterList","parameters":[],"src":"4043:0:27"},"scope":6615,"src":"3989:100:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[84],"body":{"id":5920,"nodeType":"Block","src":"4355:692:27","statements":[{"expression":{"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5849,"name":"lastReceivedMessageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5720,"src":"4366:21:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5850,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"4390:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":5851,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4405:9:27","memberName":"messageId","nodeType":"MemberAccess","referencedDeclaration":193,"src":"4390:24:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4366:48:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5853,"nodeType":"ExpressionStatement","src":"4366:48:27"},{"expression":{"id":5863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5854,"name":"lastReceivedText","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5722,"src":"4448:16:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5857,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"4478:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":5858,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4493:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":199,"src":"4478:19:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":5860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4500:5:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5859,"name":"bytes","nodeType":"ElementaryTypeName","src":"4500:5:27","typeDescriptions":{}}}],"id":5861,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4499:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"}],"expression":{"id":5855,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4467:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4471:6:27","memberName":"decode","nodeType":"MemberAccess","src":"4467:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4467:40:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4448:59:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":5864,"nodeType":"ExpressionStatement","src":"4448:59:27"},{"assignments":[5866],"declarations":[{"constant":false,"id":5866,"mutability":"mutable","name":"permissionHash","nameLocation":"4561:14:27","nodeType":"VariableDeclaration","scope":5920,"src":"4553:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4553:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":5867,"nodeType":"VariableDeclarationStatement","src":"4553:22:27"},{"assignments":[5869],"declarations":[{"constant":false,"id":5869,"mutability":"mutable","name":"_ensuranceValueNeeded","nameLocation":"4591:21:27","nodeType":"VariableDeclaration","scope":5920,"src":"4586:26:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5868,"name":"uint","nodeType":"ElementaryTypeName","src":"4586:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5870,"nodeType":"VariableDeclarationStatement","src":"4586:26:27"},{"assignments":[5872],"declarations":[{"constant":false,"id":5872,"mutability":"mutable","name":"_colateralLocked","nameLocation":"4628:16:27","nodeType":"VariableDeclaration","scope":5920,"src":"4623:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5871,"name":"bool","nodeType":"ElementaryTypeName","src":"4623:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5873,"nodeType":"VariableDeclarationStatement","src":"4623:21:27"},{"expression":{"id":5889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":5874,"name":"permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5866,"src":"4658:14:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5875,"name":"_ensuranceValueNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"4674:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5876,"name":"_colateralLocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"4697:16:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5877,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"4657:57:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$_t_bool_$","typeString":"tuple(bytes32,uint256,bool)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5880,"name":"lastReceivedText","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5722,"src":"4728:16:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},{"components":[{"id":5882,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4747:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":5881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4747:7:27","typeDescriptions":{}}},{"id":5884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4756:4:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5883,"name":"uint","nodeType":"ElementaryTypeName","src":"4756:4:27","typeDescriptions":{}}},{"id":5886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4762:4:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":5885,"name":"bool","nodeType":"ElementaryTypeName","src":"4762:4:27","typeDescriptions":{}}}],"id":5887,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4746:21:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$_t_type$_t_bool_$_$","typeString":"tuple(type(bytes32),type(uint256),type(bool))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$_t_type$_t_bool_$_$","typeString":"tuple(type(bytes32),type(uint256),type(bool))"}],"expression":{"id":5878,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4717:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4721:6:27","memberName":"decode","nodeType":"MemberAccess","src":"4717:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$_t_bool_$","typeString":"tuple(bytes32,uint256,bool)"}},"src":"4657:111:27","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5890,"nodeType":"ExpressionStatement","src":"4657:111:27"},{"expression":{"arguments":[{"id":5892,"name":"permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5866,"src":"4798:14:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5893,"name":"_ensuranceValueNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5869,"src":"4814:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5894,"name":"_colateralLocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5872,"src":"4837:16:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5891,"name":"handlePermission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5988,"src":"4781:16:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (bytes32,uint256,bool)"}},"id":5895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4781:73:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5896,"nodeType":"ExpressionStatement","src":"4781:73:27"},{"eventCall":{"arguments":[{"expression":{"id":5898,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"4889:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":5899,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4904:9:27","memberName":"messageId","nodeType":"MemberAccess","referencedDeclaration":193,"src":"4889:24:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5900,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"4915:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":5901,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4930:19:27","memberName":"sourceChainSelector","nodeType":"MemberAccess","referencedDeclaration":195,"src":"4915:34:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"arguments":[{"expression":{"id":5904,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"4962:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":5905,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4977:6:27","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":197,"src":"4962:21:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":5907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4986:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5906,"name":"address","nodeType":"ElementaryTypeName","src":"4986:7:27","typeDescriptions":{}}}],"id":5908,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4985:9:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":5902,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4951:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4955:6:27","memberName":"decode","nodeType":"MemberAccess","src":"4951:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4951:44:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"expression":{"id":5912,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5845,"src":"5008:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":5913,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5023:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":199,"src":"5008:19:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":5915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5030:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5914,"name":"string","nodeType":"ElementaryTypeName","src":"5030:6:27","typeDescriptions":{}}}],"id":5916,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5029:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"id":5910,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4997:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5001:6:27","memberName":"decode","nodeType":"MemberAccess","src":"4997:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":5917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4997:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5897,"name":"MessageReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5661,"src":"4872:15:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint64_$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,uint64,address,string memory)"}},"id":5918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4872:167:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5919,"nodeType":"EmitStatement","src":"4867:172:27"}]},"id":5921,"implemented":true,"kind":"function","modifiers":[],"name":"_ccipReceive","nameLocation":"4142:12:27","nodeType":"FunctionDefinition","overrides":{"id":5847,"nodeType":"OverrideSpecifier","overrides":[],"src":"4210:8:27"},"parameters":{"id":5846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5845,"mutability":"mutable","name":"any2EvmMessage","nameLocation":"4185:14:27","nodeType":"VariableDeclaration","scope":5921,"src":"4156:43:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":5844,"nodeType":"UserDefinedTypeName","pathNode":{"id":5843,"name":"Client.Any2EVMMessage","nameLocations":["4156:6:27","4163:14:27"],"nodeType":"IdentifierPath","referencedDeclaration":204,"src":"4156:21:27"},"referencedDeclaration":204,"src":"4156:21:27","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"4154:46:27"},"returnParameters":{"id":5848,"nodeType":"ParameterList","parameters":[],"src":"4355:0:27"},"scope":6615,"src":"4133:914:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5987,"nodeType":"Block","src":"5227:826:27","statements":[{"assignments":[5934],"declarations":[{"constant":false,"id":5934,"mutability":"mutable","name":"emptyArray","nameLocation":"5256:10:27","nodeType":"VariableDeclaration","scope":5987,"src":"5240:26:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":5932,"name":"string","nodeType":"ElementaryTypeName","src":"5240:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5933,"nodeType":"ArrayTypeName","src":"5240:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"id":5940,"initialValue":{"arguments":[{"hexValue":"30","id":5938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5269:12:27","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (string memory[] memory)"},"typeName":{"baseType":{"id":5935,"name":"string","nodeType":"ElementaryTypeName","src":"5273:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5936,"nodeType":"ArrayTypeName","src":"5273:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}}},"id":5939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5269:15:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5240:44:27"},{"assignments":[5943],"declarations":[{"constant":false,"id":5943,"mutability":"mutable","name":"permission","nameLocation":"5316:10:27","nodeType":"VariableDeclaration","scope":5987,"src":"5297:29:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_memory_ptr","typeString":"struct HorizonFujiR.Permissions"},"typeName":{"id":5942,"nodeType":"UserDefinedTypeName","pathNode":{"id":5941,"name":"Permissions","nameLocations":["5297:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":5763,"src":"5297:11:27"},"referencedDeclaration":5763,"src":"5297:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"}},"visibility":"internal"}],"id":5965,"initialValue":{"arguments":[{"hexValue":"30","id":5945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5365:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5393:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5421:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"30","id":5950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5455:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5447:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5948,"name":"address","nodeType":"ElementaryTypeName","src":"5447:7:27","typeDescriptions":{}}},"id":5951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5447:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5952,"name":"_ensuranceValueNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5925,"src":"5495:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"35","id":5953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5519:1:27","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"5495:25:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5955,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5494:27:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5552:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5581:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5958,"name":"emptyArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5934,"src":"5603:10:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},{"hexValue":"30","id":5959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5643:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5676:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5710:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5962,"name":"_colateralLocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5927,"src":"5743:16:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"74727565","id":5963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5788:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5944,"name":"Permissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5763,"src":"5329:11:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Permissions_$5763_storage_ptr_$","typeString":"type(struct HorizonFujiR.Permissions storage pointer)"}},"id":5964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5356:7:27","5381:10:27","5409:10:27","5437:8:27","5472:20:27","5536:14:27","5568:11:27","5597:4:27","5628:13:27","5659:15:27","5692:16:27","5726:15:27","5774:12:27"],"names":["idTitle","contractId","drawNumber","rwaOwner","ensuranceValueNeeded","ensureValueNow","colateralId","args","lastRequestId","lastRequestTime","lastResponseTime","colateralLocked","isPermission"],"nodeType":"FunctionCall","src":"5329:475:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_memory_ptr","typeString":"struct HorizonFujiR.Permissions memory"}},"nodeType":"VariableDeclarationStatement","src":"5297:507:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5966,"name":"_colateralLocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5927,"src":"5820:16:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":5967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5840:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5820:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5985,"nodeType":"Block","src":"5921:125:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5976,"name":"_colateralLocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5927,"src":"5939:16:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":5977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5959:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5939:25:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5984,"nodeType":"IfStatement","src":"5936:99:27","trueBody":{"id":5983,"nodeType":"Block","src":"5965:70:27","statements":[{"expression":{"arguments":[{"id":5980,"name":"_permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5923,"src":"6003:15:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5979,"name":"sendRwaBackToOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6311,"src":"5984:18:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":5981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5984:35:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5982,"nodeType":"ExpressionStatement","src":"5984:35:27"}]}}]},"id":5986,"nodeType":"IfStatement","src":"5817:229:27","trueBody":{"id":5975,"nodeType":"Block","src":"5845:72:27","statements":[{"expression":{"id":5973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5969,"name":"permissionsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"5860:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions storage ref)"}},"id":5971,"indexExpression":{"id":5970,"name":"_permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5923,"src":"5876:15:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5860:32:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5972,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5943,"src":"5895:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_memory_ptr","typeString":"struct HorizonFujiR.Permissions memory"}},"src":"5860:45:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"id":5974,"nodeType":"ExpressionStatement","src":"5860:45:27"}]}}]},"id":5988,"implemented":true,"kind":"function","modifiers":[],"name":"handlePermission","nameLocation":"5064:16:27","nodeType":"FunctionDefinition","parameters":{"id":5928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5923,"mutability":"mutable","name":"_permissionHash","nameLocation":"5089:15:27","nodeType":"VariableDeclaration","scope":5988,"src":"5081:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5081:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5925,"mutability":"mutable","name":"_ensuranceValueNeeded","nameLocation":"5142:21:27","nodeType":"VariableDeclaration","scope":5988,"src":"5137:26:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5924,"name":"uint","nodeType":"ElementaryTypeName","src":"5137:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5927,"mutability":"mutable","name":"_colateralLocked","nameLocation":"5201:16:27","nodeType":"VariableDeclaration","scope":5988,"src":"5196:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5926,"name":"bool","nodeType":"ElementaryTypeName","src":"5196:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5080:138:27"},"returnParameters":{"id":5929,"nodeType":"ParameterList","parameters":[],"src":"5227:0:27"},"scope":6615,"src":"5055:998:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6096,"nodeType":"Block","src":"6189:830:27","statements":[{"assignments":[6003],"declarations":[{"constant":false,"id":6003,"mutability":"mutable","name":"permissionHash","nameLocation":"6237:14:27","nodeType":"VariableDeclaration","scope":6096,"src":"6229:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6002,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6229:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6012,"initialValue":{"arguments":[{"arguments":[{"id":6007,"name":"_titleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5990,"src":"6281:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6008,"name":"_contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5992,"src":"6291:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6009,"name":"_drawNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"6304:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6005,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6264:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6268:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"6264:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6264:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6004,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6254:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6254:63:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6229:88:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6014,"name":"permissionsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"6338:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions storage ref)"}},"id":6016,"indexExpression":{"id":6015,"name":"permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"6354:14:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6338:31:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"id":6017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6370:12:27","memberName":"isPermission","nodeType":"MemberAccess","referencedDeclaration":5762,"src":"6338:44:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":6018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6386:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6338:52:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973207065726d697373696f6e206469646e27742065786973747321","id":6020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6392:32:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a44994ae5721cce8fcc8a105e742eb847f39786c091f4c8a80f1455479e8902","typeString":"literal_string \"This permission didn't exists!\""},"value":"This permission didn't exists!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a44994ae5721cce8fcc8a105e742eb847f39786c091f4c8a80f1455479e8902","typeString":"literal_string \"This permission didn't exists!\""}],"id":6013,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6330:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6330:95:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6022,"nodeType":"ExpressionStatement","src":"6330:95:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6024,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6444:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6448:6:27","memberName":"sender","nodeType":"MemberAccess","src":"6444:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6028,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5996,"src":"6470:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6026,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"6458:3:27","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"}},"id":6027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6462:7:27","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2950,"src":"6458:11:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":6029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6458:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6444:33:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f75206d75737420626520746865206f776e6572206f662074686520696e666f726d65642052574121","id":6031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6479:44:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_d167c7ce1a9e576c36059256b6ce3073ab4d33fa2560453e282ff0dd3b5c6b4e","typeString":"literal_string \"You must be the owner of the informed RWA!\""},"value":"You must be the owner of the informed RWA!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d167c7ce1a9e576c36059256b6ce3073ab4d33fa2560453e282ff0dd3b5c6b4e","typeString":"literal_string \"You must be the owner of the informed RWA!\""}],"id":6023,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6436:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6436:88:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6033,"nodeType":"ExpressionStatement","src":"6436:88:27"},{"assignments":[6036],"declarations":[{"constant":false,"id":6036,"mutability":"mutable","name":"permission","nameLocation":"6557:10:27","nodeType":"VariableDeclaration","scope":6096,"src":"6537:30:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"},"typeName":{"id":6035,"nodeType":"UserDefinedTypeName","pathNode":{"id":6034,"name":"Permissions","nameLocations":["6537:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":5763,"src":"6537:11:27"},"referencedDeclaration":5763,"src":"6537:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"}},"visibility":"internal"}],"id":6040,"initialValue":{"baseExpression":{"id":6037,"name":"permissionsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"6570:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions storage ref)"}},"id":6039,"indexExpression":{"id":6038,"name":"permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6003,"src":"6586:14:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6570:31:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6537:64:27"},{"expression":{"id":6045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6041,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"6614:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6043,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6625:7:27","memberName":"idTitle","nodeType":"MemberAccess","referencedDeclaration":5737,"src":"6614:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6044,"name":"_titleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5990,"src":"6635:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6614:29:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6046,"nodeType":"ExpressionStatement","src":"6614:29:27"},{"expression":{"id":6051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6047,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"6654:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6049,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6665:10:27","memberName":"contractId","nodeType":"MemberAccess","referencedDeclaration":5741,"src":"6654:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6050,"name":"_contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5992,"src":"6678:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6654:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6052,"nodeType":"ExpressionStatement","src":"6654:35:27"},{"expression":{"id":6057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6053,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"6700:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6055,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6711:10:27","memberName":"drawNumber","nodeType":"MemberAccess","referencedDeclaration":5739,"src":"6700:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6056,"name":"_drawNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"6724:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6700:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6058,"nodeType":"ExpressionStatement","src":"6700:35:27"},{"expression":{"id":6064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6059,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"6746:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6061,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6757:8:27","memberName":"rwaOwner","nodeType":"MemberAccess","referencedDeclaration":5743,"src":"6746:19:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":6062,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6768:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6772:6:27","memberName":"sender","nodeType":"MemberAccess","src":"6768:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6746:32:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6065,"nodeType":"ExpressionStatement","src":"6746:32:27"},{"expression":{"id":6070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6066,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"6789:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6068,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6800:11:27","memberName":"colateralId","nodeType":"MemberAccess","referencedDeclaration":5749,"src":"6789:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6069,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5996,"src":"6814:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6789:31:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6071,"nodeType":"ExpressionStatement","src":"6789:31:27"},{"expression":{"id":6076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6072,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"6831:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6074,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6842:4:27","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":5752,"src":"6831:15:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6075,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"6849:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"src":"6831:22:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":6077,"nodeType":"ExpressionStatement","src":"6831:22:27"},{"assignments":[6079],"declarations":[{"constant":false,"id":6079,"mutability":"mutable","name":"requestId","nameLocation":"6874:9:27","nodeType":"VariableDeclaration","scope":6096,"src":"6866:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6866:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6084,"initialValue":{"arguments":[{"id":6082,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"6908:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}],"expression":{"id":6080,"name":"functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"6886:9:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFunctions_$7450","typeString":"contract HorizonFunctions"}},"id":6081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6896:11:27","memberName":"sendRequest","nodeType":"MemberAccess","referencedDeclaration":7339,"src":"6886:21:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (string memory[] memory) external returns (bytes32)"}},"id":6083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6886:27:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6866:47:27"},{"expression":{"id":6089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6085,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6036,"src":"6926:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6937:13:27","memberName":"lastRequestId","nodeType":"MemberAccess","referencedDeclaration":5754,"src":"6926:24:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6088,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6079,"src":"6953:9:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6926:36:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6090,"nodeType":"ExpressionStatement","src":"6926:36:27"},{"eventCall":{"arguments":[{"id":6092,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5996,"src":"6998:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6093,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5999,"src":"7006:4:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}],"id":6091,"name":"VerifyingRwaValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5674,"src":"6980:17:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,string memory[] memory)"}},"id":6094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6980:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6095,"nodeType":"EmitStatement","src":"6975:36:27"}]},"functionSelector":"92365ce4","id":6097,"implemented":true,"kind":"function","modifiers":[],"name":"verifyColateralValue","nameLocation":"6070:20:27","nodeType":"FunctionDefinition","parameters":{"id":6000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5990,"mutability":"mutable","name":"_titleId","nameLocation":"6099:8:27","nodeType":"VariableDeclaration","scope":6097,"src":"6091:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5989,"name":"uint256","nodeType":"ElementaryTypeName","src":"6091:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5992,"mutability":"mutable","name":"_contractId","nameLocation":"6114:11:27","nodeType":"VariableDeclaration","scope":6097,"src":"6109:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5991,"name":"uint","nodeType":"ElementaryTypeName","src":"6109:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5994,"mutability":"mutable","name":"_drawNumber","nameLocation":"6132:11:27","nodeType":"VariableDeclaration","scope":6097,"src":"6127:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5993,"name":"uint","nodeType":"ElementaryTypeName","src":"6127:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5996,"mutability":"mutable","name":"_rwaId","nameLocation":"6150:6:27","nodeType":"VariableDeclaration","scope":6097,"src":"6145:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5995,"name":"uint","nodeType":"ElementaryTypeName","src":"6145:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5999,"mutability":"mutable","name":"args","nameLocation":"6176:4:27","nodeType":"VariableDeclaration","scope":6097,"src":"6158:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":5997,"name":"string","nodeType":"ElementaryTypeName","src":"6158:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5998,"nodeType":"ArrayTypeName","src":"6158:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"6090:91:27"},"returnParameters":{"id":6001,"nodeType":"ParameterList","parameters":[],"src":"6189:0:27"},"scope":6615,"src":"6061:958:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6233,"nodeType":"Block","src":"7124:1504:27","statements":[{"assignments":[6109],"declarations":[{"constant":false,"id":6109,"mutability":"mutable","name":"permissionHash","nameLocation":"7143:14:27","nodeType":"VariableDeclaration","scope":6233,"src":"7135:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6108,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7135:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6118,"initialValue":{"arguments":[{"arguments":[{"id":6113,"name":"_titleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"7187:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6114,"name":"_contractId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6101,"src":"7197:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6115,"name":"_drawNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6103,"src":"7210:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6111,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7170:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7174:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"7170:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7170:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6110,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7160:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7160:63:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7135:88:27"},{"assignments":[6121],"declarations":[{"constant":false,"id":6121,"mutability":"mutable","name":"permission","nameLocation":"7256:10:27","nodeType":"VariableDeclaration","scope":6233,"src":"7236:30:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"},"typeName":{"id":6120,"nodeType":"UserDefinedTypeName","pathNode":{"id":6119,"name":"Permissions","nameLocations":["7236:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":5763,"src":"7236:11:27"},"referencedDeclaration":5763,"src":"7236:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"}},"visibility":"internal"}],"id":6125,"initialValue":{"baseExpression":{"id":6122,"name":"permissionsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"7269:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions storage ref)"}},"id":6124,"indexExpression":{"id":6123,"name":"permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6109,"src":"7285:14:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7269:31:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7236:64:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6127,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"7321:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6128,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7332:12:27","memberName":"isPermission","nodeType":"MemberAccess","referencedDeclaration":5762,"src":"7321:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":6129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7348:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7321:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973207065726d697373696f6e206469646e27742065786973747321","id":6131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7354:32:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a44994ae5721cce8fcc8a105e742eb847f39786c091f4c8a80f1455479e8902","typeString":"literal_string \"This permission didn't exists!\""},"value":"This permission didn't exists!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a44994ae5721cce8fcc8a105e742eb847f39786c091f4c8a80f1455479e8902","typeString":"literal_string \"This permission didn't exists!\""}],"id":6126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7313:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7313:74:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6133,"nodeType":"ExpressionStatement","src":"7313:74:27"},{"assignments":[6135,6137],"declarations":[{"constant":false,"id":6135,"mutability":"mutable","name":"vehicleValue","nameLocation":"7406:12:27","nodeType":"VariableDeclaration","scope":6233,"src":"7401:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6134,"name":"uint","nodeType":"ElementaryTypeName","src":"7401:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6137,"mutability":"mutable","name":"responseTime","nameLocation":"7425:12:27","nodeType":"VariableDeclaration","scope":6233,"src":"7420:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6136,"name":"uint","nodeType":"ElementaryTypeName","src":"7420:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6143,"initialValue":{"arguments":[{"expression":{"id":6140,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"7471:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6141,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7482:13:27","memberName":"lastRequestId","nodeType":"MemberAccess","referencedDeclaration":5754,"src":"7471:24:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6138,"name":"functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"7441:9:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFunctions_$7450","typeString":"contract HorizonFunctions"}},"id":6139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7451:19:27","memberName":"returnFunctionsInfo","nodeType":"MemberAccess","referencedDeclaration":7449,"src":"7441:29:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes32) view external returns (uint256,uint256)"}},"id":6142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7441:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7400:96:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6144,"name":"vehicleValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6135,"src":"7512:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":6145,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"7528:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7539:20:27","memberName":"ensuranceValueNeeded","nodeType":"MemberAccess","referencedDeclaration":5745,"src":"7528:31:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7512:47:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6231,"nodeType":"Block","src":"8530:91:27","statements":[{"eventCall":{"arguments":[{"id":6227,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"8588:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6228,"name":"vehicleValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6135,"src":"8596:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6226,"name":"TheRwaValueIsLessThanTheMinimumNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5667,"src":"8550:37:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":6229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8550:59:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6230,"nodeType":"EmitStatement","src":"8545:64:27"}]},"id":6232,"nodeType":"IfStatement","src":"7509:1112:27","trueBody":{"id":6225,"nodeType":"Block","src":"7560:965:27","statements":[{"expression":{"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6148,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"7589:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7600:14:27","memberName":"ensureValueNow","nodeType":"MemberAccess","referencedDeclaration":5747,"src":"7589:25:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6151,"name":"vehicleValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6135,"src":"7617:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7589:40:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6153,"nodeType":"ExpressionStatement","src":"7589:40:27"},{"expression":{"id":6158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6154,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"7644:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6156,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7655:16:27","memberName":"lastResponseTime","nodeType":"MemberAccess","referencedDeclaration":5758,"src":"7644:27:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6157,"name":"responseTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6137,"src":"7674:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7644:42:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6159,"nodeType":"ExpressionStatement","src":"7644:42:27"},{"assignments":[6161],"declarations":[{"constant":false,"id":6161,"mutability":"mutable","name":"targetPrice","nameLocation":"7708:11:27","nodeType":"VariableDeclaration","scope":6225,"src":"7703:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6160,"name":"uint","nodeType":"ElementaryTypeName","src":"7703:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6164,"initialValue":{"expression":{"id":6162,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6121,"src":"7722:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7733:20:27","memberName":"ensuranceValueNeeded","nodeType":"MemberAccess","referencedDeclaration":5745,"src":"7722:31:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7703:50:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6166,"name":"vehicleValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6135,"src":"7778:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6167,"name":"targetPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"7794:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7778:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686520656e737572616e6365206d7573742068617665206174206c656173742031302074696d6573207468652076616c7565206f66207468652076616c7565206e656564656421","id":6169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7807:74:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_2414cc40ac8a5370867e7602973fd432a97f7c51f4f0b6640e2ba6d43aa81b6b","typeString":"literal_string \"The ensurance must have at least 10 times the value of the value needed!\""},"value":"The ensurance must have at least 10 times the value of the value needed!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2414cc40ac8a5370867e7602973fd432a97f7c51f4f0b6640e2ba6d43aa81b6b","typeString":"literal_string \"The ensurance must have at least 10 times the value of the value needed!\""}],"id":6165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7770:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7770:112:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6171,"nodeType":"ExpressionStatement","src":"7770:112:27"},{"expression":{"arguments":[{"expression":{"id":6175,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7928:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7932:6:27","memberName":"sender","nodeType":"MemberAccess","src":"7928:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6179,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7948:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}],"id":6178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7940:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6177,"name":"address","nodeType":"ElementaryTypeName","src":"7940:7:27","typeDescriptions":{}}},"id":6180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7940:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6181,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"7955:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6172,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"7911:3:27","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"}},"id":6174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7915:12:27","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3125,"src":"7911:16:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":6182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7911:51:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6183,"nodeType":"ExpressionStatement","src":"7911:51:27"},{"assignments":[6185],"declarations":[{"constant":false,"id":6185,"mutability":"mutable","name":"provisoryOwner","nameLocation":"7987:14:27","nodeType":"VariableDeclaration","scope":6225,"src":"7979:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6184,"name":"address","nodeType":"ElementaryTypeName","src":"7979:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6190,"initialValue":{"arguments":[{"id":6188,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"8016:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6186,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"8004:3:27","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"}},"id":6187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8008:7:27","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2950,"src":"8004:11:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":6189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8004:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7979:44:27"},{"expression":{"arguments":[{"arguments":[{"id":6195,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"8094:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6196,"name":"permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6109,"src":"8135:14:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"74727565","id":6197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8178:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6194,"name":"RwaMonitor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5770,"src":"8057:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RwaMonitor_$5770_storage_ptr_$","typeString":"type(struct HorizonFujiR.RwaMonitor storage pointer)"}},"id":6198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["8087:5:27","8119:14:27","8168:8:27"],"names":["rwaId","hashPermission","isActive"],"nodeType":"FunctionCall","src":"8057:141:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_memory_ptr","typeString":"struct HorizonFujiR.RwaMonitor memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_RwaMonitor_$5770_memory_ptr","typeString":"struct HorizonFujiR.RwaMonitor memory"}],"expression":{"id":6191,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"8040:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8052:4:27","memberName":"push","nodeType":"MemberAccess","src":"8040:16:27","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage_ptr_$_t_struct$_RwaMonitor_$5770_storage_$returns$__$attached_to$_t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage_ptr_$","typeString":"function (struct HorizonFujiR.RwaMonitor storage ref[] storage pointer,struct HorizonFujiR.RwaMonitor storage ref)"}},"id":6199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8040:159:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6200,"nodeType":"ExpressionStatement","src":"8040:159:27"},{"assignments":[6202],"declarations":[{"constant":false,"id":6202,"mutability":"mutable","name":"colateralAdded","nameLocation":"8241:14:27","nodeType":"VariableDeclaration","scope":6225,"src":"8228:27:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6201,"name":"bytes","nodeType":"ElementaryTypeName","src":"8228:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":6209,"initialValue":{"arguments":[{"id":6205,"name":"permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6109,"src":"8269:14:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6206,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"8285:3:27","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"}},{"id":6207,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"8290:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6203,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8258:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8262:6:27","memberName":"encode","nodeType":"MemberAccess","src":"8258:10:27","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8258:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"8228:69:27"},{"expression":{"arguments":[{"hexValue":"3132353332363039353833383632393136353137","id":6213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8340:20:27","typeDescriptions":{"typeIdentifier":"t_rational_12532609583862916517_by_1","typeString":"int_const 12532609583862916517"},"value":"12532609583862916517"},{"id":6214,"name":"horizonR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5724,"src":"8362:8:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6215,"name":"colateralAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"8372:14:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_12532609583862916517_by_1","typeString":"int_const 12532609583862916517"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6210,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"8314:6:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}},"id":6212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8321:18:27","memberName":"sendMessagePayLINK","nodeType":"MemberAccess","referencedDeclaration":6965,"src":"8314:25:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint64,address,bytes memory) external returns (bytes32)"}},"id":6216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8314:73:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6217,"nodeType":"ExpressionStatement","src":"8314:73:27"},{"eventCall":{"arguments":[{"id":6219,"name":"provisoryOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"8467:14:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6220,"name":"_rwaId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6105,"src":"8483:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6221,"name":"_titleId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6099,"src":"8491:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6222,"name":"_drawNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6103,"src":"8501:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6218,"name":"EnsuranceAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5684,"src":"8454:12:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":6223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8454:59:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6224,"nodeType":"EmitStatement","src":"8449:64:27"}]}}]},"functionSelector":"95871c8f","id":6234,"implemented":true,"kind":"function","modifiers":[],"name":"addCollateral","nameLocation":"7036:13:27","nodeType":"FunctionDefinition","parameters":{"id":6106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6099,"mutability":"mutable","name":"_titleId","nameLocation":"7058:8:27","nodeType":"VariableDeclaration","scope":6234,"src":"7050:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6098,"name":"uint256","nodeType":"ElementaryTypeName","src":"7050:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6101,"mutability":"mutable","name":"_contractId","nameLocation":"7073:11:27","nodeType":"VariableDeclaration","scope":6234,"src":"7068:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6100,"name":"uint","nodeType":"ElementaryTypeName","src":"7068:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6103,"mutability":"mutable","name":"_drawNumber","nameLocation":"7091:11:27","nodeType":"VariableDeclaration","scope":6234,"src":"7086:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6102,"name":"uint","nodeType":"ElementaryTypeName","src":"7086:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6105,"mutability":"mutable","name":"_rwaId","nameLocation":"7109:6:27","nodeType":"VariableDeclaration","scope":6234,"src":"7104:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6104,"name":"uint","nodeType":"ElementaryTypeName","src":"7104:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7049:67:27"},"returnParameters":{"id":6107,"nodeType":"ParameterList","parameters":[],"src":"7124:0:27"},"scope":6615,"src":"7027:1601:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6310,"nodeType":"Block","src":"8697:628:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6240,"name":"permissionsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"8716:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions storage ref)"}},"id":6242,"indexExpression":{"id":6241,"name":"_permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6236,"src":"8732:15:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8716:32:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"id":6243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8749:12:27","memberName":"isPermission","nodeType":"MemberAccess","referencedDeclaration":5762,"src":"8716:45:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":6244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8765:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8716:53:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973207065726d697373696f6e206469646e742065786973747321","id":6246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8771:31:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_b91612805f89b5036739bf8de374404d49a20b13a791788489d50fa1de16b902","typeString":"literal_string \"This permission didnt exists!\""},"value":"This permission didnt exists!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b91612805f89b5036739bf8de374404d49a20b13a791788489d50fa1de16b902","typeString":"literal_string \"This permission didnt exists!\""}],"id":6239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8708:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8708:95:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6248,"nodeType":"ExpressionStatement","src":"8708:95:27"},{"assignments":[6251],"declarations":[{"constant":false,"id":6251,"mutability":"mutable","name":"permission","nameLocation":"8836:10:27","nodeType":"VariableDeclaration","scope":6310,"src":"8816:30:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"},"typeName":{"id":6250,"nodeType":"UserDefinedTypeName","pathNode":{"id":6249,"name":"Permissions","nameLocations":["8816:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":5763,"src":"8816:11:27"},"referencedDeclaration":5763,"src":"8816:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"}},"visibility":"internal"}],"id":6255,"initialValue":{"baseExpression":{"id":6252,"name":"permissionsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"8849:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions storage ref)"}},"id":6254,"indexExpression":{"id":6253,"name":"_permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6236,"src":"8865:15:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8849:32:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8816:65:27"},{"body":{"id":6284,"nodeType":"Block","src":"8964:144:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6269,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"8982:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6271,"indexExpression":{"id":6270,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6257,"src":"8994:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8982:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref"}},"id":6272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8997:14:27","memberName":"hashPermission","nodeType":"MemberAccess","referencedDeclaration":5767,"src":"8982:29:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6273,"name":"_permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6236,"src":"9015:15:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8982:48:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6283,"nodeType":"IfStatement","src":"8979:118:27","trueBody":{"id":6282,"nodeType":"Block","src":"9031:66:27","statements":[{"expression":{"id":6280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6275,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"9050:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6277,"indexExpression":{"id":6276,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6257,"src":"9062:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9050:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref"}},"id":6278,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9065:8:27","memberName":"isActive","nodeType":"MemberAccess","referencedDeclaration":5769,"src":"9050:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9076:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"9050:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6281,"nodeType":"ExpressionStatement","src":"9050:31:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":6265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6260,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"8910:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6262,"indexExpression":{"id":6261,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6257,"src":"8922:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8910:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref"}},"id":6263,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8925:14:27","memberName":"hashPermission","nodeType":"MemberAccess","referencedDeclaration":5767,"src":"8910:29:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6264,"name":"_permissionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6236,"src":"8943:15:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8910:48:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6285,"initializationExpression":{"assignments":[6257],"declarations":[{"constant":false,"id":6257,"mutability":"mutable","name":"i","nameLocation":"8903:1:27","nodeType":"VariableDeclaration","scope":6285,"src":"8898:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6256,"name":"uint","nodeType":"ElementaryTypeName","src":"8898:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6259,"initialValue":{"hexValue":"30","id":6258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8907:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8898:10:27"},"loopExpression":{"expression":{"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8960:3:27","subExpression":{"id":6266,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6257,"src":"8960:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6268,"nodeType":"ExpressionStatement","src":"8960:3:27"},"nodeType":"ForStatement","src":"8894:214:27"},{"expression":{"arguments":[{"arguments":[{"id":6291,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9149:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}],"id":6290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9141:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6289,"name":"address","nodeType":"ElementaryTypeName","src":"9141:7:27","typeDescriptions":{}}},"id":6292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9141:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6293,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"9156:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9167:8:27","memberName":"rwaOwner","nodeType":"MemberAccess","referencedDeclaration":5743,"src":"9156:19:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6295,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"9177:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9188:11:27","memberName":"colateralId","nodeType":"MemberAccess","referencedDeclaration":5749,"src":"9177:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6286,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5814,"src":"9120:3:27","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721_$3817","typeString":"contract ERC721"}},"id":6288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9124:16:27","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":3143,"src":"9120:20:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":6297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9120:80:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6298,"nodeType":"ExpressionStatement","src":"9120:80:27"},{"eventCall":{"arguments":[{"expression":{"id":6300,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"9230:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9241:7:27","memberName":"idTitle","nodeType":"MemberAccess","referencedDeclaration":5737,"src":"9230:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6302,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"9250:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9261:10:27","memberName":"drawNumber","nodeType":"MemberAccess","referencedDeclaration":5739,"src":"9250:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":6304,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"9273:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9284:8:27","memberName":"rwaOwner","nodeType":"MemberAccess","referencedDeclaration":5743,"src":"9273:19:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6306,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6251,"src":"9294:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6307,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9305:11:27","memberName":"colateralId","nodeType":"MemberAccess","referencedDeclaration":5749,"src":"9294:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6299,"name":"RWARefunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"9218:11:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,address,uint256)"}},"id":6308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9218:99:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6309,"nodeType":"EmitStatement","src":"9213:104:27"}]},"id":6311,"implemented":true,"kind":"function","modifiers":[],"name":"sendRwaBackToOwner","nameLocation":"8645:18:27","nodeType":"FunctionDefinition","parameters":{"id":6237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6236,"mutability":"mutable","name":"_permissionHash","nameLocation":"8672:15:27","nodeType":"VariableDeclaration","scope":6311,"src":"8664:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8664:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8663:25:27"},"returnParameters":{"id":6238,"nodeType":"ParameterList","parameters":[],"src":"8697:0:27"},"scope":6615,"src":"8636:689:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6440,"nodeType":"Block","src":"9381:1280:27","statements":[{"body":{"id":6438,"nodeType":"Block","src":"9467:1187:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6325,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"9487:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6327,"indexExpression":{"id":6326,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"9499:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9487:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref"}},"id":6328,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9502:8:27","memberName":"isActive","nodeType":"MemberAccess","referencedDeclaration":5769,"src":"9487:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":6329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9514:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"9487:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6437,"nodeType":"IfStatement","src":"9484:1159:27","trueBody":{"id":6436,"nodeType":"Block","src":"9519:1124:27","statements":[{"assignments":[6333],"declarations":[{"constant":false,"id":6333,"mutability":"mutable","name":"permission","nameLocation":"9558:10:27","nodeType":"VariableDeclaration","scope":6436,"src":"9538:30:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"},"typeName":{"id":6332,"nodeType":"UserDefinedTypeName","pathNode":{"id":6331,"name":"Permissions","nameLocations":["9538:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":5763,"src":"9538:11:27"},"referencedDeclaration":5763,"src":"9538:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions"}},"visibility":"internal"}],"id":6340,"initialValue":{"baseExpression":{"id":6334,"name":"permissionsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5779,"src":"9571:15:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Permissions_$5763_storage_$","typeString":"mapping(bytes32 => struct HorizonFujiR.Permissions storage ref)"}},"id":6339,"indexExpression":{"expression":{"baseExpression":{"id":6335,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"9587:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6337,"indexExpression":{"id":6336,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"9599:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9587:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref"}},"id":6338,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9602:14:27","memberName":"hashPermission","nodeType":"MemberAccess","referencedDeclaration":5767,"src":"9587:29:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9571:46:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage","typeString":"struct HorizonFujiR.Permissions storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9538:79:27"},{"assignments":[6342],"declarations":[{"constant":false,"id":6342,"mutability":"mutable","name":"requestId","nameLocation":"9662:9:27","nodeType":"VariableDeclaration","scope":6436,"src":"9654:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9654:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":6348,"initialValue":{"arguments":[{"expression":{"id":6345,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"9696:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9707:4:27","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":5752,"src":"9696:15:27","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}],"expression":{"id":6343,"name":"functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"9674:9:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFunctions_$7450","typeString":"contract HorizonFunctions"}},"id":6344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9684:11:27","memberName":"sendRequest","nodeType":"MemberAccess","referencedDeclaration":7339,"src":"9674:21:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (string memory[] memory) external returns (bytes32)"}},"id":6347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9654:58:27"},{"assignments":[6350,6352],"declarations":[{"constant":false,"id":6350,"mutability":"mutable","name":"vehicleValue","nameLocation":"9739:12:27","nodeType":"VariableDeclaration","scope":6436,"src":"9734:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6349,"name":"uint","nodeType":"ElementaryTypeName","src":"9734:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6352,"mutability":"mutable","name":"responseTime","nameLocation":"9758:12:27","nodeType":"VariableDeclaration","scope":6436,"src":"9753:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6351,"name":"uint","nodeType":"ElementaryTypeName","src":"9753:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6357,"initialValue":{"arguments":[{"id":6355,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6342,"src":"9804:9:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":6353,"name":"functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"9774:9:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFunctions_$7450","typeString":"contract HorizonFunctions"}},"id":6354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9784:19:27","memberName":"returnFunctionsInfo","nodeType":"MemberAccess","referencedDeclaration":7449,"src":"9774:29:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_uint256_$_t_uint256_$","typeString":"function (bytes32) view external returns (uint256,uint256)"}},"id":6356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9774:40:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"9733:81:27"},{"expression":{"id":6362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6358,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"9835:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6360,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9846:14:27","memberName":"ensureValueNow","nodeType":"MemberAccess","referencedDeclaration":5747,"src":"9835:25:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6361,"name":"vehicleValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"9863:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9835:40:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6363,"nodeType":"ExpressionStatement","src":"9835:40:27"},{"expression":{"id":6368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6364,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"9894:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9905:16:27","memberName":"lastResponseTime","nodeType":"MemberAccess","referencedDeclaration":5758,"src":"9894:27:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6367,"name":"responseTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6352,"src":"9924:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9894:42:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6369,"nodeType":"ExpressionStatement","src":"9894:42:27"},{"assignments":[6371],"declarations":[{"constant":false,"id":6371,"mutability":"mutable","name":"id","nameLocation":"9962:2:27","nodeType":"VariableDeclaration","scope":6436,"src":"9957:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6370,"name":"uint","nodeType":"ElementaryTypeName","src":"9957:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6376,"initialValue":{"expression":{"baseExpression":{"id":6372,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"9967:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6374,"indexExpression":{"id":6373,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"9979:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9967:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref"}},"id":6375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9982:5:27","memberName":"rwaId","nodeType":"MemberAccess","referencedDeclaration":5765,"src":"9967:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9957:30:27"},{"assignments":[6378],"declarations":[{"constant":false,"id":6378,"mutability":"mutable","name":"rwaValue","nameLocation":"10011:8:27","nodeType":"VariableDeclaration","scope":6436,"src":"10006:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6377,"name":"uint","nodeType":"ElementaryTypeName","src":"10006:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6380,"initialValue":{"id":6379,"name":"vehicleValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6350,"src":"10022:12:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10006:28:27"},{"assignments":[6382],"declarations":[{"constant":false,"id":6382,"mutability":"mutable","name":"referenceValue","nameLocation":"10058:14:27","nodeType":"VariableDeclaration","scope":6436,"src":"10053:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6381,"name":"uint","nodeType":"ElementaryTypeName","src":"10053:4:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6385,"initialValue":{"expression":{"id":6383,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"10075:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10086:20:27","memberName":"ensuranceValueNeeded","nodeType":"MemberAccess","referencedDeclaration":5745,"src":"10075:31:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10053:53:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6386,"name":"rwaValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"10131:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6387,"name":"referenceValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6382,"src":"10144:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"35","id":6388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10161:1:27","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"10144:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6390,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10143:20:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10131:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6400,"name":"rwaValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"10278:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6401,"name":"referenceValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6382,"src":"10290:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"34","id":6402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10307:1:27","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10290:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10278:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6413,"name":"rwaValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"10428:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6414,"name":"referenceValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6382,"src":"10439:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":6415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10456:1:27","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10439:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10428:29:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6433,"nodeType":"IfStatement","src":"10424:204:27","trueBody":{"id":6432,"nodeType":"Block","src":"10459:169:27","statements":[{"expression":{"id":6423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":6418,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"10482:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6420,"indexExpression":{"id":6419,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"10494:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10482:14:27","typeDescriptions":{"typeIdentifier":"t_struct$_RwaMonitor_$5770_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref"}},"id":6421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10497:8:27","memberName":"isActive","nodeType":"MemberAccess","referencedDeclaration":5769,"src":"10482:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10508:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"10482:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6424,"nodeType":"ExpressionStatement","src":"10482:31:27"},{"eventCall":{"arguments":[{"expression":{"id":6426,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"10572:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10583:10:27","memberName":"contractId","nodeType":"MemberAccess","referencedDeclaration":5741,"src":"10572:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6428,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6371,"src":"10595:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6429,"name":"rwaValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"10599:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6425,"name":"TitleCancelledTheRWAWillBeSold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5718,"src":"10541:30:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":6430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10541:67:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6431,"nodeType":"EmitStatement","src":"10536:72:27"}]}},"id":6434,"nodeType":"IfStatement","src":"10274:354:27","trueBody":{"id":6412,"nodeType":"Block","src":"10310:108:27","statements":[{"eventCall":{"arguments":[{"expression":{"id":6406,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"10352:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6407,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10363:10:27","memberName":"contractId","nodeType":"MemberAccess","referencedDeclaration":5741,"src":"10352:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6408,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6371,"src":"10375:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6409,"name":"rwaValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"10379:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6405,"name":"PriceLowEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"10338:13:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":6410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10338:50:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6411,"nodeType":"EmitStatement","src":"10333:55:27"}]}},"id":6435,"nodeType":"IfStatement","src":"10127:501:27","trueBody":{"id":6399,"nodeType":"Block","src":"10165:103:27","statements":[{"eventCall":{"arguments":[{"expression":{"id":6393,"name":"permission","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"10210:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_Permissions_$5763_storage_ptr","typeString":"struct HorizonFujiR.Permissions storage pointer"}},"id":6394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10221:10:27","memberName":"contractId","nodeType":"MemberAccess","referencedDeclaration":5741,"src":"10210:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6395,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6371,"src":"10233:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6396,"name":"rwaValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"10237:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6392,"name":"RWAPriceAtMoment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"10193:16:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":6397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10193:53:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6398,"nodeType":"EmitStatement","src":"10188:58:27"}]}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6318,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"9438:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6319,"name":"rwaMonitors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"9442:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RwaMonitor_$5770_storage_$dyn_storage","typeString":"struct HorizonFujiR.RwaMonitor storage ref[] storage ref"}},"id":6320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9454:6:27","memberName":"length","nodeType":"MemberAccess","src":"9442:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9438:22:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6439,"initializationExpression":{"assignments":[6315],"declarations":[{"constant":false,"id":6315,"mutability":"mutable","name":"i","nameLocation":"9431:1:27","nodeType":"VariableDeclaration","scope":6439,"src":"9423:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6314,"name":"uint256","nodeType":"ElementaryTypeName","src":"9423:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6317,"initialValue":{"hexValue":"30","id":6316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9423:13:27"},"loopExpression":{"expression":{"id":6323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9462:3:27","subExpression":{"id":6322,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6315,"src":"9462:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6324,"nodeType":"ExpressionStatement","src":"9462:3:27"},"nodeType":"ForStatement","src":"9418:1236:27"}]},"id":6441,"implemented":true,"kind":"function","modifiers":[],"name":"checkColateralPrice","nameLocation":"9350:19:27","nodeType":"FunctionDefinition","parameters":{"id":6312,"nodeType":"ParameterList","parameters":[],"src":"9369:2:27"},"returnParameters":{"id":6313,"nodeType":"ParameterList","parameters":[],"src":"9381:0:27"},"scope":6615,"src":"9341:1320:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6453,"nodeType":"Block","src":"10950:71:27","statements":[{"expression":{"id":6451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6447,"name":"whitelistedSourceChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"10961:23:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"}},"id":6449,"indexExpression":{"id":6448,"name":"_sourceChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6444,"src":"10985:20:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10961:45:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11009:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10961:52:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6452,"nodeType":"ExpressionStatement","src":"10961:52:27"}]},"documentation":{"id":6442,"nodeType":"StructuredDocumentation","src":"10669:198:27","text":"@dev Whitelists a chain for transactions.\n @notice This function can only be called by the owner.\n @param _sourceChainSelector The selector of the source chain to be whitelisted."},"functionSelector":"c5ec1c7a","id":6454,"implemented":true,"kind":"function","modifiers":[],"name":"addSourceChain","nameLocation":"10882:14:27","nodeType":"FunctionDefinition","parameters":{"id":6445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6444,"mutability":"mutable","name":"_sourceChainSelector","nameLocation":"10905:20:27","nodeType":"VariableDeclaration","scope":6454,"src":"10898:27:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6443,"name":"uint64","nodeType":"ElementaryTypeName","src":"10898:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"10896:30:27"},"returnParameters":{"id":6446,"nodeType":"ParameterList","parameters":[],"src":"10950:0:27"},"scope":6615,"src":"10873:148:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6466,"nodeType":"Block","src":"11313:72:27","statements":[{"expression":{"id":6464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6460,"name":"whitelistedSourceChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"11324:23:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"}},"id":6462,"indexExpression":{"id":6461,"name":"_sourceChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6457,"src":"11348:20:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11324:45:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11372:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"11324:53:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6465,"nodeType":"ExpressionStatement","src":"11324:53:27"}]},"documentation":{"id":6455,"nodeType":"StructuredDocumentation","src":"11027:196:27","text":"@dev Denylists a chain for transactions.\n @notice This function can only be called by the owner.\n @param _sourceChainSelector The selector of the source chain to be denylisted."},"functionSelector":"ff46ed53","id":6467,"implemented":true,"kind":"function","modifiers":[],"name":"removelistSourceChain","nameLocation":"11238:21:27","nodeType":"FunctionDefinition","parameters":{"id":6458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6457,"mutability":"mutable","name":"_sourceChainSelector","nameLocation":"11268:20:27","nodeType":"VariableDeclaration","scope":6467,"src":"11261:27:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6456,"name":"uint64","nodeType":"ElementaryTypeName","src":"11261:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"11259:30:27"},"returnParameters":{"id":6459,"nodeType":"ParameterList","parameters":[],"src":"11313:0:27"},"scope":6615,"src":"11229:156:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6479,"nodeType":"Block","src":"11600:53:27","statements":[{"expression":{"id":6477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6473,"name":"whitelistedSenders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5787,"src":"11611:18:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6475,"indexExpression":{"id":6474,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"11630:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11611:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11641:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"11611:34:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6478,"nodeType":"ExpressionStatement","src":"11611:34:27"}]},"documentation":{"id":6468,"nodeType":"StructuredDocumentation","src":"11391:144:27","text":"@dev Whitelists a sender.\n @notice This function can only be called by the owner.\n @param _sender The address of the sender."},"functionSelector":"b697f531","id":6480,"implemented":true,"kind":"function","modifiers":[],"name":"addSender","nameLocation":"11550:9:27","nodeType":"FunctionDefinition","parameters":{"id":6471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6470,"mutability":"mutable","name":"_sender","nameLocation":"11568:7:27","nodeType":"VariableDeclaration","scope":6480,"src":"11560:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6469,"name":"address","nodeType":"ElementaryTypeName","src":"11560:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11559:17:27"},"returnParameters":{"id":6472,"nodeType":"ParameterList","parameters":[],"src":"11600:0:27"},"scope":6615,"src":"11541:112:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6492,"nodeType":"Block","src":"11870:54:27","statements":[{"expression":{"id":6490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6486,"name":"whitelistedSenders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5787,"src":"11881:18:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6488,"indexExpression":{"id":6487,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6483,"src":"11900:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11881:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11911:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"11881:35:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6491,"nodeType":"ExpressionStatement","src":"11881:35:27"}]},"documentation":{"id":6481,"nodeType":"StructuredDocumentation","src":"11659:143:27","text":"@dev Denylists a sender.\n @notice This function can only be called by the owner.\n @param _sender The address of the sender."},"functionSelector":"b2f87643","id":6493,"implemented":true,"kind":"function","modifiers":[],"name":"removeSender","nameLocation":"11817:12:27","nodeType":"FunctionDefinition","parameters":{"id":6484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6483,"mutability":"mutable","name":"_sender","nameLocation":"11838:7:27","nodeType":"VariableDeclaration","scope":6493,"src":"11830:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6482,"name":"address","nodeType":"ElementaryTypeName","src":"11830:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11829:17:27"},"returnParameters":{"id":6485,"nodeType":"ParameterList","parameters":[],"src":"11870:0:27"},"scope":6615,"src":"11808:116:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6504,"nodeType":"Block","src":"12034:67:27","statements":[{"expression":{"components":[{"id":6500,"name":"lastReceivedMessageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5720,"src":"12053:21:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6501,"name":"lastReceivedText","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5722,"src":"12076:16:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"id":6502,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12052:41:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes_storage_$","typeString":"tuple(bytes32,bytes storage ref)"}},"functionReturnParameters":6499,"id":6503,"nodeType":"Return","src":"12045:48:27"}]},"functionSelector":"263596a5","id":6505,"implemented":true,"kind":"function","modifiers":[],"name":"getLastReceivedMessageDetails","nameLocation":"11941:29:27","nodeType":"FunctionDefinition","parameters":{"id":6494,"nodeType":"ParameterList","parameters":[],"src":"11970:2:27"},"returnParameters":{"id":6499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6496,"mutability":"mutable","name":"messageId","nameLocation":"12004:9:27","nodeType":"VariableDeclaration","scope":6505,"src":"11996:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11996:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6498,"mutability":"mutable","name":"text","nameLocation":"12028:4:27","nodeType":"VariableDeclaration","scope":6505,"src":"12015:17:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6497,"name":"bytes","nodeType":"ElementaryTypeName","src":"12015:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11995:38:27"},"scope":6615,"src":"11932:169:27","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6508,"nodeType":"Block","src":"12164:2:27","statements":[]},"id":6509,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6506,"nodeType":"ParameterList","parameters":[],"src":"12144:2:27"},"returnParameters":{"id":6507,"nodeType":"ParameterList","parameters":[],"src":"12164:0:27"},"scope":6615,"src":"12137:29:27","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":6548,"nodeType":"Block","src":"12235:547:27","statements":[{"assignments":[6515],"declarations":[{"constant":false,"id":6515,"mutability":"mutable","name":"amount","nameLocation":"12304:6:27","nodeType":"VariableDeclaration","scope":6548,"src":"12296:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6514,"name":"uint256","nodeType":"ElementaryTypeName","src":"12296:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6521,"initialValue":{"expression":{"arguments":[{"id":6518,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12321:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}],"id":6517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12313:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6516,"name":"address","nodeType":"ElementaryTypeName","src":"12313:7:27","typeDescriptions":{}}},"id":6519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12313:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12327:7:27","memberName":"balance","nodeType":"MemberAccess","src":"12313:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12296:38:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6522,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6515,"src":"12402:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12412:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12402:11:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6528,"nodeType":"IfStatement","src":"12398:43:27","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6525,"name":"NothingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5629,"src":"12422:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12422:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6527,"nodeType":"RevertStatement","src":"12415:26:27"}},{"assignments":[6530,null],"declarations":[{"constant":false,"id":6530,"mutability":"mutable","name":"sent","nameLocation":"12559:4:27","nodeType":"VariableDeclaration","scope":6548,"src":"12554:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6529,"name":"bool","nodeType":"ElementaryTypeName","src":"12554:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":6537,"initialValue":{"arguments":[{"hexValue":"","id":6535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12602:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":6531,"name":"_beneficiary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6511,"src":"12569:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12582:4:27","memberName":"call","nodeType":"MemberAccess","src":"12569:17:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6533,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6515,"src":"12594:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"12569:32:27","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":6536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12569:36:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"12553:52:27"},{"condition":{"id":6539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12707:5:27","subExpression":{"id":6538,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6530,"src":"12708:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6547,"nodeType":"IfStatement","src":"12703:71:27","trueBody":{"errorCall":{"arguments":[{"expression":{"id":6541,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12741:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12745:6:27","memberName":"sender","nodeType":"MemberAccess","src":"12741:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6543,"name":"_beneficiary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6511,"src":"12753:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6544,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6515,"src":"12767:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6540,"name":"FailedToWithdrawEth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5637,"src":"12721:19:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":6545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12721:53:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6546,"nodeType":"RevertStatement","src":"12714:60:27"}}]},"functionSelector":"51cff8d9","id":6549,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"12183:8:27","nodeType":"FunctionDefinition","parameters":{"id":6512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6511,"mutability":"mutable","name":"_beneficiary","nameLocation":"12200:12:27","nodeType":"VariableDeclaration","scope":6549,"src":"12192:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6510,"name":"address","nodeType":"ElementaryTypeName","src":"12192:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12191:22:27"},"returnParameters":{"id":6513,"nodeType":"ParameterList","parameters":[],"src":"12235:0:27"},"scope":6615,"src":"12174:608:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6583,"nodeType":"Block","src":"12873:290:27","statements":[{"assignments":[6557],"declarations":[{"constant":false,"id":6557,"mutability":"mutable","name":"amount","nameLocation":"12942:6:27","nodeType":"VariableDeclaration","scope":6583,"src":"12934:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6556,"name":"uint256","nodeType":"ElementaryTypeName","src":"12934:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6567,"initialValue":{"arguments":[{"arguments":[{"id":6564,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12984:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiR_$6615","typeString":"contract HorizonFujiR"}],"id":6563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12976:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6562,"name":"address","nodeType":"ElementaryTypeName","src":"12976:7:27","typeDescriptions":{}}},"id":6565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12976:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":6559,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6553,"src":"12958:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6558,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"12951:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$319_$","typeString":"type(contract IERC20)"}},"id":6560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12951:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$319","typeString":"contract IERC20"}},"id":6561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12966:9:27","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":276,"src":"12951:24:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12951:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12934:56:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6568,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6557,"src":"13058:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13068:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13058:11:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6574,"nodeType":"IfStatement","src":"13054:43:27","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6571,"name":"NothingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5629,"src":"13078:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13078:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6573,"nodeType":"RevertStatement","src":"13071:26:27"}},{"expression":{"arguments":[{"id":6579,"name":"_beneficiary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6551,"src":"13134:12:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6580,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6557,"src":"13148:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6576,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6553,"src":"13117:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6575,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"13110:6:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$319_$","typeString":"type(contract IERC20)"}},"id":6577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13110:14:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$319","typeString":"contract IERC20"}},"id":6578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13125:8:27","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":286,"src":"13110:23:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13110:45:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6582,"nodeType":"ExpressionStatement","src":"13110:45:27"}]},"functionSelector":"3aeac4e1","id":6584,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawToken","nameLocation":"12799:13:27","nodeType":"FunctionDefinition","parameters":{"id":6554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6551,"mutability":"mutable","name":"_beneficiary","nameLocation":"12822:12:27","nodeType":"VariableDeclaration","scope":6584,"src":"12814:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6550,"name":"address","nodeType":"ElementaryTypeName","src":"12814:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6553,"mutability":"mutable","name":"_token","nameLocation":"12844:6:27","nodeType":"VariableDeclaration","scope":6584,"src":"12836:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6552,"name":"address","nodeType":"ElementaryTypeName","src":"12836:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12812:39:27"},"returnParameters":{"id":6555,"nodeType":"ParameterList","parameters":[],"src":"12873:0:27"},"scope":6615,"src":"12790:373:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6598,"nodeType":"Block","src":"13259:150:27","statements":[{"condition":{"id":6591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13274:46:27","subExpression":{"baseExpression":{"id":6588,"name":"whitelistedSourceChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5783,"src":"13275:23:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"}},"id":6590,"indexExpression":{"id":6589,"name":"_sourceChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6586,"src":"13299:20:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13275:45:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6596,"nodeType":"IfStatement","src":"13270:119:27","trueBody":{"errorCall":{"arguments":[{"id":6593,"name":"_sourceChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6586,"src":"13368:20:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":6592,"name":"SourceChainNotWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"13342:25:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":6594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13342:47:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6595,"nodeType":"RevertStatement","src":"13335:54:27"}},{"id":6597,"nodeType":"PlaceholderStatement","src":"13400:1:27"}]},"id":6599,"name":"onlyWhitelistedSourceChain","nameLocation":"13203:26:27","nodeType":"ModifierDefinition","parameters":{"id":6587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6586,"mutability":"mutable","name":"_sourceChainSelector","nameLocation":"13237:20:27","nodeType":"VariableDeclaration","scope":6599,"src":"13230:27:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6585,"name":"uint64","nodeType":"ElementaryTypeName","src":"13230:6:27","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13229:29:27"},"src":"13194:215:27","virtual":false,"visibility":"internal"},{"body":{"id":6613,"nodeType":"Block","src":"13466:101:27","statements":[{"condition":{"id":6606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13481:28:27","subExpression":{"baseExpression":{"id":6603,"name":"whitelistedSenders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5787,"src":"13482:18:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6605,"indexExpression":{"id":6604,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6601,"src":"13501:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13482:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6611,"nodeType":"IfStatement","src":"13477:70:27","trueBody":{"errorCall":{"arguments":[{"id":6608,"name":"_sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6601,"src":"13539:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6607,"name":"SenderNotWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5649,"src":"13518:20:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":6609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13518:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6610,"nodeType":"RevertStatement","src":"13511:36:27"}},{"id":6612,"nodeType":"PlaceholderStatement","src":"13558:1:27"}]},"id":6614,"name":"onlyWhitelistedSenders","nameLocation":"13426:22:27","nodeType":"ModifierDefinition","parameters":{"id":6602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6601,"mutability":"mutable","name":"_sender","nameLocation":"13457:7:27","nodeType":"VariableDeclaration","scope":6614,"src":"13449:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6600,"name":"address","nodeType":"ElementaryTypeName","src":"13449:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13448:17:27"},"src":"13417:150:27","virtual":false,"visibility":"internal"}],"scope":6616,"src":"1119:12451:27","usedErrors":[100,5629,5637],"usedEvents":[5661,5667,5674,5684,5694,5702,5710,5718]}],"src":"33:13539:27"},"id":27},"contracts/HorizonFujiS.sol":{"ast":{"absolutePath":"contracts/HorizonFujiS.sol","exportedSymbols":{"CCIPReceiver":[119],"Client":[241],"HorizonFujiS":[7177],"IERC20":[319],"IRouterClient":[184],"LinkTokenInterface":[1390]},"id":7178,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6617,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"33:23:28"},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol","id":6619,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7178,"sourceUnit":185,"src":"60:99:28","symbolAliases":[{"foreign":{"id":6618,"name":"IRouterClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"68:13:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol","id":6621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7178,"sourceUnit":242,"src":"161:84:28","symbolAliases":[{"foreign":{"id":6620,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"169:6:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","file":"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol","id":6623,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7178,"sourceUnit":120,"src":"247:99:28","symbolAliases":[{"foreign":{"id":6622,"name":"CCIPReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"255:12:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol","file":"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol","id":6625,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7178,"sourceUnit":320,"src":"348:117:28","symbolAliases":[{"foreign":{"id":6624,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"356:6:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","file":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","id":6627,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7178,"sourceUnit":1391,"src":"467:106:28","symbolAliases":[{"foreign":{"id":6626,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"475:18:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6628,"name":"CCIPReceiver","nameLocations":["602:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":119,"src":"602:12:28"},"id":6629,"nodeType":"InheritanceSpecifier","src":"602:12:28"}],"canonicalName":"HorizonFujiS","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":7177,"linearizedBaseContracts":[7177,119,331,132],"name":"HorizonFujiS","nameLocation":"586:12:28","nodeType":"ContractDefinition","nodes":[{"errorSelector":"8f0f4206","id":6635,"name":"NotEnoughBalance","nameLocation":"701:16:28","nodeType":"ErrorDefinition","parameters":{"id":6634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6631,"mutability":"mutable","name":"currentBalance","nameLocation":"726:14:28","nodeType":"VariableDeclaration","scope":6635,"src":"718:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6630,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6633,"mutability":"mutable","name":"calculatedFees","nameLocation":"750:14:28","nodeType":"VariableDeclaration","scope":6635,"src":"742:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6632,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"717:48:28"},"src":"695:71:28"},{"errorSelector":"d0d04f60","id":6637,"name":"NothingToWithdraw","nameLocation":"778:17:28","nodeType":"ErrorDefinition","parameters":{"id":6636,"nodeType":"ParameterList","parameters":[],"src":"795:2:28"},"src":"772:26:28"},{"errorSelector":"9d11f563","id":6645,"name":"FailedToWithdrawEth","nameLocation":"810:19:28","nodeType":"ErrorDefinition","parameters":{"id":6644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6639,"mutability":"mutable","name":"owner","nameLocation":"838:5:28","nodeType":"VariableDeclaration","scope":6645,"src":"830:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6638,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6641,"mutability":"mutable","name":"target","nameLocation":"853:6:28","nodeType":"VariableDeclaration","scope":6645,"src":"845:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6640,"name":"address","nodeType":"ElementaryTypeName","src":"845:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6643,"mutability":"mutable","name":"value","nameLocation":"869:5:28","nodeType":"VariableDeclaration","scope":6645,"src":"861:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6642,"name":"uint256","nodeType":"ElementaryTypeName","src":"861:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"829:46:28"},"src":"804:72:28"},{"errorSelector":"4651d51a","id":6649,"name":"DestinationChainNotWhitelisted","nameLocation":"888:30:28","nodeType":"ErrorDefinition","parameters":{"id":6648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6647,"mutability":"mutable","name":"destinationChainSelector","nameLocation":"926:24:28","nodeType":"VariableDeclaration","scope":6649,"src":"919:31:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6646,"name":"uint64","nodeType":"ElementaryTypeName","src":"919:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"918:33:28"},"src":"882:70:28"},{"anonymous":false,"eventSelector":"3d8a9f055772202d2c3c1fddbad930d3dbe588d8692b75b84cee071946282911","id":6663,"name":"MessageSent","nameLocation":"1029:11:28","nodeType":"EventDefinition","parameters":{"id":6662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6651,"indexed":true,"mutability":"mutable","name":"messageId","nameLocation":"1057:9:28","nodeType":"VariableDeclaration","scope":6663,"src":"1041:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1041:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6653,"indexed":true,"mutability":"mutable","name":"destinationChainSelector","nameLocation":"1083:24:28","nodeType":"VariableDeclaration","scope":6663,"src":"1068:39:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6652,"name":"uint64","nodeType":"ElementaryTypeName","src":"1068:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6655,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"1117:8:28","nodeType":"VariableDeclaration","scope":6663,"src":"1109:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6654,"name":"address","nodeType":"ElementaryTypeName","src":"1109:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6657,"indexed":false,"mutability":"mutable","name":"_data","nameLocation":"1133:5:28","nodeType":"VariableDeclaration","scope":6663,"src":"1127:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6656,"name":"bytes","nodeType":"ElementaryTypeName","src":"1127:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6659,"indexed":false,"mutability":"mutable","name":"feeToken","nameLocation":"1148:8:28","nodeType":"VariableDeclaration","scope":6663,"src":"1140:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6658,"name":"address","nodeType":"ElementaryTypeName","src":"1140:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6661,"indexed":false,"mutability":"mutable","name":"fees","nameLocation":"1166:4:28","nodeType":"VariableDeclaration","scope":6663,"src":"1158:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6660,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1040:131:28"},"src":"1023:149:28"},{"anonymous":false,"eventSelector":"90ec910a8f80bb04e184a806e2ae6f8786ef2ae898859a3180f953397edc1201","id":6677,"name":"MessageReceived","nameLocation":"1184:15:28","nodeType":"EventDefinition","parameters":{"id":6676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6665,"indexed":true,"mutability":"mutable","name":"messageId","nameLocation":"1216:9:28","nodeType":"VariableDeclaration","scope":6677,"src":"1200:25:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1200:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6667,"indexed":true,"mutability":"mutable","name":"sourceChainSelector","nameLocation":"1242:19:28","nodeType":"VariableDeclaration","scope":6677,"src":"1227:34:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6666,"name":"uint64","nodeType":"ElementaryTypeName","src":"1227:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6669,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"1271:6:28","nodeType":"VariableDeclaration","scope":6677,"src":"1263:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6668,"name":"address","nodeType":"ElementaryTypeName","src":"1263:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6671,"indexed":false,"mutability":"mutable","name":"text","nameLocation":"1286:4:28","nodeType":"VariableDeclaration","scope":6677,"src":"1279:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6670,"name":"string","nodeType":"ElementaryTypeName","src":"1279:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6673,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"1300:5:28","nodeType":"VariableDeclaration","scope":6677,"src":"1292:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6672,"name":"address","nodeType":"ElementaryTypeName","src":"1292:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6675,"indexed":false,"mutability":"mutable","name":"tokenAmount","nameLocation":"1315:11:28","nodeType":"VariableDeclaration","scope":6677,"src":"1307:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6674,"name":"uint256","nodeType":"ElementaryTypeName","src":"1307:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1199:128:28"},"src":"1178:150:28"},{"anonymous":false,"eventSelector":"619facc3344a864638bdf6b94faebe32fea796eccc10ab263d90da8b44c42be4","id":6683,"name":"CCIPReceiverAdded","nameLocation":"1340:17:28","nodeType":"EventDefinition","parameters":{"id":6682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6679,"indexed":false,"mutability":"mutable","name":"_blockchainName","nameLocation":"1365:15:28","nodeType":"VariableDeclaration","scope":6683,"src":"1358:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6678,"name":"string","nodeType":"ElementaryTypeName","src":"1358:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6681,"indexed":false,"mutability":"mutable","name":"_receiverAddress","nameLocation":"1390:16:28","nodeType":"VariableDeclaration","scope":6683,"src":"1382:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6680,"name":"address","nodeType":"ElementaryTypeName","src":"1382:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1357:50:28"},"src":"1334:74:28"},{"anonymous":false,"eventSelector":"c98322fddcb9467a648bda840e8c0844a6a420e0a62af038077f0de932e72966","id":6687,"name":"CCIPReceiverRemoved","nameLocation":"1420:19:28","nodeType":"EventDefinition","parameters":{"id":6686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6685,"indexed":false,"mutability":"mutable","name":"_receiverAddress","nameLocation":"1448:16:28","nodeType":"VariableDeclaration","scope":6687,"src":"1440:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6684,"name":"address","nodeType":"ElementaryTypeName","src":"1440:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1439:26:28"},"src":"1414:52:28"},{"constant":false,"id":6689,"mutability":"mutable","name":"lastReceivedMessageId","nameLocation":"1490:21:28","nodeType":"VariableDeclaration","scope":7177,"src":"1474:37:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":6691,"mutability":"mutable","name":"lastReceivedText","nameLocation":"1533:16:28","nodeType":"VariableDeclaration","scope":7177,"src":"1518:31:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":6690,"name":"string","nodeType":"ElementaryTypeName","src":"1518:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":6693,"mutability":"mutable","name":"destinationChainSelector","nameLocation":"1569:24:28","nodeType":"VariableDeclaration","scope":7177,"src":"1556:37:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6692,"name":"uint","nodeType":"ElementaryTypeName","src":"1556:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":6695,"mutability":"mutable","name":"owner","nameLocation":"1610:5:28","nodeType":"VariableDeclaration","scope":7177,"src":"1602:13:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6694,"name":"address","nodeType":"ElementaryTypeName","src":"1602:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"canonicalName":"HorizonFujiS.ReceiverInfo","id":6702,"members":[{"constant":false,"id":6697,"mutability":"mutable","name":"blockchainName","nameLocation":"1681:14:28","nodeType":"VariableDeclaration","scope":6702,"src":"1674:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6696,"name":"string","nodeType":"ElementaryTypeName","src":"1674:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6699,"mutability":"mutable","name":"receiverAddress","nameLocation":"1714:15:28","nodeType":"VariableDeclaration","scope":6702,"src":"1706:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6698,"name":"address","nodeType":"ElementaryTypeName","src":"1706:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6701,"mutability":"mutable","name":"isReceiver","nameLocation":"1745:10:28","nodeType":"VariableDeclaration","scope":6702,"src":"1740:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6700,"name":"bool","nodeType":"ElementaryTypeName","src":"1740:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"ReceiverInfo","nameLocation":"1650:12:28","nodeType":"StructDefinition","scope":7177,"src":"1643:120:28","visibility":"public"},{"constant":false,"functionSelector":"835b347c","id":6706,"mutability":"mutable","name":"whitelistedDestinationChains","nameLocation":"1871:28:28","nodeType":"VariableDeclaration","scope":7177,"src":"1840:59:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"},"typeName":{"id":6705,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6703,"name":"uint64","nodeType":"ElementaryTypeName","src":"1848:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"1840:23:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6704,"name":"bool","nodeType":"ElementaryTypeName","src":"1858:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"1f27166d","id":6711,"mutability":"mutable","name":"ccipReceicers","nameLocation":"2006:13:28","nodeType":"VariableDeclaration","scope":7177,"src":"1950:69:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo)"},"typeName":{"id":6710,"keyName":"receiverAddress","keyNameLocation":"1966:15:28","keyType":{"id":6707,"name":"address","nodeType":"ElementaryTypeName","src":"1958:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1950:48:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6709,"nodeType":"UserDefinedTypeName","pathNode":{"id":6708,"name":"ReceiverInfo","nameLocations":["1985:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":6702,"src":"1985:12:28"},"referencedDeclaration":6702,"src":"1985:12:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage_ptr","typeString":"struct HorizonFujiS.ReceiverInfo"}}},"visibility":"public"},{"constant":false,"id":6714,"mutability":"mutable","name":"linkToken","nameLocation":"2047:9:28","nodeType":"VariableDeclaration","scope":7177,"src":"2028:28:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"},"typeName":{"id":6713,"nodeType":"UserDefinedTypeName","pathNode":{"id":6712,"name":"LinkTokenInterface","nameLocations":["2028:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":1390,"src":"2028:18:28"},"referencedDeclaration":1390,"src":"2028:18:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"visibility":"internal"},{"body":{"id":6735,"nodeType":"Block","src":"2259:92:28","statements":[{"expression":{"id":6728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6724,"name":"linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6714,"src":"2272:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6726,"name":"_linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6718,"src":"2303:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6725,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"2284:18:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$1390_$","typeString":"type(contract LinkTokenInterface)"}},"id":6727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2284:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"src":"2272:42:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"id":6729,"nodeType":"ExpressionStatement","src":"2272:42:28"},{"expression":{"id":6733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6730,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6695,"src":"2325:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":6731,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2333:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2337:6:28","memberName":"sender","nodeType":"MemberAccess","src":"2333:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2325:18:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6734,"nodeType":"ExpressionStatement","src":"2325:18:28"}]},"id":6736,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":6721,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6716,"src":"2251:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":6722,"kind":"baseConstructorSpecifier","modifierName":{"id":6720,"name":"CCIPReceiver","nameLocations":["2238:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":119,"src":"2238:12:28"},"nodeType":"ModifierInvocation","src":"2238:21:28"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6716,"mutability":"mutable","name":"_router","nameLocation":"2085:7:28","nodeType":"VariableDeclaration","scope":6736,"src":"2077:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6715,"name":"address","nodeType":"ElementaryTypeName","src":"2077:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6718,"mutability":"mutable","name":"_linkToken","nameLocation":"2164:10:28","nodeType":"VariableDeclaration","scope":6736,"src":"2156:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6717,"name":"address","nodeType":"ElementaryTypeName","src":"2156:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2076:161:28"},"returnParameters":{"id":6723,"nodeType":"ParameterList","parameters":[],"src":"2259:0:28"},"scope":7177,"src":"2065:286:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6750,"nodeType":"Block","src":"2661:81:28","statements":[{"expression":{"id":6748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6744,"name":"whitelistedDestinationChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6706,"src":"2672:28:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"}},"id":6746,"indexExpression":{"id":6745,"name":"_destinationChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6739,"src":"2701:25:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2672:55:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2730:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2672:62:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6749,"nodeType":"ExpressionStatement","src":"2672:62:28"}]},"documentation":{"id":6737,"nodeType":"StructuredDocumentation","src":"2359:208:28","text":"@dev Whitelists a chain for transactions.\n @notice This function can only be called by the owner.\n @param _destinationChainSelector The selector of the destination chain to be whitelisted."},"functionSelector":"7898d184","id":6751,"implemented":true,"kind":"function","modifiers":[{"id":6742,"kind":"modifierInvocation","modifierName":{"id":6741,"name":"onlyOwner","nameLocations":["2651:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":7176,"src":"2651:9:28"},"nodeType":"ModifierInvocation","src":"2651:9:28"}],"name":"whitelistDestinationChain","nameLocation":"2582:25:28","nodeType":"FunctionDefinition","parameters":{"id":6740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6739,"mutability":"mutable","name":"_destinationChainSelector","nameLocation":"2615:25:28","nodeType":"VariableDeclaration","scope":6751,"src":"2608:32:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6738,"name":"uint64","nodeType":"ElementaryTypeName","src":"2608:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2607:34:28"},"returnParameters":{"id":6743,"nodeType":"ParameterList","parameters":[],"src":"2661:0:28"},"scope":7177,"src":"2573:169:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6765,"nodeType":"Block","src":"3049:82:28","statements":[{"expression":{"id":6763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6759,"name":"whitelistedDestinationChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6706,"src":"3060:28:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"}},"id":6761,"indexExpression":{"id":6760,"name":"_destinationChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6754,"src":"3089:25:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3060:55:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3118:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3060:63:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6764,"nodeType":"ExpressionStatement","src":"3060:63:28"}]},"documentation":{"id":6752,"nodeType":"StructuredDocumentation","src":"2750:206:28","text":"@dev Denylists a chain for transactions.\n @notice This function can only be called by the owner.\n @param _destinationChainSelector The selector of the destination chain to be denylisted."},"functionSelector":"73645cff","id":6766,"implemented":true,"kind":"function","modifiers":[{"id":6757,"kind":"modifierInvocation","modifierName":{"id":6756,"name":"onlyOwner","nameLocations":["3039:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":7176,"src":"3039:9:28"},"nodeType":"ModifierInvocation","src":"3039:9:28"}],"name":"denylistDestinationChain","nameLocation":"2971:24:28","nodeType":"FunctionDefinition","parameters":{"id":6755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6754,"mutability":"mutable","name":"_destinationChainSelector","nameLocation":"3003:25:28","nodeType":"VariableDeclaration","scope":6766,"src":"2996:32:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6753,"name":"uint64","nodeType":"ElementaryTypeName","src":"2996:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2995:34:28"},"returnParameters":{"id":6758,"nodeType":"ParameterList","parameters":[],"src":"3049:0:28"},"scope":7177,"src":"2962:169:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6815,"nodeType":"Block","src":"3233:523:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6776,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6770,"src":"3252:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3280:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3272:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6777,"name":"address","nodeType":"ElementaryTypeName","src":"3272:7:28","typeDescriptions":{}}},"id":6780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3272:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3252:30:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456e74657220612076616c6964206164647265737321","id":6782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3284:24:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_3a4e6cc610269e44f247c87fbd5c83f7818a189fe38c9dad8faef7bd1599b7fd","typeString":"literal_string \"Enter a valid address!\""},"value":"Enter a valid address!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3a4e6cc610269e44f247c87fbd5c83f7818a189fe38c9dad8faef7bd1599b7fd","typeString":"literal_string \"Enter a valid address!\""}],"id":6775,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3244:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:65:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6784,"nodeType":"ExpressionStatement","src":"3244:65:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6786,"name":"ccipReceicers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6711,"src":"3328:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo storage ref)"}},"id":6788,"indexExpression":{"id":6787,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6770,"src":"3342:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3328:31:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"id":6789,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3360:10:28","memberName":"isReceiver","nodeType":"MemberAccess","referencedDeclaration":6701,"src":"3328:42:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":6790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3374:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3328:51:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526563656976657220697320616c7265616479207265676973746572656421","id":6792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3381:33:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_3198f3066233ecb389a938fd40adc75ed15f9de66bb03b115db890d1b3120ec4","typeString":"literal_string \"Receiver is already registered!\""},"value":"Receiver is already registered!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3198f3066233ecb389a938fd40adc75ed15f9de66bb03b115db890d1b3120ec4","typeString":"literal_string \"Receiver is already registered!\""}],"id":6785,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3320:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3320:95:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6794,"nodeType":"ExpressionStatement","src":"3320:95:28"},{"assignments":[6797],"declarations":[{"constant":false,"id":6797,"mutability":"mutable","name":"newReceiver","nameLocation":"3448:11:28","nodeType":"VariableDeclaration","scope":6815,"src":"3428:31:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_memory_ptr","typeString":"struct HorizonFujiS.ReceiverInfo"},"typeName":{"id":6796,"nodeType":"UserDefinedTypeName","pathNode":{"id":6795,"name":"ReceiverInfo","nameLocations":["3428:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":6702,"src":"3428:12:28"},"referencedDeclaration":6702,"src":"3428:12:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage_ptr","typeString":"struct HorizonFujiS.ReceiverInfo"}},"visibility":"internal"}],"id":6803,"initialValue":{"arguments":[{"id":6799,"name":"_blockchainName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6768,"src":"3506:15:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":6800,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6770,"src":"3553:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":6801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3596:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6798,"name":"ReceiverInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6702,"src":"3462:12:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ReceiverInfo_$6702_storage_ptr_$","typeString":"type(struct HorizonFujiS.ReceiverInfo storage pointer)"}},"id":6802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3490:14:28","3536:15:28","3584:10:28"],"names":["blockchainName","receiverAddress","isReceiver"],"nodeType":"FunctionCall","src":"3462:150:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_memory_ptr","typeString":"struct HorizonFujiS.ReceiverInfo memory"}},"nodeType":"VariableDeclarationStatement","src":"3428:184:28"},{"expression":{"id":6808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6804,"name":"ccipReceicers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6711,"src":"3633:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo storage ref)"}},"id":6806,"indexExpression":{"id":6805,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6770,"src":"3647:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3633:31:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6807,"name":"newReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6797,"src":"3667:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_memory_ptr","typeString":"struct HorizonFujiS.ReceiverInfo memory"}},"src":"3633:45:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"id":6809,"nodeType":"ExpressionStatement","src":"3633:45:28"},{"eventCall":{"arguments":[{"id":6811,"name":"_blockchainName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6768,"src":"3714:15:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":6812,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6770,"src":"3731:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6810,"name":"CCIPReceiverAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6683,"src":"3696:17:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$returns$__$","typeString":"function (string memory,address)"}},"id":6813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3696:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6814,"nodeType":"EmitStatement","src":"3691:57:28"}]},"functionSelector":"1d5e2947","id":6816,"implemented":true,"kind":"function","modifiers":[{"id":6773,"kind":"modifierInvocation","modifierName":{"id":6772,"name":"onlyOwner","nameLocations":["3224:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":7176,"src":"3224:9:28"},"nodeType":"ModifierInvocation","src":"3224:9:28"}],"name":"addReceiver","nameLocation":"3148:11:28","nodeType":"FunctionDefinition","parameters":{"id":6771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6768,"mutability":"mutable","name":"_blockchainName","nameLocation":"3174:15:28","nodeType":"VariableDeclaration","scope":6816,"src":"3160:29:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6767,"name":"string","nodeType":"ElementaryTypeName","src":"3160:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6770,"mutability":"mutable","name":"_receiverAddress","nameLocation":"3199:16:28","nodeType":"VariableDeclaration","scope":6816,"src":"3191:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6769,"name":"address","nodeType":"ElementaryTypeName","src":"3191:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3159:57:28"},"returnParameters":{"id":6774,"nodeType":"ParameterList","parameters":[],"src":"3233:0:28"},"scope":7177,"src":"3139:617:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6842,"nodeType":"Block","src":"3831:219:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6824,"name":"ccipReceicers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6711,"src":"3850:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo storage ref)"}},"id":6826,"indexExpression":{"id":6825,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6818,"src":"3864:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3850:31:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"id":6827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3882:10:28","memberName":"isReceiver","nodeType":"MemberAccess","referencedDeclaration":6701,"src":"3850:42:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":6828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3896:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3850:50:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526563656976657220697320616c7265616479207265676973746572656421","id":6830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3902:33:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_3198f3066233ecb389a938fd40adc75ed15f9de66bb03b115db890d1b3120ec4","typeString":"literal_string \"Receiver is already registered!\""},"value":"Receiver is already registered!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3198f3066233ecb389a938fd40adc75ed15f9de66bb03b115db890d1b3120ec4","typeString":"literal_string \"Receiver is already registered!\""}],"id":6823,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3842:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3842:94:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6832,"nodeType":"ExpressionStatement","src":"3842:94:28"},{"expression":{"id":6836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3949:38:28","subExpression":{"baseExpression":{"id":6833,"name":"ccipReceicers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6711,"src":"3956:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo storage ref)"}},"id":6835,"indexExpression":{"id":6834,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6818,"src":"3970:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3956:31:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6837,"nodeType":"ExpressionStatement","src":"3949:38:28"},{"eventCall":{"arguments":[{"id":6839,"name":"_receiverAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6818,"src":"4025:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6838,"name":"CCIPReceiverRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6687,"src":"4005:19:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4005:37:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6841,"nodeType":"EmitStatement","src":"4000:42:28"}]},"functionSelector":"6552d8b4","id":6843,"implemented":true,"kind":"function","modifiers":[{"id":6821,"kind":"modifierInvocation","modifierName":{"id":6820,"name":"onlyOwner","nameLocations":["3821:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":7176,"src":"3821:9:28"},"nodeType":"ModifierInvocation","src":"3821:9:28"}],"name":"removeReceiver","nameLocation":"3773:14:28","nodeType":"FunctionDefinition","parameters":{"id":6819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6818,"mutability":"mutable","name":"_receiverAddress","nameLocation":"3796:16:28","nodeType":"VariableDeclaration","scope":6843,"src":"3788:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6817,"name":"address","nodeType":"ElementaryTypeName","src":"3788:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3787:26:28"},"returnParameters":{"id":6822,"nodeType":"ParameterList","parameters":[],"src":"3831:0:28"},"scope":7177,"src":"3764:286:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6964,"nodeType":"Block","src":"4268:990:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6855,"name":"ccipReceicers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6711,"src":"4287:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo storage ref)"}},"id":6857,"indexExpression":{"id":6856,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6847,"src":"4301:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4287:24:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"id":6858,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4312:15:28","memberName":"receiverAddress","nodeType":"MemberAccess","referencedDeclaration":6699,"src":"4287:40:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4339:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4331:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6859,"name":"address","nodeType":"ElementaryTypeName","src":"4331:7:28","typeDescriptions":{}}},"id":6862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4331:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4287:54:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"456e74657220612076616c6964207265636569766572206164647265737321","id":6864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4343:33:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_e8d9131826db29986b87dbfce77173e048bd1d924e033380286897bd5a50d8b1","typeString":"literal_string \"Enter a valid receiver address!\""},"value":"Enter a valid receiver address!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e8d9131826db29986b87dbfce77173e048bd1d924e033380286897bd5a50d8b1","typeString":"literal_string \"Enter a valid receiver address!\""}],"id":6854,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4279:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4279:98:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6866,"nodeType":"ExpressionStatement","src":"4279:98:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6868,"name":"ccipReceicers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6711,"src":"4396:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo storage ref)"}},"id":6870,"indexExpression":{"id":6869,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6847,"src":"4410:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4396:24:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"id":6871,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4421:10:28","memberName":"isReceiver","nodeType":"MemberAccess","referencedDeclaration":6701,"src":"4396:35:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":6872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4435:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4396:43:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973207265636569766572206973206e6f742077686974656c69737465642079657421","id":6874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4441:39:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_f3939d389695ed8a44af39b829abdb3163eff2b493229e8c7b6307049a27cc2d","typeString":"literal_string \"This receiver is not whitelisted yet!\""},"value":"This receiver is not whitelisted yet!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f3939d389695ed8a44af39b829abdb3163eff2b493229e8c7b6307049a27cc2d","typeString":"literal_string \"This receiver is not whitelisted yet!\""}],"id":6867,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4388:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4388:93:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6876,"nodeType":"ExpressionStatement","src":"4388:93:28"},{"assignments":[6881],"declarations":[{"constant":false,"id":6881,"mutability":"mutable","name":"evm2AnyMessage","nameLocation":"4531:14:28","nodeType":"VariableDeclaration","scope":6964,"src":"4502:43:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage"},"typeName":{"id":6880,"nodeType":"UserDefinedTypeName","pathNode":{"id":6879,"name":"Client.EVM2AnyMessage","nameLocations":["4502:6:28","4509:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":217,"src":"4502:21:28"},"referencedDeclaration":217,"src":"4502:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_storage_ptr","typeString":"struct Client.EVM2AnyMessage"}},"visibility":"internal"}],"id":6893,"initialValue":{"arguments":[{"expression":{"baseExpression":{"id":6883,"name":"ccipReceicers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6711,"src":"4580:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_ReceiverInfo_$6702_storage_$","typeString":"mapping(address => struct HorizonFujiS.ReceiverInfo storage ref)"}},"id":6885,"indexExpression":{"id":6884,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6847,"src":"4594:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4580:24:28","typeDescriptions":{"typeIdentifier":"t_struct$_ReceiverInfo_$6702_storage","typeString":"struct HorizonFujiS.ReceiverInfo storage ref"}},"id":6886,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4605:15:28","memberName":"receiverAddress","nodeType":"MemberAccess","referencedDeclaration":6699,"src":"4580:40:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6887,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6849,"src":"4635:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"id":6890,"name":"linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6714,"src":"4663:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}],"id":6889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4655:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6888,"name":"address","nodeType":"ElementaryTypeName","src":"4655:7:28","typeDescriptions":{}}},"id":6891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4655:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6882,"name":"_buildCCIPMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7012,"src":"4548:17:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$_t_address_$returns$_t_struct$_EVM2AnyMessage_$217_memory_ptr_$","typeString":"function (address,bytes memory,address) pure returns (struct Client.EVM2AnyMessage memory)"}},"id":6892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4548:136:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage memory"}},"nodeType":"VariableDeclarationStatement","src":"4502:182:28"},{"assignments":[6896],"declarations":[{"constant":false,"id":6896,"mutability":"mutable","name":"router","nameLocation":"4711:6:28","nodeType":"VariableDeclaration","scope":6964,"src":"4697:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRouterClient_$184","typeString":"contract IRouterClient"},"typeName":{"id":6895,"nodeType":"UserDefinedTypeName","pathNode":{"id":6894,"name":"IRouterClient","nameLocations":["4697:13:28"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"4697:13:28"},"referencedDeclaration":184,"src":"4697:13:28","typeDescriptions":{"typeIdentifier":"t_contract$_IRouterClient_$184","typeString":"contract IRouterClient"}},"visibility":"internal"}],"id":6902,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6898,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4734:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}},"id":6899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4739:9:28","memberName":"getRouter","nodeType":"MemberAccess","referencedDeclaration":96,"src":"4734:14:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4734:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6897,"name":"IRouterClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"4720:13:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRouterClient_$184_$","typeString":"type(contract IRouterClient)"}},"id":6901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRouterClient_$184","typeString":"contract IRouterClient"}},"nodeType":"VariableDeclarationStatement","src":"4697:54:28"},{"assignments":[6904],"declarations":[{"constant":false,"id":6904,"mutability":"mutable","name":"fees","nameLocation":"4772:4:28","nodeType":"VariableDeclaration","scope":6964,"src":"4764:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6903,"name":"uint256","nodeType":"ElementaryTypeName","src":"4764:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6910,"initialValue":{"arguments":[{"id":6907,"name":"_destinationChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6845,"src":"4793:25:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":6908,"name":"evm2AnyMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6881,"src":"4820:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage memory"}],"expression":{"id":6905,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6896,"src":"4779:6:28","typeDescriptions":{"typeIdentifier":"t_contract$_IRouterClient_$184","typeString":"contract IRouterClient"}},"id":6906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4786:6:28","memberName":"getFee","nodeType":"MemberAccess","referencedDeclaration":172,"src":"4779:13:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint64_$_t_struct$_EVM2AnyMessage_$217_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint64,struct Client.EVM2AnyMessage memory) view external returns (uint256)"}},"id":6909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4779:56:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4764:71:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6911,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6904,"src":"4852:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"arguments":[{"id":6916,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4887:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}],"id":6915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4879:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6914,"name":"address","nodeType":"ElementaryTypeName","src":"4879:7:28","typeDescriptions":{}}},"id":6917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4879:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6912,"name":"linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6714,"src":"4859:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"id":6913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4869:9:28","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1322,"src":"4859:19:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4859:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4852:41:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6931,"nodeType":"IfStatement","src":"4848:125:28","trueBody":{"errorCall":{"arguments":[{"arguments":[{"arguments":[{"id":6925,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4960:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}],"id":6924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4952:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6923,"name":"address","nodeType":"ElementaryTypeName","src":"4952:7:28","typeDescriptions":{}}},"id":6926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4952:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6921,"name":"linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6714,"src":"4932:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"id":6922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4942:9:28","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1322,"src":"4932:19:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4932:34:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6928,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6904,"src":"4968:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6920,"name":"NotEnoughBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6635,"src":"4915:16:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":6929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4915:58:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6930,"nodeType":"RevertStatement","src":"4908:65:28"}},{"expression":{"arguments":[{"arguments":[{"id":6937,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6896,"src":"5012:6:28","typeDescriptions":{"typeIdentifier":"t_contract$_IRouterClient_$184","typeString":"contract IRouterClient"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IRouterClient_$184","typeString":"contract IRouterClient"}],"id":6936,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5004:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6935,"name":"address","nodeType":"ElementaryTypeName","src":"5004:7:28","typeDescriptions":{}}},"id":6938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5004:15:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6939,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6904,"src":"5021:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6932,"name":"linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6714,"src":"4986:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}},"id":6934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4996:7:28","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1315,"src":"4986:17:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":6940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4986:40:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6941,"nodeType":"ExpressionStatement","src":"4986:40:28"},{"expression":{"id":6948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6942,"name":"messageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6852,"src":"5039:9:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6945,"name":"_destinationChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6845,"src":"5067:25:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":6946,"name":"evm2AnyMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6881,"src":"5094:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage memory"}],"expression":{"id":6943,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6896,"src":"5051:6:28","typeDescriptions":{"typeIdentifier":"t_contract$_IRouterClient_$184","typeString":"contract IRouterClient"}},"id":6944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5058:8:28","memberName":"ccipSend","nodeType":"MemberAccess","referencedDeclaration":183,"src":"5051:15:28","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint64_$_t_struct$_EVM2AnyMessage_$217_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint64,struct Client.EVM2AnyMessage memory) payable external returns (bytes32)"}},"id":6947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5051:58:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5039:70:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":6949,"nodeType":"ExpressionStatement","src":"5039:70:28"},{"eventCall":{"arguments":[{"id":6951,"name":"messageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6852,"src":"5140:9:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6952,"name":"_destinationChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6845,"src":"5151:25:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":6953,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6847,"src":"5178:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6954,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6849,"src":"5189:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"id":6957,"name":"linkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6714,"src":"5204:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LinkTokenInterface_$1390","typeString":"contract LinkTokenInterface"}],"id":6956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5196:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6955,"name":"address","nodeType":"ElementaryTypeName","src":"5196:7:28","typeDescriptions":{}}},"id":6958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5196:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6959,"name":"fees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6904,"src":"5216:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6950,"name":"MessageSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6663,"src":"5127:11:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint64_$_t_address_$_t_bytes_memory_ptr_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint64,address,bytes memory,address,uint256)"}},"id":6960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5127:94:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6961,"nodeType":"EmitStatement","src":"5122:99:28"},{"expression":{"id":6962,"name":"messageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6852,"src":"5241:9:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":6853,"id":6963,"nodeType":"Return","src":"5234:16:28"}]},"functionSelector":"a30e3770","id":6965,"implemented":true,"kind":"function","modifiers":[],"name":"sendMessagePayLINK","nameLocation":"4067:18:28","nodeType":"FunctionDefinition","parameters":{"id":6850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6845,"mutability":"mutable","name":"_destinationChainSelector","nameLocation":"4093:25:28","nodeType":"VariableDeclaration","scope":6965,"src":"4086:32:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6844,"name":"uint64","nodeType":"ElementaryTypeName","src":"4086:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6847,"mutability":"mutable","name":"_receiver","nameLocation":"4128:9:28","nodeType":"VariableDeclaration","scope":6965,"src":"4120:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6846,"name":"address","nodeType":"ElementaryTypeName","src":"4120:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6849,"mutability":"mutable","name":"_data","nameLocation":"4152:5:28","nodeType":"VariableDeclaration","scope":6965,"src":"4139:18:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6848,"name":"bytes","nodeType":"ElementaryTypeName","src":"4139:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4085:73:28"},"returnParameters":{"id":6853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6852,"mutability":"mutable","name":"messageId","nameLocation":"4258:9:28","nodeType":"VariableDeclaration","scope":6965,"src":"4250:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4250:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4249:19:28"},"scope":7177,"src":"4058:1200:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7011,"nodeType":"Block","src":"5411:452:28","statements":[{"assignments":[6981],"declarations":[{"constant":false,"id":6981,"mutability":"mutable","name":"evm2AnyMessage","nameLocation":"5451:14:28","nodeType":"VariableDeclaration","scope":7011,"src":"5422:43:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage"},"typeName":{"id":6980,"nodeType":"UserDefinedTypeName","pathNode":{"id":6979,"name":"Client.EVM2AnyMessage","nameLocations":["5422:6:28","5429:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":217,"src":"5422:21:28"},"referencedDeclaration":217,"src":"5422:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_storage_ptr","typeString":"struct Client.EVM2AnyMessage"}},"visibility":"internal"}],"id":7008,"initialValue":{"arguments":[{"arguments":[{"id":6986,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6967,"src":"5526:9:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6984,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5515:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5519:6:28","memberName":"encode","nodeType":"MemberAccess","src":"5515:10:28","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5515:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"id":6990,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6969,"src":"5568:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":6988,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5557:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5561:6:28","memberName":"encode","nodeType":"MemberAccess","src":"5557:10:28","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5557:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"hexValue":"30","id":6996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5631:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6995,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5603:27:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_EVMTokenAmount_$191_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct Client.EVMTokenAmount memory[] memory)"},"typeName":{"baseType":{"id":6993,"nodeType":"UserDefinedTypeName","pathNode":{"id":6992,"name":"Client.EVMTokenAmount","nameLocations":["5607:6:28","5614:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":191,"src":"5607:21:28"},"referencedDeclaration":191,"src":"5607:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$191_storage_ptr","typeString":"struct Client.EVMTokenAmount"}},"id":6994,"nodeType":"ArrayTypeName","src":"5607:23:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_storage_$dyn_storage_ptr","typeString":"struct Client.EVMTokenAmount[]"}}},"id":6997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5603:30:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_memory_ptr_$dyn_memory_ptr","typeString":"struct Client.EVMTokenAmount memory[] memory"}},{"arguments":[{"arguments":[{"hexValue":"3830305f303030","id":7002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5731:7:28","typeDescriptions":{"typeIdentifier":"t_rational_800000_by_1","typeString":"int_const 800000"},"value":"800_000"},{"hexValue":"66616c7365","id":7003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5748:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_800000_by_1","typeString":"int_const 800000"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7000,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"5698:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Client_$241_$","typeString":"type(library Client)"}},"id":7001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5705:14:28","memberName":"EVMExtraArgsV1","nodeType":"MemberAccess","referencedDeclaration":225,"src":"5698:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_EVMExtraArgsV1_$225_storage_ptr_$","typeString":"type(struct Client.EVMExtraArgsV1 storage pointer)"}},"id":7004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5721:8:28","5740:6:28"],"names":["gasLimit","strict"],"nodeType":"FunctionCall","src":"5698:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$225_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_EVMExtraArgsV1_$225_memory_ptr","typeString":"struct Client.EVMExtraArgsV1 memory"}],"expression":{"id":6998,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"5660:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Client_$241_$","typeString":"type(library Client)"}},"id":6999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5667:12:28","memberName":"_argsToBytes","nodeType":"MemberAccess","referencedDeclaration":240,"src":"5660:19:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_EVMExtraArgsV1_$225_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct Client.EVMExtraArgsV1 memory) pure returns (bytes memory)"}},"id":7005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5660:110:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":7006,"name":"_feeTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6971,"src":"5795:16:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_memory_ptr_$dyn_memory_ptr","typeString":"struct Client.EVMTokenAmount memory[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6982,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"5468:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Client_$241_$","typeString":"type(library Client)"}},"id":6983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5475:14:28","memberName":"EVM2AnyMessage","nodeType":"MemberAccess","referencedDeclaration":217,"src":"5468:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_EVM2AnyMessage_$217_storage_ptr_$","typeString":"type(struct Client.EVM2AnyMessage storage pointer)"}},"id":7007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["5505:8:28","5551:4:28","5589:12:28","5648:9:28","5785:8:28"],"names":["receiver","data","tokenAmounts","extraArgs","feeToken"],"nodeType":"FunctionCall","src":"5468:355:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage memory"}},"nodeType":"VariableDeclarationStatement","src":"5422:401:28"},{"expression":{"id":7009,"name":"evm2AnyMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6981,"src":"5841:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage memory"}},"functionReturnParameters":6976,"id":7010,"nodeType":"Return","src":"5834:21:28"}]},"id":7012,"implemented":true,"kind":"function","modifiers":[],"name":"_buildCCIPMessage","nameLocation":"5275:17:28","nodeType":"FunctionDefinition","parameters":{"id":6972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6967,"mutability":"mutable","name":"_receiver","nameLocation":"5301:9:28","nodeType":"VariableDeclaration","scope":7012,"src":"5293:17:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6966,"name":"address","nodeType":"ElementaryTypeName","src":"5293:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6969,"mutability":"mutable","name":"_data","nameLocation":"5325:5:28","nodeType":"VariableDeclaration","scope":7012,"src":"5312:18:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":6968,"name":"bytes","nodeType":"ElementaryTypeName","src":"5312:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":6971,"mutability":"mutable","name":"_feeTokenAddress","nameLocation":"5340:16:28","nodeType":"VariableDeclaration","scope":7012,"src":"5332:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6970,"name":"address","nodeType":"ElementaryTypeName","src":"5332:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5292:65:28"},"returnParameters":{"id":6976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7012,"src":"5381:28:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_memory_ptr","typeString":"struct Client.EVM2AnyMessage"},"typeName":{"id":6974,"nodeType":"UserDefinedTypeName","pathNode":{"id":6973,"name":"Client.EVM2AnyMessage","nameLocations":["5381:6:28","5388:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":217,"src":"5381:21:28"},"referencedDeclaration":217,"src":"5381:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVM2AnyMessage_$217_storage_ptr","typeString":"struct Client.EVM2AnyMessage"}},"visibility":"internal"}],"src":"5380:30:28"},"scope":7177,"src":"5266:597:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"baseFunctions":[84],"body":{"id":7068,"nodeType":"Block","src":"5955:407:28","statements":[{"expression":{"id":7022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7019,"name":"lastReceivedMessageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6689,"src":"5966:21:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":7020,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"5990:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7021,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6005:9:28","memberName":"messageId","nodeType":"MemberAccess","referencedDeclaration":193,"src":"5990:24:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5966:48:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7023,"nodeType":"ExpressionStatement","src":"5966:48:28"},{"expression":{"id":7033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7024,"name":"lastReceivedText","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6691,"src":"6025:16:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":7027,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"6055:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7028,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6070:4:28","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":199,"src":"6055:19:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":7030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6077:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7029,"name":"string","nodeType":"ElementaryTypeName","src":"6077:6:28","typeDescriptions":{}}}],"id":7031,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6076:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"id":7025,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6044:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6048:6:28","memberName":"decode","nodeType":"MemberAccess","src":"6044:10:28","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":7032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6044:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"6025:60:28","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":7034,"nodeType":"ExpressionStatement","src":"6025:60:28"},{"eventCall":{"arguments":[{"expression":{"id":7036,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"6119:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6134:9:28","memberName":"messageId","nodeType":"MemberAccess","referencedDeclaration":193,"src":"6119:24:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":7038,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"6145:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7039,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6160:19:28","memberName":"sourceChainSelector","nodeType":"MemberAccess","referencedDeclaration":195,"src":"6145:34:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"arguments":[{"expression":{"id":7042,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"6192:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7043,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6207:6:28","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":197,"src":"6192:21:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":7045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6216:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7044,"name":"address","nodeType":"ElementaryTypeName","src":"6216:7:28","typeDescriptions":{}}}],"id":7046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6215:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":7040,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6181:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6185:6:28","memberName":"decode","nodeType":"MemberAccess","src":"6181:10:28","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":7047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6181:44:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"arguments":[{"expression":{"id":7050,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"6238:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7051,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6253:4:28","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":199,"src":"6238:19:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":7053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6260:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7052,"name":"string","nodeType":"ElementaryTypeName","src":"6260:6:28","typeDescriptions":{}}}],"id":7054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6259:8:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"id":7048,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6227:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6231:6:28","memberName":"decode","nodeType":"MemberAccess","src":"6227:10:28","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":7055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6227:41:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"baseExpression":{"expression":{"id":7056,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"6270:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7057,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6285:16:28","memberName":"destTokenAmounts","nodeType":"MemberAccess","referencedDeclaration":203,"src":"6270:31:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_memory_ptr_$dyn_memory_ptr","typeString":"struct Client.EVMTokenAmount memory[] memory"}},"id":7059,"indexExpression":{"hexValue":"30","id":7058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6302:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6270:34:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$191_memory_ptr","typeString":"struct Client.EVMTokenAmount memory"}},"id":7060,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6305:5:28","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":188,"src":"6270:40:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"expression":{"id":7061,"name":"any2EvmMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7015,"src":"6312:14:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage memory"}},"id":7062,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6327:16:28","memberName":"destTokenAmounts","nodeType":"MemberAccess","referencedDeclaration":203,"src":"6312:31:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_EVMTokenAmount_$191_memory_ptr_$dyn_memory_ptr","typeString":"struct Client.EVMTokenAmount memory[] memory"}},"id":7064,"indexExpression":{"hexValue":"30","id":7063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6344:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6312:34:28","typeDescriptions":{"typeIdentifier":"t_struct$_EVMTokenAmount_$191_memory_ptr","typeString":"struct Client.EVMTokenAmount memory"}},"id":7065,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6347:6:28","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":190,"src":"6312:41:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7035,"name":"MessageReceived","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6677,"src":"6103:15:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint64_$_t_address_$_t_string_memory_ptr_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint64,address,string memory,address,uint256)"}},"id":7066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6103:251:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7067,"nodeType":"EmitStatement","src":"6098:256:28"}]},"id":7069,"implemented":true,"kind":"function","modifiers":[],"name":"_ccipReceive","nameLocation":"5880:12:28","nodeType":"FunctionDefinition","overrides":{"id":7017,"nodeType":"OverrideSpecifier","overrides":[],"src":"5947:8:28"},"parameters":{"id":7016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7015,"mutability":"mutable","name":"any2EvmMessage","nameLocation":"5922:14:28","nodeType":"VariableDeclaration","scope":7069,"src":"5893:43:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_memory_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":7014,"nodeType":"UserDefinedTypeName","pathNode":{"id":7013,"name":"Client.Any2EVMMessage","nameLocations":["5893:6:28","5900:14:28"],"nodeType":"IdentifierPath","referencedDeclaration":204,"src":"5893:21:28"},"referencedDeclaration":204,"src":"5893:21:28","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$204_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"5892:45:28"},"returnParameters":{"id":7018,"nodeType":"ParameterList","parameters":[],"src":"5955:0:28"},"scope":7177,"src":"5871:491:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7072,"nodeType":"Block","src":"6397:2:28","statements":[]},"id":7073,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":7070,"nodeType":"ParameterList","parameters":[],"src":"6377:2:28"},"returnParameters":{"id":7071,"nodeType":"ParameterList","parameters":[],"src":"6397:0:28"},"scope":7177,"src":"6370:29:28","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":7112,"nodeType":"Block","src":"6468:262:28","statements":[{"assignments":[7079],"declarations":[{"constant":false,"id":7079,"mutability":"mutable","name":"amount","nameLocation":"6487:6:28","nodeType":"VariableDeclaration","scope":7112,"src":"6479:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7078,"name":"uint256","nodeType":"ElementaryTypeName","src":"6479:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7085,"initialValue":{"expression":{"arguments":[{"id":7082,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6504:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}],"id":7081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6496:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7080,"name":"address","nodeType":"ElementaryTypeName","src":"6496:7:28","typeDescriptions":{}}},"id":7083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6496:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6510:7:28","memberName":"balance","nodeType":"MemberAccess","src":"6496:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6479:38:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7086,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"6534:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6544:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6534:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7092,"nodeType":"IfStatement","src":"6530:43:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7089,"name":"NothingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"6554:17:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6554:19:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7091,"nodeType":"RevertStatement","src":"6547:26:28"}},{"assignments":[7094,null],"declarations":[{"constant":false,"id":7094,"mutability":"mutable","name":"sent","nameLocation":"6592:4:28","nodeType":"VariableDeclaration","scope":7112,"src":"6587:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7093,"name":"bool","nodeType":"ElementaryTypeName","src":"6587:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":7101,"initialValue":{"arguments":[{"hexValue":"","id":7099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6635:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":7095,"name":"_beneficiary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7075,"src":"6602:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6615:4:28","memberName":"call","nodeType":"MemberAccess","src":"6602:17:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":7098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":7097,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"6627:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"6602:32:28","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":7100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6602:36:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6586:52:28"},{"condition":{"id":7103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6655:5:28","subExpression":{"id":7102,"name":"sent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7094,"src":"6656:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7111,"nodeType":"IfStatement","src":"6651:71:28","trueBody":{"errorCall":{"arguments":[{"expression":{"id":7105,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6689:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6693:6:28","memberName":"sender","nodeType":"MemberAccess","src":"6689:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7107,"name":"_beneficiary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7075,"src":"6701:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7108,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7079,"src":"6715:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7104,"name":"FailedToWithdrawEth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6645,"src":"6669:19:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":7109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6669:53:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7110,"nodeType":"RevertStatement","src":"6662:60:28"}}]},"functionSelector":"51cff8d9","id":7113,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"6416:8:28","nodeType":"FunctionDefinition","parameters":{"id":7076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7075,"mutability":"mutable","name":"_beneficiary","nameLocation":"6433:12:28","nodeType":"VariableDeclaration","scope":7113,"src":"6425:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7074,"name":"address","nodeType":"ElementaryTypeName","src":"6425:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6424:22:28"},"returnParameters":{"id":7077,"nodeType":"ParameterList","parameters":[],"src":"6468:0:28"},"scope":7177,"src":"6407:323:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":7147,"nodeType":"Block","src":"6821:189:28","statements":[{"assignments":[7121],"declarations":[{"constant":false,"id":7121,"mutability":"mutable","name":"amount","nameLocation":"6840:6:28","nodeType":"VariableDeclaration","scope":7147,"src":"6832:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7120,"name":"uint256","nodeType":"ElementaryTypeName","src":"6832:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7131,"initialValue":{"arguments":[{"arguments":[{"id":7128,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6882:4:28","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_HorizonFujiS_$7177","typeString":"contract HorizonFujiS"}],"id":7127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6874:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7126,"name":"address","nodeType":"ElementaryTypeName","src":"6874:7:28","typeDescriptions":{}}},"id":7129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6874:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":7123,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7117,"src":"6856:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7122,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"6849:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$319_$","typeString":"type(contract IERC20)"}},"id":7124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6849:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$319","typeString":"contract IERC20"}},"id":7125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6864:9:28","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":276,"src":"6849:24:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":7130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6849:39:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6832:56:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7132,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7121,"src":"6905:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6915:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6905:11:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7138,"nodeType":"IfStatement","src":"6901:43:28","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7135,"name":"NothingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"6925:17:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6925:19:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7137,"nodeType":"RevertStatement","src":"6918:26:28"}},{"expression":{"arguments":[{"id":7143,"name":"_beneficiary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7115,"src":"6981:12:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7144,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7121,"src":"6995:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":7140,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7117,"src":"6964:6:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7139,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"6957:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$319_$","typeString":"type(contract IERC20)"}},"id":7141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6957:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$319","typeString":"contract IERC20"}},"id":7142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6972:8:28","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":286,"src":"6957:23:28","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":7145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6957:45:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7146,"nodeType":"ExpressionStatement","src":"6957:45:28"}]},"functionSelector":"3aeac4e1","id":7148,"implemented":true,"kind":"function","modifiers":[],"name":"withdrawToken","nameLocation":"6747:13:28","nodeType":"FunctionDefinition","parameters":{"id":7118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7115,"mutability":"mutable","name":"_beneficiary","nameLocation":"6770:12:28","nodeType":"VariableDeclaration","scope":7148,"src":"6762:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7114,"name":"address","nodeType":"ElementaryTypeName","src":"6762:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7117,"mutability":"mutable","name":"_token","nameLocation":"6792:6:28","nodeType":"VariableDeclaration","scope":7148,"src":"6784:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7116,"name":"address","nodeType":"ElementaryTypeName","src":"6784:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6760:39:28"},"returnParameters":{"id":7119,"nodeType":"ParameterList","parameters":[],"src":"6821:0:28"},"scope":7177,"src":"6738:272:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":7163,"nodeType":"Block","src":"7301:170:28","statements":[{"condition":{"id":7156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7316:56:28","subExpression":{"baseExpression":{"id":7153,"name":"whitelistedDestinationChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6706,"src":"7317:28:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_bool_$","typeString":"mapping(uint64 => bool)"}},"id":7155,"indexExpression":{"id":7154,"name":"_destinationChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7151,"src":"7346:25:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7317:55:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7161,"nodeType":"IfStatement","src":"7312:139:28","trueBody":{"errorCall":{"arguments":[{"id":7158,"name":"_destinationChainSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7151,"src":"7425:25:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":7157,"name":"DestinationChainNotWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6649,"src":"7394:30:28","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint64_$returns$__$","typeString":"function (uint64) pure"}},"id":7159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7394:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7160,"nodeType":"RevertStatement","src":"7387:64:28"}},{"id":7162,"nodeType":"PlaceholderStatement","src":"7462:1:28"}]},"documentation":{"id":7149,"nodeType":"StructuredDocumentation","src":"7041:179:28","text":"@dev Modifier that checks if the chain with the given destinationChainSelector is whitelisted.\n @param _destinationChainSelector The selector of the destination chain."},"id":7164,"name":"onlyWhitelistedDestinationChain","nameLocation":"7235:31:28","nodeType":"ModifierDefinition","parameters":{"id":7152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7151,"mutability":"mutable","name":"_destinationChainSelector","nameLocation":"7274:25:28","nodeType":"VariableDeclaration","scope":7164,"src":"7267:32:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7150,"name":"uint64","nodeType":"ElementaryTypeName","src":"7267:6:28","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7266:34:28"},"src":"7226:245:28","virtual":false,"visibility":"internal"},{"body":{"id":7175,"nodeType":"Block","src":"7499:97:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7167,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7518:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7522:6:28","memberName":"sender","nodeType":"MemberAccess","src":"7518:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7169,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6695,"src":"7532:5:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7518:19:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6e21","id":7171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7539:36:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa74c2beecec9c17c96aac3702cfcb1c247042dd9822997272f2c56fd0edc1d5","typeString":"literal_string \"Only Owner can call this function!\""},"value":"Only Owner can call this function!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa74c2beecec9c17c96aac3702cfcb1c247042dd9822997272f2c56fd0edc1d5","typeString":"literal_string \"Only Owner can call this function!\""}],"id":7166,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7510:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7510:66:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7173,"nodeType":"ExpressionStatement","src":"7510:66:28"},{"id":7174,"nodeType":"PlaceholderStatement","src":"7587:1:28"}]},"id":7176,"name":"onlyOwner","nameLocation":"7488:9:28","nodeType":"ModifierDefinition","parameters":{"id":7165,"nodeType":"ParameterList","parameters":[],"src":"7497:2:28"},"src":"7479:117:28","virtual":false,"visibility":"internal"}],"scope":7178,"src":"577:7022:28","usedErrors":[100,6635,6637,6645,6649],"usedEvents":[6663,6677,6683,6687]}],"src":"33:7568:28"},"id":28},"contracts/HorizonFunctions.sol":{"ast":{"absolutePath":"contracts/HorizonFunctions.sol","exportedSymbols":{"FunctionsClient":[449],"FunctionsRequest":[1235],"HorizonFujiAssistant":[5606],"HorizonFunctions":[7450]},"id":7451,"license":"MIT","nodeType":"SourceUnit","nodes":[{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol","file":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol","id":7180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7451,"sourceUnit":450,"src":"66:103:29","symbolAliases":[{"foreign":{"id":7179,"name":"FunctionsClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"74:15:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol","file":"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol","id":7182,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7451,"sourceUnit":1236,"src":"171:115:29","symbolAliases":[{"foreign":{"id":7181,"name":"FunctionsRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"179:16:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/HorizonFujiAssistant.sol","file":"./HorizonFujiAssistant.sol","id":7183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7451,"sourceUnit":5607,"src":"288:36:29","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":7184,"name":"FunctionsClient","nameLocations":["357:15:29"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"357:15:29"},"id":7185,"nodeType":"InheritanceSpecifier","src":"357:15:29"}],"canonicalName":"HorizonFunctions","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":7450,"linearizedBaseContracts":[7450,449,463],"name":"HorizonFunctions","nameLocation":"337:16:29","nodeType":"ContractDefinition","nodes":[{"global":false,"id":7189,"libraryName":{"id":7186,"name":"FunctionsRequest","nameLocations":["385:16:29"],"nodeType":"IdentifierPath","referencedDeclaration":1235,"src":"385:16:29"},"nodeType":"UsingForDirective","src":"379:52:29","typeName":{"id":7188,"nodeType":"UserDefinedTypeName","pathNode":{"id":7187,"name":"FunctionsRequest.Request","nameLocations":["406:16:29","423:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"406:24:29"},"referencedDeclaration":813,"src":"406:24:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}}},{"constant":false,"functionSelector":"b1e21749","id":7191,"mutability":"mutable","name":"s_lastRequestId","nameLocation":"528:15:29","nodeType":"VariableDeclaration","scope":7450,"src":"513:30:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7190,"name":"bytes32","nodeType":"ElementaryTypeName","src":"513:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"errorSelector":"d068bf5b","id":7195,"name":"UnexpectedRequestID","nameLocation":"584:19:29","nodeType":"ErrorDefinition","parameters":{"id":7194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7193,"mutability":"mutable","name":"requestId","nameLocation":"612:9:29","nodeType":"VariableDeclaration","scope":7195,"src":"604:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"604:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"603:19:29"},"src":"578:45:29"},{"anonymous":false,"eventSelector":"7873807bf6ddc50401cd3d29bbe0decee23fd4d68d273f4b5eb83cded4d2f172","id":7203,"name":"Response","nameLocation":"668:8:29","nodeType":"EventDefinition","parameters":{"id":7202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7197,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"694:9:29","nodeType":"VariableDeclaration","scope":7203,"src":"678:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"678:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7199,"indexed":false,"mutability":"mutable","name":"response","nameLocation":"711:8:29","nodeType":"VariableDeclaration","scope":7203,"src":"705:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7198,"name":"bytes","nodeType":"ElementaryTypeName","src":"705:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7201,"indexed":false,"mutability":"mutable","name":"err","nameLocation":"727:3:29","nodeType":"VariableDeclaration","scope":7203,"src":"721:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7200,"name":"bytes","nodeType":"ElementaryTypeName","src":"721:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"676:55:29"},"src":"662:70:29"},{"canonicalName":"HorizonFunctions.VehicleData","id":7218,"members":[{"constant":false,"id":7205,"mutability":"mutable","name":"value","nameLocation":"777:5:29","nodeType":"VariableDeclaration","scope":7218,"src":"770:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":7204,"name":"string","nodeType":"ElementaryTypeName","src":"770:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":7207,"mutability":"mutable","name":"uintValue","nameLocation":"798:9:29","nodeType":"VariableDeclaration","scope":7218,"src":"793:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7206,"name":"uint","nodeType":"ElementaryTypeName","src":"793:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7209,"mutability":"mutable","name":"requestTime","nameLocation":"823:11:29","nodeType":"VariableDeclaration","scope":7218,"src":"818:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7208,"name":"uint","nodeType":"ElementaryTypeName","src":"818:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7211,"mutability":"mutable","name":"responseTime","nameLocation":"850:12:29","nodeType":"VariableDeclaration","scope":7218,"src":"845:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7210,"name":"uint","nodeType":"ElementaryTypeName","src":"845:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7213,"mutability":"mutable","name":"lastResponse","nameLocation":"879:12:29","nodeType":"VariableDeclaration","scope":7218,"src":"873:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":7212,"name":"bytes","nodeType":"ElementaryTypeName","src":"873:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7215,"mutability":"mutable","name":"lastError","nameLocation":"908:9:29","nodeType":"VariableDeclaration","scope":7218,"src":"902:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":7214,"name":"bytes","nodeType":"ElementaryTypeName","src":"902:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7217,"mutability":"mutable","name":"isRequest","nameLocation":"933:9:29","nodeType":"VariableDeclaration","scope":7218,"src":"928:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7216,"name":"bool","nodeType":"ElementaryTypeName","src":"928:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"VehicleData","nameLocation":"747:11:29","nodeType":"StructDefinition","scope":7450,"src":"740:210:29","visibility":"public"},{"constant":false,"functionSelector":"e6ee9020","id":7223,"mutability":"mutable","name":"vehicleDataMapping","nameLocation":"1007:18:29","nodeType":"VariableDeclaration","scope":7450,"src":"958:67:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_VehicleData_$7218_storage_$","typeString":"mapping(bytes32 => struct HorizonFunctions.VehicleData)"},"typeName":{"id":7222,"keyName":"requestId","keyNameLocation":"974:9:29","keyType":{"id":7219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"966:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"958:41:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_VehicleData_$7218_storage_$","typeString":"mapping(bytes32 => struct HorizonFunctions.VehicleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":7221,"nodeType":"UserDefinedTypeName","pathNode":{"id":7220,"name":"VehicleData","nameLocations":["987:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":7218,"src":"987:11:29"},"referencedDeclaration":7218,"src":"987:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData"}}},"visibility":"public"},{"constant":false,"id":7225,"mutability":"mutable","name":"subscriptionId","nameLocation":"1049:14:29","nodeType":"VariableDeclaration","scope":7450,"src":"1034:29:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7224,"name":"uint64","nodeType":"ElementaryTypeName","src":"1034:6:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":7227,"mutability":"mutable","name":"router","nameLocation":"1078:6:29","nodeType":"VariableDeclaration","scope":7450,"src":"1070:14:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7226,"name":"address","nodeType":"ElementaryTypeName","src":"1070:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7229,"mutability":"mutable","name":"gasLimit","nameLocation":"1098:8:29","nodeType":"VariableDeclaration","scope":7450,"src":"1091:15:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7228,"name":"uint32","nodeType":"ElementaryTypeName","src":"1091:6:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7231,"mutability":"mutable","name":"donID","nameLocation":"1121:5:29","nodeType":"VariableDeclaration","scope":7450,"src":"1113:13:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1113:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7234,"mutability":"mutable","name":"source","nameLocation":"1281:6:29","nodeType":"VariableDeclaration","scope":7450,"src":"1274:598:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":7232,"name":"string","nodeType":"ElementaryTypeName","src":"1274:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"636f6e7374207469706f4175746f6d6f76656c203d20617267735b305d3b636f6e73742069644d61726361203d20617267735b315d3b636f6e73742069644d6f64656c6f203d20617267735b325d3b636f6e737420646174614d6f64656c6f203d20617267735b335d3b636f6e737420617069526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206068747470733a2f2f706172616c6c656c756d2e636f6d2e62722f666970652f6170692f76312f247b7469706f4175746f6d6f76656c7d2f6d61726361732f247b69644d617263617d2f6d6f64656c6f732f247b69644d6f64656c6f7d2f616e6f732f247b646174614d6f64656c6f7d607d293b69662028617069526573706f6e73652e6572726f7229207b7468726f77204572726f72282752657175657374206661696c656427293b7d636f6e7374207b2064617461207d203d20617069526573706f6e73653b72657475726e2046756e6374696f6e732e656e636f6465537472696e6728646174612e56616c6f72293b","id":7233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1299:573:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b4a9181e2156845b5dff1d70a9a0012839fb202b72b38f9a7f3abc26b3484df","typeString":"literal_string \"const tipoAutomovel = args[0];const idMarca = args[1];const idModelo = args[2];const dataModelo = args[3];const apiResponse = await Functions.makeHttpRequest({url: `https://parallelum.com.br/fipe/api/v1/${tipoAutomovel}/marcas/${idMarca}/modelos/${idModelo}/anos/${dataModelo}`});if (apiResponse.error) {throw Error('Request failed');}const { data } = apiResponse;return Functions.encodeString(data.Valor);\""},"value":"const tipoAutomovel = args[0];const idMarca = args[1];const idModelo = args[2];const dataModelo = args[3];const apiResponse = await Functions.makeHttpRequest({url: `https://parallelum.com.br/fipe/api/v1/${tipoAutomovel}/marcas/${idMarca}/modelos/${idModelo}/anos/${dataModelo}`});if (apiResponse.error) {throw Error('Request failed');}const { data } = apiResponse;return Functions.encodeString(data.Valor);"},"visibility":"internal"},{"constant":false,"id":7243,"mutability":"mutable","name":"assistant","nameLocation":"1902:9:29","nodeType":"VariableDeclaration","scope":7450,"src":"1881:106:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiAssistant_$5606","typeString":"contract HorizonFujiAssistant"},"typeName":{"id":7236,"nodeType":"UserDefinedTypeName","pathNode":{"id":7235,"name":"HorizonFujiAssistant","nameLocations":["1881:20:29"],"nodeType":"IdentifierPath","referencedDeclaration":5606,"src":"1881:20:29"},"referencedDeclaration":5606,"src":"1881:20:29","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiAssistant_$5606","typeString":"contract HorizonFujiAssistant"}},"value":{"arguments":[{"arguments":[{"hexValue":"307835464137363939323261363432383735386662343434353338313565326334333663353743336337","id":7240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1943:42:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x5FA769922a6428758fb44453815e2c436c57C3c7"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1935:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":7238,"name":"address","nodeType":"ElementaryTypeName","src":"1935:8:29","stateMutability":"payable","typeDescriptions":{}}},"id":7241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1935:51:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":7237,"name":"HorizonFujiAssistant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5606,"src":"1914:20:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_HorizonFujiAssistant_$5606_$","typeString":"type(contract HorizonFujiAssistant)"}},"id":7242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:73:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiAssistant_$5606","typeString":"contract HorizonFujiAssistant"}},"visibility":"internal"},{"body":{"id":7273,"nodeType":"Block","src":"2360:289:29","statements":[{"expression":{"id":7259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7257,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7225,"src":"2371:14:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7258,"name":"_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7245,"src":"2388:15:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2371:32:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":7260,"nodeType":"ExpressionStatement","src":"2371:32:29"},{"expression":{"id":7263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7261,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7227,"src":"2420:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7262,"name":"_routerFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7247,"src":"2429:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2420:25:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7264,"nodeType":"ExpressionStatement","src":"2420:25:29"},{"expression":{"id":7267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7265,"name":"gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7229,"src":"2509:8:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7266,"name":"_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7249,"src":"2520:9:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2509:20:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":7268,"nodeType":"ExpressionStatement","src":"2509:20:29"},{"expression":{"id":7271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7269,"name":"donID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7231,"src":"2550:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7270,"name":"_donID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7251,"src":"2558:6:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2550:14:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7272,"nodeType":"ExpressionStatement","src":"2550:14:29"}]},"id":7274,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":7254,"name":"_routerFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7247,"src":"2342:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":7255,"kind":"baseConstructorSpecifier","modifierName":{"id":7253,"name":"FunctionsClient","nameLocations":["2326:15:29"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"2326:15:29"},"nodeType":"ModifierInvocation","src":"2326:33:29"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":7252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7245,"mutability":"mutable","name":"_subscriptionId","nameLocation":"2034:15:29","nodeType":"VariableDeclaration","scope":7274,"src":"2027:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7244,"name":"uint64","nodeType":"ElementaryTypeName","src":"2027:6:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":7247,"mutability":"mutable","name":"_routerFunctions","nameLocation":"2082:16:29","nodeType":"VariableDeclaration","scope":7274,"src":"2074:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7246,"name":"address","nodeType":"ElementaryTypeName","src":"2074:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7249,"mutability":"mutable","name":"_gasLimit","nameLocation":"2177:9:29","nodeType":"VariableDeclaration","scope":7274,"src":"2170:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7248,"name":"uint32","nodeType":"ElementaryTypeName","src":"2170:6:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7251,"mutability":"mutable","name":"_donID","nameLocation":"2223:6:29","nodeType":"VariableDeclaration","scope":7274,"src":"2215:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2215:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2026:299:29"},"returnParameters":{"id":7256,"nodeType":"ParameterList","parameters":[],"src":"2360:0:29"},"scope":7450,"src":"2015:634:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":7338,"nodeType":"Block","src":"2739:680:29","statements":[{"assignments":[7286],"declarations":[{"constant":false,"id":7286,"mutability":"mutable","name":"req","nameLocation":"2813:3:29","nodeType":"VariableDeclaration","scope":7338,"src":"2781:35:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":7285,"nodeType":"UserDefinedTypeName","pathNode":{"id":7284,"name":"FunctionsRequest.Request","nameLocations":["2781:16:29","2798:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":813,"src":"2781:24:29"},"referencedDeclaration":813,"src":"2781:24:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"}],"id":7287,"nodeType":"VariableDeclarationStatement","src":"2781:35:29"},{"expression":{"arguments":[{"id":7291,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7234,"src":"2870:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":7288,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7286,"src":"2829:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":7290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2833:36:29","memberName":"initializeRequestForInlineJavaScript","nodeType":"MemberAccess","referencedDeclaration":1092,"src":"2829:40:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$813_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$813_memory_ptr_$","typeString":"function (struct FunctionsRequest.Request memory,string memory) pure"}},"id":7292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2829:48:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7293,"nodeType":"ExpressionStatement","src":"2829:48:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7294,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7277,"src":"2894:4:29","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}},"id":7295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2899:6:29","memberName":"length","nodeType":"MemberAccess","src":"2894:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2908:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2894:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7304,"nodeType":"IfStatement","src":"2890:38:29","trueBody":{"expression":{"arguments":[{"id":7301,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7277,"src":"2923:4:29","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}],"expression":{"id":7298,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7286,"src":"2911:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":7300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2915:7:29","memberName":"setArgs","nodeType":"MemberAccess","referencedDeclaration":1209,"src":"2911:11:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$813_memory_ptr_$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$813_memory_ptr_$","typeString":"function (struct FunctionsRequest.Request memory,string memory[] memory) pure"}},"id":7302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2911:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7303,"nodeType":"ExpressionStatement","src":"2911:17:29"}},{"expression":{"id":7314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7305,"name":"s_lastRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7191,"src":"2941:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7307,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7286,"src":"2972:3:29","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$813_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":7308,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2976:10:29","memberName":"encodeCBOR","nodeType":"MemberAccess","referencedDeclaration":1028,"src":"2972:14:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$813_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_struct$_Request_$813_memory_ptr_$","typeString":"function (struct FunctionsRequest.Request memory) pure returns (bytes memory)"}},"id":7309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2972:16:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":7310,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7225,"src":"2990:14:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":7311,"name":"gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7229,"src":"3006:8:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":7312,"name":"donID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7231,"src":"3016:5:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7306,"name":"_sendRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"2959:12:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_uint64_$_t_uint32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint64,uint32,bytes32) returns (bytes32)"}},"id":7313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2959:63:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2941:81:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7315,"nodeType":"ExpressionStatement","src":"2941:81:29"},{"assignments":[7318],"declarations":[{"constant":false,"id":7318,"mutability":"mutable","name":"vehicleInfo","nameLocation":"3062:11:29","nodeType":"VariableDeclaration","scope":7338,"src":"3043:30:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_memory_ptr","typeString":"struct HorizonFunctions.VehicleData"},"typeName":{"id":7317,"nodeType":"UserDefinedTypeName","pathNode":{"id":7316,"name":"VehicleData","nameLocations":["3043:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":7218,"src":"3043:11:29"},"referencedDeclaration":7218,"src":"3043:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData"}},"visibility":"internal"}],"id":7329,"initialValue":{"arguments":[{"hexValue":"","id":7320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3111:2:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"30","id":7321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3139:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":7322,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3168:5:29","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3174:9:29","memberName":"timestamp","nodeType":"MemberAccess","src":"3168:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":7324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3212:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"","id":7325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3242:2:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":7326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3270:2:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"74727565","id":7327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3298:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":7319,"name":"VehicleData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7218,"src":"3076:11:29","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_VehicleData_$7218_storage_ptr_$","typeString":"type(struct HorizonFunctions.VehicleData storage pointer)"}},"id":7328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3104:5:29","3128:9:29","3155:11:29","3198:12:29","3228:12:29","3259:9:29","3287:9:29"],"names":["value","uintValue","requestTime","responseTime","lastResponse","lastError","isRequest"],"nodeType":"FunctionCall","src":"3076:238:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_memory_ptr","typeString":"struct HorizonFunctions.VehicleData memory"}},"nodeType":"VariableDeclarationStatement","src":"3043:271:29"},{"expression":{"id":7334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7330,"name":"vehicleDataMapping","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7223,"src":"3327:18:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_VehicleData_$7218_storage_$","typeString":"mapping(bytes32 => struct HorizonFunctions.VehicleData storage ref)"}},"id":7332,"indexExpression":{"id":7331,"name":"s_lastRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7191,"src":"3346:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3327:35:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage","typeString":"struct HorizonFunctions.VehicleData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7333,"name":"vehicleInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7318,"src":"3365:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_memory_ptr","typeString":"struct HorizonFunctions.VehicleData memory"}},"src":"3327:49:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage","typeString":"struct HorizonFunctions.VehicleData storage ref"}},"id":7335,"nodeType":"ExpressionStatement","src":"3327:49:29"},{"expression":{"id":7336,"name":"s_lastRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7191,"src":"3396:15:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":7281,"id":7337,"nodeType":"Return","src":"3389:22:29"}]},"functionSelector":"4c8f60a3","id":7339,"implemented":true,"kind":"function","modifiers":[],"name":"sendRequest","nameLocation":"2666:11:29","nodeType":"FunctionDefinition","parameters":{"id":7278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7277,"mutability":"mutable","name":"args","nameLocation":"2696:4:29","nodeType":"VariableDeclaration","scope":7339,"src":"2678:22:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":7275,"name":"string","nodeType":"ElementaryTypeName","src":"2678:6:29","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":7276,"nodeType":"ArrayTypeName","src":"2678:8:29","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"2677:24:29"},"returnParameters":{"id":7281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7280,"mutability":"mutable","name":"requestId","nameLocation":"2728:9:29","nodeType":"VariableDeclaration","scope":7339,"src":"2720:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7279,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2720:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2719:19:29"},"scope":7450,"src":"2657:762:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[414],"body":{"id":7417,"nodeType":"Block","src":"3530:712:29","statements":[{"assignments":[7351],"declarations":[{"constant":false,"id":7351,"mutability":"mutable","name":"vehicle","nameLocation":"3561:7:29","nodeType":"VariableDeclaration","scope":7417,"src":"3541:27:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData"},"typeName":{"id":7350,"nodeType":"UserDefinedTypeName","pathNode":{"id":7349,"name":"VehicleData","nameLocations":["3541:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":7218,"src":"3541:11:29"},"referencedDeclaration":7218,"src":"3541:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData"}},"visibility":"internal"}],"id":7355,"initialValue":{"baseExpression":{"id":7352,"name":"vehicleDataMapping","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7223,"src":"3571:18:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_VehicleData_$7218_storage_$","typeString":"mapping(bytes32 => struct HorizonFunctions.VehicleData storage ref)"}},"id":7354,"indexExpression":{"id":7353,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7341,"src":"3590:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3571:29:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage","typeString":"struct HorizonFunctions.VehicleData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3541:59:29"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7356,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7351,"src":"3617:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3625:9:29","memberName":"isRequest","nodeType":"MemberAccess","referencedDeclaration":7217,"src":"3617:17:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":7358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3638:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3617:26:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7365,"nodeType":"IfStatement","src":"3613:126:29","trueBody":{"id":7364,"nodeType":"Block","src":"3645:94:29","statements":[{"errorCall":{"arguments":[{"id":7361,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7341,"src":"3687:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7360,"name":"UnexpectedRequestID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7195,"src":"3667:19:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":7362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3667:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7363,"nodeType":"RevertStatement","src":"3660:37:29"}]}},{"expression":{"id":7370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7366,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7351,"src":"3823:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7368,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3831:12:29","memberName":"lastResponse","nodeType":"MemberAccess","referencedDeclaration":7213,"src":"3823:20:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7369,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7343,"src":"3846:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3823:31:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":7371,"nodeType":"ExpressionStatement","src":"3823:31:29"},{"expression":{"id":7376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7372,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7351,"src":"3865:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3873:9:29","memberName":"lastError","nodeType":"MemberAccess","referencedDeclaration":7215,"src":"3865:17:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7375,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7345,"src":"3885:3:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3865:23:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":7377,"nodeType":"ExpressionStatement","src":"3865:23:29"},{"expression":{"id":7385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7378,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7351,"src":"3899:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3907:5:29","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":7205,"src":"3899:13:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7383,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7343,"src":"3922:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3915:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7381,"name":"string","nodeType":"ElementaryTypeName","src":"3915:6:29","typeDescriptions":{}}},"id":7384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3915:16:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3899:32:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":7386,"nodeType":"ExpressionStatement","src":"3899:32:29"},{"expression":{"id":7392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7387,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7351,"src":"3942:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7389,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3950:12:29","memberName":"responseTime","nodeType":"MemberAccess","referencedDeclaration":7211,"src":"3942:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":7390,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3965:5:29","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3971:9:29","memberName":"timestamp","nodeType":"MemberAccess","src":"3965:15:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3942:38:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7393,"nodeType":"ExpressionStatement","src":"3942:38:29"},{"assignments":[7395],"declarations":[{"constant":false,"id":7395,"mutability":"mutable","name":"valueConverted","nameLocation":"3998:14:29","nodeType":"VariableDeclaration","scope":7417,"src":"3993:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7394,"name":"uint","nodeType":"ElementaryTypeName","src":"3993:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7401,"initialValue":{"arguments":[{"expression":{"id":7398,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7351,"src":"4038:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7399,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4046:5:29","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":7205,"src":"4038:13:29","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":7396,"name":"assistant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"4015:9:29","typeDescriptions":{"typeIdentifier":"t_contract$_HorizonFujiAssistant_$5606","typeString":"contract HorizonFujiAssistant"}},"id":7397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4025:12:29","memberName":"stringToUint","nodeType":"MemberAccess","referencedDeclaration":5605,"src":"4015:22:29","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (string memory) pure external returns (uint256)"}},"id":7400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:37:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3993:59:29"},{"expression":{"id":7409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7402,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7351,"src":"4096:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4104:9:29","memberName":"uintValue","nodeType":"MemberAccess","referencedDeclaration":7207,"src":"4096:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7405,"name":"valueConverted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7395,"src":"4117:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"35","id":7406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4134:1:29","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"4117:18:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7408,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4116:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4096:40:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7410,"nodeType":"ExpressionStatement","src":"4096:40:29"},{"eventCall":{"arguments":[{"id":7412,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7341,"src":"4209:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":7413,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7343,"src":"4220:8:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":7414,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7345,"src":"4230:3:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7411,"name":"Response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7203,"src":"4200:8:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory)"}},"id":7415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4200:34:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7416,"nodeType":"EmitStatement","src":"4195:39:29"}]},"id":7418,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRequest","nameLocation":"3436:14:29","nodeType":"FunctionDefinition","overrides":{"id":7347,"nodeType":"OverrideSpecifier","overrides":[],"src":"3521:8:29"},"parameters":{"id":7346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7341,"mutability":"mutable","name":"requestId","nameLocation":"3460:9:29","nodeType":"VariableDeclaration","scope":7418,"src":"3452:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3452:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7343,"mutability":"mutable","name":"response","nameLocation":"3484:8:29","nodeType":"VariableDeclaration","scope":7418,"src":"3471:21:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7342,"name":"bytes","nodeType":"ElementaryTypeName","src":"3471:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":7345,"mutability":"mutable","name":"err","nameLocation":"3507:3:29","nodeType":"VariableDeclaration","scope":7418,"src":"3494:16:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":7344,"name":"bytes","nodeType":"ElementaryTypeName","src":"3494:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3450:61:29"},"returnParameters":{"id":7348,"nodeType":"ParameterList","parameters":[],"src":"3530:0:29"},"scope":7450,"src":"3427:815:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7448,"nodeType":"Block","src":"4331:225:29","statements":[{"assignments":[7429],"declarations":[{"constant":false,"id":7429,"mutability":"mutable","name":"vehicle","nameLocation":"4362:7:29","nodeType":"VariableDeclaration","scope":7448,"src":"4342:27:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData"},"typeName":{"id":7428,"nodeType":"UserDefinedTypeName","pathNode":{"id":7427,"name":"VehicleData","nameLocations":["4342:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":7218,"src":"4342:11:29"},"referencedDeclaration":7218,"src":"4342:11:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData"}},"visibility":"internal"}],"id":7433,"initialValue":{"baseExpression":{"id":7430,"name":"vehicleDataMapping","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7223,"src":"4372:18:29","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_VehicleData_$7218_storage_$","typeString":"mapping(bytes32 => struct HorizonFunctions.VehicleData storage ref)"}},"id":7432,"indexExpression":{"id":7431,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7420,"src":"4391:9:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4372:29:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage","typeString":"struct HorizonFunctions.VehicleData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4342:59:29"},{"assignments":[7435],"declarations":[{"constant":false,"id":7435,"mutability":"mutable","name":"vehicleValue","nameLocation":"4417:12:29","nodeType":"VariableDeclaration","scope":7448,"src":"4412:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7434,"name":"uint","nodeType":"ElementaryTypeName","src":"4412:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7438,"initialValue":{"expression":{"id":7436,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7429,"src":"4432:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7437,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4440:9:29","memberName":"uintValue","nodeType":"MemberAccess","referencedDeclaration":7207,"src":"4432:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4412:37:29"},{"assignments":[7440],"declarations":[{"constant":false,"id":7440,"mutability":"mutable","name":"responseTime","nameLocation":"4465:12:29","nodeType":"VariableDeclaration","scope":7448,"src":"4460:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7439,"name":"uint","nodeType":"ElementaryTypeName","src":"4460:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7443,"initialValue":{"expression":{"id":7441,"name":"vehicle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7429,"src":"4480:7:29","typeDescriptions":{"typeIdentifier":"t_struct$_VehicleData_$7218_storage_ptr","typeString":"struct HorizonFunctions.VehicleData storage pointer"}},"id":7442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4488:12:29","memberName":"responseTime","nodeType":"MemberAccess","referencedDeclaration":7211,"src":"4480:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4460:40:29"},{"expression":{"components":[{"id":7444,"name":"vehicleValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"4521:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7445,"name":"responseTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7440,"src":"4535:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7446,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4520:28:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":7426,"id":7447,"nodeType":"Return","src":"4513:35:29"}]},"functionSelector":"c972ebb6","id":7449,"implemented":true,"kind":"function","modifiers":[],"name":"returnFunctionsInfo","nameLocation":"4259:19:29","nodeType":"FunctionDefinition","parameters":{"id":7421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7420,"mutability":"mutable","name":"requestId","nameLocation":"4287:9:29","nodeType":"VariableDeclaration","scope":7449,"src":"4279:17:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4279:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4278:19:29"},"returnParameters":{"id":7426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7449,"src":"4320:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7422,"name":"uint","nodeType":"ElementaryTypeName","src":"4320:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7449,"src":"4326:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7424,"name":"uint","nodeType":"ElementaryTypeName","src":"4326:4:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4319:12:29"},"scope":7450,"src":"4250:306:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":7451,"src":"328:4231:29","usedErrors":[359,815,819,821,7195],"usedEvents":[353,357,7203]}],"src":"66:4495:29"},"id":29}},"contracts":{"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol":{"CCIPReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"InvalidRouter","type":"error"},{"inputs":[{"components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]"}],"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple"}],"name":"ccipReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}},"getRouter()":{"returns":{"_0":"i_router address"}},"supportsInterface(bytes4)":{"params":{"interfaceId":"The interfaceId to check"},"returns":{"_0":"true if the interfaceId is supported"}}},"title":"CCIPReceiver - Base contract for CCIP applications that can receive messages.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb","getRouter()":"b0f479a1","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"title\":\"CCIPReceiver - Base contract for CCIP applications that can receive messages.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":\"CCIPReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcf5d0a5cd6ed0f6a9ed721b3e532c0504ed1ba3ab6d3567165876ceb4f23b084\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."},"getRouter()":{"notice":"Return the current router"},"supportsInterface(bytes4)":{"notice":"IERC165 supports an interfaceId"}},"version":1}}},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol":{"IAny2EVMMessageReceiver":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]"}],"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple"}],"name":"ccipReceive","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"}},\"notice\":\"Application contracts that intend to receive messages from the router should implement this interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":\"IAny2EVMMessageReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."}},"notice":"Application contracts that intend to receive messages from the router should implement this interface.","version":1}}},"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol":{"IRouterClient":{"abi":[{"inputs":[],"name":"InsufficientFeeTokenAmount","type":"error"},{"inputs":[],"name":"InvalidMsgValue","type":"error"},{"inputs":[{"internalType":"uint64","name":"destChainSelector","type":"uint64"}],"name":"UnsupportedDestinationChain","type":"error"},{"inputs":[{"internalType":"uint64","name":"destinationChainSelector","type":"uint64"},{"components":[{"internalType":"bytes","name":"receiver","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"tokenAmounts","type":"tuple[]"},{"internalType":"address","name":"feeToken","type":"address"},{"internalType":"bytes","name":"extraArgs","type":"bytes"}],"internalType":"struct Client.EVM2AnyMessage","name":"message","type":"tuple"}],"name":"ccipSend","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint64","name":"destinationChainSelector","type":"uint64"},{"components":[{"internalType":"bytes","name":"receiver","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"tokenAmounts","type":"tuple[]"},{"internalType":"address","name":"feeToken","type":"address"},{"internalType":"bytes","name":"extraArgs","type":"bytes"}],"internalType":"struct Client.EVM2AnyMessage","name":"message","type":"tuple"}],"name":"getFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainSelector","type":"uint64"}],"name":"getSupportedTokens","outputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"chainSelector","type":"uint64"}],"name":"isChainSupported","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))":{"details":"Note if msg.value is larger than the required fee (from getFee) we accept the overpayment with no refund.","params":{"destinationChainSelector":"The destination chain ID","message":"The cross-chain CCIP message including data and/or tokens"},"returns":{"_0":"messageId The message ID"}},"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))":{"details":"returns 0 fee on invalid message.","params":{"destinationChainSelector":"The destination chainSelector","message":"The cross-chain CCIP message including data and/or tokens"},"returns":{"fee":"returns guaranteed execution fee for the specified message delivery to destination chain"}},"getSupportedTokens(uint64)":{"params":{"chainSelector":"The chainSelector."},"returns":{"tokens":"The addresses of all tokens that are supported."}},"isChainSupported(uint64)":{"params":{"chainSelector":"The chain to check."},"returns":{"supported":"is true if it is supported, false if not."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))":"96f4e9f9","getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))":"20487ded","getSupportedTokens(uint64)":"fbca3b74","isChainSupported(uint64)":"a48a9058"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientFeeTokenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"}],\"name\":\"UnsupportedDestinationChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct Client.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipSend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct Client.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"isChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"details\":\"Note if msg.value is larger than the required fee (from getFee) we accept the overpayment with no refund.\",\"params\":{\"destinationChainSelector\":\"The destination chain ID\",\"message\":\"The cross-chain CCIP message including data and/or tokens\"},\"returns\":{\"_0\":\"messageId The message ID\"}},\"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"details\":\"returns 0 fee on invalid message.\",\"params\":{\"destinationChainSelector\":\"The destination chainSelector\",\"message\":\"The cross-chain CCIP message including data and/or tokens\"},\"returns\":{\"fee\":\"returns guaranteed execution fee for the specified message delivery to destination chain\"}},\"getSupportedTokens(uint64)\":{\"params\":{\"chainSelector\":\"The chainSelector.\"},\"returns\":{\"tokens\":\"The addresses of all tokens that are supported.\"}},\"isChainSupported(uint64)\":{\"params\":{\"chainSelector\":\"The chain to check.\"},\"returns\":{\"supported\":\"is true if it is supported, false if not.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"notice\":\"Request a message to be sent to the destination chain\"},\"getSupportedTokens(uint64)\":{\"notice\":\"Gets a list of all supported tokens which can be sent or received to/from a given chain id.\"},\"isChainSupported(uint64)\":{\"notice\":\"Checks if the given chain ID is supported for sending/receiving.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":\"IRouterClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9899fab6a40f68408ddf153612c553f2441ea27770176bf71ccce22c40393286\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))":{"notice":"Request a message to be sent to the destination chain"},"getSupportedTokens(uint64)":{"notice":"Gets a list of all supported tokens which can be sent or received to/from a given chain id."},"isChainSupported(uint64)":{"notice":"Checks if the given chain ID is supported for sending/receiving."}},"version":1}}},"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol":{"Client":{"abi":[{"inputs":[],"name":"EVM_EXTRA_ARGS_V1_TAG","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601857607b908161001e823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c633ab8c0d014602657600080fd5b60003660031901126040576397a657c960e01b8152602090f35b600080fdfea2646970667358221220115d398666361c1bc66c462a34635093b8601b12c382ece9aa150cff80bf251364736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x18 JUMPI PUSH1 0x7B SWAP1 DUP2 PUSH2 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x3AB8C0D0 EQ PUSH1 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x40 JUMPI PUSH4 0x97A657C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0x5D CODECOPY DUP7 PUSH7 0x361C1BC66C462A CALLVALUE PUSH4 0x5093B860 SHL SLT 0xC3 DUP3 0xEC 0xE9 0xAA ISZERO 0xC SELFDESTRUCT DUP1 0xBF 0x25 SGT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"82:1465:3:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080806040526004361015601257600080fd5b60003560e01c633ab8c0d014602657600080fd5b60003660031901126040576397a657c960e01b8152602090f35b600080fdfea2646970667358221220115d398666361c1bc66c462a34635093b8601b12c382ece9aa150cff80bf251364736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x3AB8C0D0 EQ PUSH1 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x40 JUMPI PUSH4 0x97A657C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0x5D CODECOPY DUP7 PUSH7 0x361C1BC66C462A CALLVALUE PUSH4 0x5093B860 SHL SLT 0xC3 DUP3 0xEC 0xE9 0xAA ISZERO 0xC SELFDESTRUCT DUP1 0xBF 0x25 SGT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"82:1465:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;82:1465:3;;;;-1:-1:-1;;;82:1465:3;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"24600","executionCost":"infinite","totalCost":"infinite"},"external":{"EVM_EXTRA_ARGS_V1_TAG()":"135"},"internal":{"_argsToBytes(struct Client.EVMExtraArgsV1 memory)":"infinite"}},"methodIdentifiers":{"EVM_EXTRA_ARGS_V1_TAG()":"3ab8c0d0"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EVM_EXTRA_ARGS_V1_TAG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":\"Client\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol":{"FunctionsClient":{"abi":[{"inputs":[],"name":"OnlyRouterCanFulfill","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestSent","type":"event"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"details":"Either response or error parameter will be set, but never both.","params":{"err":"Aggregated error either from the request's source code or from the execution pipeline.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the request's source code."}}},"title":"The Chainlink Functions client contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"title\":\"The Chainlink Functions client contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"notice\":\"Contract developers can inherit this contract in order to make Chainlink Functions requests\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":\"FunctionsClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."}},"notice":"Contract developers can inherit this contract in order to make Chainlink Functions requests","version":1}}},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol":{"IFunctionsClient":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"details":"Either response or error parameter will be set, but never both.","params":{"err":"Aggregated error either from the request's source code or from the execution pipeline.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the request's source code."}}},"title":"Chainlink Functions client interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"title\":\"Chainlink Functions client interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":\"IFunctionsClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."}},"version":1}}},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol":{"IFunctionsRouter":{"abi":[{"inputs":[{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"},{"internalType":"uint96","name":"juelsPerGas","type":"uint96"},{"internalType":"uint96","name":"costWithoutFulfillment","type":"uint96"},{"internalType":"address","name":"transmitter","type":"address"},{"components":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"address","name":"coordinator","type":"address"},{"internalType":"uint96","name":"estimatedTotalCostJuels","type":"uint96"},{"internalType":"address","name":"client","type":"address"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint72","name":"adminFee","type":"uint72"},{"internalType":"uint72","name":"donFee","type":"uint72"},{"internalType":"uint40","name":"gasOverheadBeforeCallback","type":"uint40"},{"internalType":"uint40","name":"gasOverheadAfterCallback","type":"uint40"},{"internalType":"uint32","name":"timeoutTimestamp","type":"uint32"}],"internalType":"struct FunctionsResponse.Commitment","name":"commitment","type":"tuple"}],"name":"fulfill","outputs":[{"internalType":"enum FunctionsResponse.FulfillResult","name":"","type":"uint8"},{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAdminFee","outputs":[{"internalType":"uint72","name":"adminFee","type":"uint72"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllowListId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getContractById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getProposedContractById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProposedContractSet","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"},{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"}],"name":"isValidCallbackGasLimit","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proposalSetIds","type":"bytes32[]"},{"internalType":"address[]","name":"proposalSetAddresses","type":"address[]"}],"name":"proposeContractsUpdate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint16","name":"dataVersion","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"bytes32","name":"donId","type":"bytes32"}],"name":"sendRequest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint16","name":"dataVersion","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"bytes32","name":"donId","type":"bytes32"}],"name":"sendRequestToProposed","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"allowListId","type":"bytes32"}],"name":"setAllowListId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updateContracts","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))":{"details":"Only callable by the Coordinator contract that is saved in the commitment","params":{"commitment":"- The parameters of the request that must be held consistent between request and response time","costWithoutFulfillment":"- The cost of processing the request (in Juels of LINK ), without fulfillment","err":"error from DON consensus","juelsPerGas":"- current rate of juels/gas","response":"response data from DON consensus","transmitter":"- The Node that transmitted the OCR report"},"returns":{"_0":"fulfillResult -","_1":"callbackGasCostJuels -"}},"getAdminFee()":{"returns":{"adminFee":"adminFee"}},"getAllowListId()":{"returns":{"_0":"id - bytes32 id that can be passed to the \"getContractById\" of the Router"}},"getContractById(bytes32)":{"params":{"id":"A bytes32 identifier for the route"},"returns":{"_0":"contract The current contract address"}},"getProposedContractById(bytes32)":{"params":{"id":"A bytes32 identifier for the route"},"returns":{"_0":"contract The current or proposed contract address"}},"getProposedContractSet()":{"returns":{"_0":"ids The identifiers of the contracts to update","_1":"to The addresses of the contracts that will be updated to"}},"isValidCallbackGasLimit(uint64,uint32)":{"params":{"callbackGasLimit":"desired callback gas limit","subscriptionId":"subscription ID"}},"pause()":{"details":"Puts the system into an emergency stopped state.Only callable by owner"},"proposeContractsUpdate(bytes32[],address[])":{"details":"Only callable by owner"},"sendRequest(uint64,bytes,uint16,uint32,bytes32)":{"params":{"callbackGasLimit":"- Gas limit for the fulfillment callback","data":"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request","dataVersion":"- Gas limit for the fulfillment callback","donId":"- An identifier used to determine which route to send the request along","subscriptionId":"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"},"returns":{"_0":"requestId - A unique request identifier"}},"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)":{"params":{"callbackGasLimit":"- Gas limit for the fulfillment callback","data":"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request","dataVersion":"- Gas limit for the fulfillment callback","donId":"- An identifier used to determine which route to send the request along","subscriptionId":"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"},"returns":{"_0":"requestId - A unique request identifier"}},"unpause()":{"details":"Takes the system out of an emergency stopped state.Only callable by owner"},"updateContracts()":{"details":"Only callable by owner"}},"title":"Chainlink Functions Router interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))":"33060529","getAdminFee()":"2a905ccc","getAllowListId()":"aab396bd","getContractById(bytes32)":"a9c9a918","getProposedContractById(bytes32)":"6a2215de","getProposedContractSet()":"badc3eb6","isValidCallbackGasLimit(uint64,uint32)":"10fc49c1","pause()":"8456cb59","proposeContractsUpdate(bytes32[],address[])":"3e871e4d","sendRequest(uint64,bytes,uint16,uint32,bytes32)":"461d2762","sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)":"41db4ca3","setAllowListId(bytes32)":"ea320e0b","unpause()":"3f4ba83a","updateContracts()":"b734c0f4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"juelsPerGas\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"costWithoutFulfillment\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"estimatedTotalCostJuels\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"donFee\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadBeforeCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadAfterCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"timeoutTimestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct FunctionsResponse.Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"}],\"name\":\"fulfill\",\"outputs\":[{\"internalType\":\"enum FunctionsResponse.FulfillResult\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminFee\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowListId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getContractById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getProposedContractById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedContractSet\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"isValidCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalSetIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"proposalSetAddresses\",\"type\":\"address[]\"}],\"name\":\"proposeContractsUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"dataVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"donId\",\"type\":\"bytes32\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"dataVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"donId\",\"type\":\"bytes32\"}],\"name\":\"sendRequestToProposed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allowListId\",\"type\":\"bytes32\"}],\"name\":\"setAllowListId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))\":{\"details\":\"Only callable by the Coordinator contract that is saved in the commitment\",\"params\":{\"commitment\":\"- The parameters of the request that must be held consistent between request and response time\",\"costWithoutFulfillment\":\"- The cost of processing the request (in Juels of LINK ), without fulfillment\",\"err\":\"error from DON consensus\",\"juelsPerGas\":\"- current rate of juels/gas\",\"response\":\"response data from DON consensus\",\"transmitter\":\"- The Node that transmitted the OCR report\"},\"returns\":{\"_0\":\"fulfillResult -\",\"_1\":\"callbackGasCostJuels -\"}},\"getAdminFee()\":{\"returns\":{\"adminFee\":\"adminFee\"}},\"getAllowListId()\":{\"returns\":{\"_0\":\"id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\"}},\"getContractById(bytes32)\":{\"params\":{\"id\":\"A bytes32 identifier for the route\"},\"returns\":{\"_0\":\"contract The current contract address\"}},\"getProposedContractById(bytes32)\":{\"params\":{\"id\":\"A bytes32 identifier for the route\"},\"returns\":{\"_0\":\"contract The current or proposed contract address\"}},\"getProposedContractSet()\":{\"returns\":{\"_0\":\"ids The identifiers of the contracts to update\",\"_1\":\"to The addresses of the contracts that will be updated to\"}},\"isValidCallbackGasLimit(uint64,uint32)\":{\"params\":{\"callbackGasLimit\":\"desired callback gas limit\",\"subscriptionId\":\"subscription ID\"}},\"pause()\":{\"details\":\"Puts the system into an emergency stopped state.Only callable by owner\"},\"proposeContractsUpdate(bytes32[],address[])\":{\"details\":\"Only callable by owner\"},\"sendRequest(uint64,bytes,uint16,uint32,bytes32)\":{\"params\":{\"callbackGasLimit\":\"- Gas limit for the fulfillment callback\",\"data\":\"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"dataVersion\":\"- Gas limit for the fulfillment callback\",\"donId\":\"- An identifier used to determine which route to send the request along\",\"subscriptionId\":\"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"requestId - A unique request identifier\"}},\"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)\":{\"params\":{\"callbackGasLimit\":\"- Gas limit for the fulfillment callback\",\"data\":\"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"dataVersion\":\"- Gas limit for the fulfillment callback\",\"donId\":\"- An identifier used to determine which route to send the request along\",\"subscriptionId\":\"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"requestId - A unique request identifier\"}},\"unpause()\":{\"details\":\"Takes the system out of an emergency stopped state.Only callable by owner\"},\"updateContracts()\":{\"details\":\"Only callable by owner\"}},\"title\":\"Chainlink Functions Router interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))\":{\"notice\":\"Fulfill the request by: - calling back the data that the Oracle returned to the client contract - pay the DON for processing the request\"},\"getAdminFee()\":{\"notice\":\"Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\"},\"getAllowListId()\":{\"notice\":\"The identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions\"},\"getContractById(bytes32)\":{\"notice\":\"Get the current contract given an ID\"},\"getProposedContractById(bytes32)\":{\"notice\":\"Get the proposed next contract given an ID\"},\"getProposedContractSet()\":{\"notice\":\"Return the latest proprosal set\"},\"isValidCallbackGasLimit(uint64,uint32)\":{\"notice\":\"Validate requested gas limit is below the subscription max.\"},\"proposeContractsUpdate(bytes32[],address[])\":{\"notice\":\"Proposes one or more updates to the contract routes\"},\"sendRequest(uint64,bytes,uint16,uint32,bytes32)\":{\"notice\":\"Sends a request using the provided subscriptionId\"},\"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)\":{\"notice\":\"Sends a request to the proposed contracts\"},\"setAllowListId(bytes32)\":{\"notice\":\"Set the identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions\"},\"updateContracts()\":{\"notice\":\"Updates the current contract routes to the proposed contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":\"IFunctionsRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))":{"notice":"Fulfill the request by: - calling back the data that the Oracle returned to the client contract - pay the DON for processing the request"},"getAdminFee()":{"notice":"Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network"},"getAllowListId()":{"notice":"The identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions"},"getContractById(bytes32)":{"notice":"Get the current contract given an ID"},"getProposedContractById(bytes32)":{"notice":"Get the proposed next contract given an ID"},"getProposedContractSet()":{"notice":"Return the latest proprosal set"},"isValidCallbackGasLimit(uint64,uint32)":{"notice":"Validate requested gas limit is below the subscription max."},"proposeContractsUpdate(bytes32[],address[])":{"notice":"Proposes one or more updates to the contract routes"},"sendRequest(uint64,bytes,uint16,uint32,bytes32)":{"notice":"Sends a request using the provided subscriptionId"},"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)":{"notice":"Sends a request to the proposed contracts"},"setAllowListId(bytes32)":{"notice":"Set the identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions"},"updateContracts()":{"notice":"Updates the current contract routes to the proposed contracts"}},"version":1}}},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol":{"IFunctionsSubscriptions":{"abi":[{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"consumer","type":"address"}],"name":"createSubscriptionWithConsumer","outputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"client","type":"address"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"name":"getConsumer","outputs":[{"components":[{"internalType":"bool","name":"allowed","type":"bool"},{"internalType":"uint64","name":"initiatedRequests","type":"uint64"},{"internalType":"uint64","name":"completedRequests","type":"uint64"}],"internalType":"struct IFunctionsSubscriptions.Consumer","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"name":"getFlags","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"name":"getSubscription","outputs":[{"components":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint96","name":"blockedBalance","type":"uint96"},{"internalType":"address","name":"proposedOwner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"},{"internalType":"bytes32","name":"flags","type":"bytes32"}],"internalType":"struct IFunctionsSubscriptions.Subscription","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSubscriptionCount","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionIdStart","type":"uint64"},{"internalType":"uint64","name":"subscriptionIdEnd","type":"uint64"}],"name":"getSubscriptionsInRange","outputs":[{"components":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint96","name":"blockedBalance","type":"uint96"},{"internalType":"address","name":"proposedOwner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"},{"internalType":"bytes32","name":"flags","type":"bytes32"}],"internalType":"struct IFunctionsSubscriptions.Subscription[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBalance","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"}],"name":"oracleWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"name":"ownerCancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"proposeSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"recoverFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes32","name":"flags","type":"bytes32"}],"name":"setFlags","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"address","name":"coordinator","type":"address"},{"internalType":"uint96","name":"estimatedTotalCostJuels","type":"uint96"},{"internalType":"address","name":"client","type":"address"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint72","name":"adminFee","type":"uint72"},{"internalType":"uint72","name":"donFee","type":"uint72"},{"internalType":"uint40","name":"gasOverheadBeforeCallback","type":"uint40"},{"internalType":"uint40","name":"gasOverheadAfterCallback","type":"uint40"},{"internalType":"uint32","name":"timeoutTimestamp","type":"uint32"}],"internalType":"struct FunctionsResponse.Commitment[]","name":"requestsToTimeoutByCommitment","type":"tuple[]"}],"name":"timeoutRequests","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.","params":{"subscriptionId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"details":"Only callable by the Subscription's owner","params":{"consumer":"- New consumer which can use the subscription","subscriptionId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"details":"Only callable by the Subscription's owner","params":{"subscriptionId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));","returns":{"_0":"subscriptionId - A unique subscription id."}},"createSubscriptionWithConsumer(address)":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));","returns":{"subscriptionId":"- A unique subscription id."}},"getConsumer(address,uint64)":{"params":{"client":"- the consumer contract address","subscriptionId":"- the ID of the subscription"},"returns":{"_0":"consumer - see IFunctionsSubscriptions.Consumer for more information on the structure"}},"getFlags(uint64)":{"params":{"subscriptionId":"- ID of the subscription"},"returns":{"_0":"flags - current flag values"}},"getSubscription(uint64)":{"params":{"subscriptionId":"- the ID of the subscription"},"returns":{"_0":"subscription - see IFunctionsSubscriptions.Subscription for more information on the structure"}},"getSubscriptionCount()":{"returns":{"_0":"count - total number of subscriptions in the system"}},"getSubscriptionsInRange(uint64,uint64)":{"params":{"subscriptionIdEnd":"- the ID of the subscription to end the range at","subscriptionIdStart":"- the ID of the subscription to start the range at"},"returns":{"_0":"subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure"}},"getTotalBalance()":{"returns":{"_0":"totalBalance - total Juels of LINK held by the contract"}},"oracleWithdraw(address,uint96)":{"params":{"amount":"amount to withdraw","recipient":"where to send the funds"}},"ownerCancelSubscription(uint64)":{"details":"Only callable by the Router Ownernotably can be called even if there are pending requests, outstanding ones may fail onchain","params":{"subscriptionId":"subscription id"}},"pendingRequestExists(uint64)":{"details":"Looping is bounded to MAX_CONSUMERS*(number of DONs).Used to disable subscription canceling while outstanding request are present.","params":{"subscriptionId":"- ID of the subscription"},"returns":{"_0":"true if there exists at least one unfulfilled request for the subscription, false otherwise."}},"proposeSubscriptionOwnerTransfer(uint64,address)":{"details":"Only callable by the Subscription's owner","params":{"newOwner":"- proposed new owner of the subscription","subscriptionId":"- ID of the subscription"}},"recoverFunds(address)":{"details":"Only callable by the Router Owner","params":{"to":"address to send link to"}},"removeConsumer(uint64,address)":{"details":"Only callable by the Subscription's owner","params":{"consumer":"- Consumer to remove from the subscription","subscriptionId":"- ID of the subscription"}},"setFlags(uint64,bytes32)":{"params":{"flags":"- desired flag values","subscriptionId":"- ID of the subscription"}},"timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])":{"details":"The commitment can be found on the \"OracleRequest\" event created when sending the request.","params":{"requestsToTimeoutByCommitment":"- A list of request commitments to time out"}}},"title":"Chainlink Functions Subscription interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","createSubscriptionWithConsumer(address)":"cc77470a","getConsumer(address,uint64)":"674603d0","getFlags(uint64)":"55fedefa","getSubscription(uint64)":"a47c7696","getSubscriptionCount()":"66419970","getSubscriptionsInRange(uint64,uint64)":"ec2454e5","getTotalBalance()":"12b58349","oracleWithdraw(address,uint96)":"66316d8d","ownerCancelSubscription(uint64)":"02bcc5b6","pendingRequestExists(uint64)":"e82ad7d4","proposeSubscriptionOwnerTransfer(uint64,address)":"4b8832d3","recoverFunds(address)":"e72f6e30","removeConsumer(uint64,address)":"9f87fad7","setFlags(uint64,bytes32)":"1ded3b36","timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])":"e82622aa"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"createSubscriptionWithConsumer\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"getConsumer\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"initiatedRequests\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"completedRequests\",\"type\":\"uint64\"}],\"internalType\":\"struct IFunctionsSubscriptions.Consumer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"blockedBalance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"flags\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFunctionsSubscriptions.Subscription\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionIdStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionIdEnd\",\"type\":\"uint64\"}],\"name\":\"getSubscriptionsInRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"blockedBalance\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"flags\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFunctionsSubscriptions.Subscription[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"oracleWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"ownerCancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"flags\",\"type\":\"bytes32\"}],\"name\":\"setFlags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"estimatedTotalCostJuels\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"donFee\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadBeforeCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadAfterCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"timeoutTimestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct FunctionsResponse.Commitment[]\",\"name\":\"requestsToTimeoutByCommitment\",\"type\":\"tuple[]\"}],\"name\":\"timeoutRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\",\"params\":{\"subscriptionId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subscriptionId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"subscriptionId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));\",\"returns\":{\"_0\":\"subscriptionId - A unique subscription id.\"}},\"createSubscriptionWithConsumer(address)\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(ROUTER),amount,abi.encode(subscriptionId));\",\"returns\":{\"subscriptionId\":\"- A unique subscription id.\"}},\"getConsumer(address,uint64)\":{\"params\":{\"client\":\"- the consumer contract address\",\"subscriptionId\":\"- the ID of the subscription\"},\"returns\":{\"_0\":\"consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\"}},\"getFlags(uint64)\":{\"params\":{\"subscriptionId\":\"- ID of the subscription\"},\"returns\":{\"_0\":\"flags - current flag values\"}},\"getSubscription(uint64)\":{\"params\":{\"subscriptionId\":\"- the ID of the subscription\"},\"returns\":{\"_0\":\"subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\"}},\"getSubscriptionCount()\":{\"returns\":{\"_0\":\"count - total number of subscriptions in the system\"}},\"getSubscriptionsInRange(uint64,uint64)\":{\"params\":{\"subscriptionIdEnd\":\"- the ID of the subscription to end the range at\",\"subscriptionIdStart\":\"- the ID of the subscription to start the range at\"},\"returns\":{\"_0\":\"subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\"}},\"getTotalBalance()\":{\"returns\":{\"_0\":\"totalBalance - total Juels of LINK held by the contract\"}},\"oracleWithdraw(address,uint96)\":{\"params\":{\"amount\":\"amount to withdraw\",\"recipient\":\"where to send the funds\"}},\"ownerCancelSubscription(uint64)\":{\"details\":\"Only callable by the Router Ownernotably can be called even if there are pending requests, outstanding ones may fail onchain\",\"params\":{\"subscriptionId\":\"subscription id\"}},\"pendingRequestExists(uint64)\":{\"details\":\"Looping is bounded to MAX_CONSUMERS*(number of DONs).Used to disable subscription canceling while outstanding request are present.\",\"params\":{\"subscriptionId\":\"- ID of the subscription\"},\"returns\":{\"_0\":\"true if there exists at least one unfulfilled request for the subscription, false otherwise.\"}},\"proposeSubscriptionOwnerTransfer(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subscriptionId\":\"- ID of the subscription\"}},\"recoverFunds(address)\":{\"details\":\"Only callable by the Router Owner\",\"params\":{\"to\":\"address to send link to\"}},\"removeConsumer(uint64,address)\":{\"details\":\"Only callable by the Subscription's owner\",\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subscriptionId\":\"- ID of the subscription\"}},\"setFlags(uint64,bytes32)\":{\"params\":{\"flags\":\"- desired flag values\",\"subscriptionId\":\"- ID of the subscription\"}},\"timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])\":{\"details\":\"The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\",\"params\":{\"requestsToTimeoutByCommitment\":\"- A list of request commitments to time out\"}}},\"title\":\"Chainlink Functions Subscription interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Accept an ownership transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a Chainlink Functions subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a new subscription.\"},\"createSubscriptionWithConsumer(address)\":{\"notice\":\"Create a new subscription and add a consumer.\"},\"getConsumer(address,uint64)\":{\"notice\":\"Get details about a consumer of a subscription.\"},\"getFlags(uint64)\":{\"notice\":\"Get flags for a given subscription.\"},\"getSubscription(uint64)\":{\"notice\":\"Get details about a subscription.\"},\"getSubscriptionCount()\":{\"notice\":\"Get details about the total number of subscription accounts\"},\"getSubscriptionsInRange(uint64,uint64)\":{\"notice\":\"Retrieve details about multiple subscriptions using an inclusive range\"},\"getTotalBalance()\":{\"notice\":\"Get details about the total amount of LINK within the system\"},\"oracleWithdraw(address,uint96)\":{\"notice\":\"Oracle withdraw LINK earned through fulfilling requestsIf amount is 0 the full balance will be withdrawnBoth signing and transmitting wallets will have a balance to withdraw\"},\"ownerCancelSubscription(uint64)\":{\"notice\":\"Owner cancel subscription, sends remaining link directly to the subscription owner.\"},\"pendingRequestExists(uint64)\":{\"notice\":\"Check to see if there exists a request commitment for all consumers for a given sub.\"},\"proposeSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Propose a new owner for a subscription.\"},\"recoverFunds(address)\":{\"notice\":\"Recover link sent with transfer instead of transferAndCall.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a Chainlink Functions subscription.\"},\"setFlags(uint64,bytes32)\":{\"notice\":\"Set subscription specific flags for a subscription. Each byte of the flag is used to represent a resource tier that the subscription can utilize.\"},\"timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])\":{\"notice\":\"Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":\"IFunctionsSubscriptions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Accept an ownership transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a Chainlink Functions subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a new subscription."},"createSubscriptionWithConsumer(address)":{"notice":"Create a new subscription and add a consumer."},"getConsumer(address,uint64)":{"notice":"Get details about a consumer of a subscription."},"getFlags(uint64)":{"notice":"Get flags for a given subscription."},"getSubscription(uint64)":{"notice":"Get details about a subscription."},"getSubscriptionCount()":{"notice":"Get details about the total number of subscription accounts"},"getSubscriptionsInRange(uint64,uint64)":{"notice":"Retrieve details about multiple subscriptions using an inclusive range"},"getTotalBalance()":{"notice":"Get details about the total amount of LINK within the system"},"oracleWithdraw(address,uint96)":{"notice":"Oracle withdraw LINK earned through fulfilling requestsIf amount is 0 the full balance will be withdrawnBoth signing and transmitting wallets will have a balance to withdraw"},"ownerCancelSubscription(uint64)":{"notice":"Owner cancel subscription, sends remaining link directly to the subscription owner."},"pendingRequestExists(uint64)":{"notice":"Check to see if there exists a request commitment for all consumers for a given sub."},"proposeSubscriptionOwnerTransfer(uint64,address)":{"notice":"Propose a new owner for a subscription."},"recoverFunds(address)":{"notice":"Recover link sent with transfer instead of transferAndCall."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a Chainlink Functions subscription."},"setFlags(uint64,bytes32)":{"notice":"Set subscription specific flags for a subscription. Each byte of the flag is used to represent a resource tier that the subscription can utilize."},"timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])":{"notice":"Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled"}},"version":1}}},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol":{"FunctionsRequest":{"abi":[{"inputs":[],"name":"EmptyArgs","type":"error"},{"inputs":[],"name":"EmptySecrets","type":"error"},{"inputs":[],"name":"EmptySource","type":"error"},{"inputs":[],"name":"NoInlineSecrets","type":"error"},{"inputs":[],"name":"REQUEST_DATA_VERSION","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"Library for encoding the input data of a Functions request into CBOR","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346018576075908161001e823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c635d641dfc14602657600080fd5b6000366003190112603a5780600160209252f35b600080fdfea264697066735822122090cb4ec279128aeb33bdbaeda4794d59e11d1cf27534803e6aa73590f4d22ced64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x18 JUMPI PUSH1 0x75 SWAP1 DUP2 PUSH2 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x5D641DFC EQ PUSH1 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3A JUMPI DUP1 PUSH1 0x1 PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 0xCB 0x4E 0xC2 PUSH26 0x128AEB33BDBAEDA4794D59E11D1CF27534803E6AA73590F4D22C 0xED PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"215:6086:10:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080806040526004361015601257600080fd5b60003560e01c635d641dfc14602657600080fd5b6000366003190112603a5780600160209252f35b600080fdfea264697066735822122090cb4ec279128aeb33bdbaeda4794d59e11d1cf27534803e6aa73590f4d22ced64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x5D641DFC EQ PUSH1 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3A JUMPI DUP1 PUSH1 0x1 PUSH1 0x20 SWAP3 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 0xCB 0x4E 0xC2 PUSH26 0x128AEB33BDBAEDA4794D59E11D1CF27534803E6AA73590F4D22C 0xED PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"215:6086:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;215:6086:10;;;;;325:1;215:6086;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"23400","executionCost":"infinite","totalCost":"infinite"},"external":{"REQUEST_DATA_VERSION()":"129"},"internal":{"addDONHostedSecrets(struct FunctionsRequest.Request memory,uint8,uint64)":"infinite","addSecretsReference(struct FunctionsRequest.Request memory,bytes memory)":"infinite","encodeCBOR(struct FunctionsRequest.Request memory)":"infinite","initializeRequest(struct FunctionsRequest.Request memory,enum FunctionsRequest.Location,enum FunctionsRequest.CodeLanguage,string memory)":"infinite","initializeRequestForInlineJavaScript(struct FunctionsRequest.Request memory,string memory)":"infinite","setArgs(struct FunctionsRequest.Request memory,string memory[] memory)":"infinite","setBytesArgs(struct FunctionsRequest.Request memory,bytes memory[] memory)":"infinite"}},"methodIdentifiers":{"REQUEST_DATA_VERSION()":"5d641dfc"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REQUEST_DATA_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for encoding the input data of a Functions request into CBOR\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":\"FunctionsRequest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol":{"FunctionsResponse":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Library of types that are used for fulfillment of a Functions request","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220a1ab43a2da74d8388e45b5c681cca2b3e56deae43eca1778380e884f2879387164736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 0xAB NUMBER LOG2 0xDA PUSH21 0xD8388E45B5C681CCA2B3E56DEAE43ECA1778380E88 0x4F 0x28 PUSH26 0x387164736F6C6343000814003300000000000000000000000000 ","sourceMap":"223:3258:11:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220a1ab43a2da74d8388e45b5c681cca2b3e56deae43eca1778380e884f2879387164736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 0xAB NUMBER LOG2 0xDA PUSH21 0xD8388E45B5C681CCA2B3E56DEAE43ECA1778380E88 0x4F 0x28 PUSH26 0x387164736F6C6343000814003300000000000000000000000000 ","sourceMap":"223:3258:11:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library of types that are used for fulfillment of a Functions request\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":\"FunctionsResponse\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol":{"Buffer":{"abi":[],"devdoc":{"details":"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for appending to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220c6fc7afc592957b516f7d7b58f0106aa65b6cba725e99a2ab1c4467aed1dc38164736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 0xFC PUSH27 0xFC592957B516F7D7B58F0106AA65B6CBA725E99A2AB1C4467AED1D 0xC3 DUP2 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"445:8435:13:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220c6fc7afc592957b516f7d7b58f0106aa65b6cba725e99a2ab1c4467aed1dc38164736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC6 0xFC PUSH27 0xFC592957B516F7D7B58F0106AA65B6CBA725E99A2AB1C4467AED1D 0xC3 DUP2 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"445:8435:13:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"append(struct Buffer.buffer memory,bytes memory)":"infinite","append(struct Buffer.buffer memory,bytes memory,uint256)":"infinite","append(struct Buffer.buffer memory,bytes32,uint256)":"infinite","appendBytes20(struct Buffer.buffer memory,bytes20)":"infinite","appendBytes32(struct Buffer.buffer memory,bytes32)":"infinite","appendInt(struct Buffer.buffer memory,uint256,uint256)":"infinite","appendUint8(struct Buffer.buffer memory,uint8)":"infinite","fromBytes(bytes memory)":"infinite","init(struct Buffer.buffer memory,uint256)":"infinite","resize(struct Buffer.buffer memory,uint256)":"infinite","truncate(struct Buffer.buffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for appending to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":\"Buffer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol":{"CBOR":{"abi":[],"devdoc":{"details":"A library for populating CBOR encoded payload in Solidity. https://datatracker.ietf.org/doc/html/rfc7049 The library offers various write* and start* methods to encode values of different types. The resulted buffer can be obtained with data() method. Encoding of primitive types is staightforward, whereas encoding of sequences can result in an invalid CBOR if start/write/end flow is violated. For the purpose of gas saving, the library does not verify start/write/end flow internally, except for nested start/end pairs.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212207aea26e062270370ccfd76391b7abb04f529f9577ab34706fb25dd4d5b2c6cf564736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xEA26E062270370CCFD76391B7ABB04F529F9577AB34706FB25DD4D JUMPDEST 0x2C PUSH13 0xF564736F6C6343000814003300 ","sourceMap":"666:6764:14:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212207aea26e062270370ccfd76391b7abb04f529f9577ab34706fb25dd4d5b2c6cf564736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xEA26E062270370CCFD76391B7ABB04F529F9577AB34706FB25DD4D JUMPDEST 0x2C PUSH13 0xF564736F6C6343000814003300 ","sourceMap":"666:6764:14:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"create(uint256)":"infinite","data(struct CBOR.CBORBuffer memory)":"infinite","endSequence(struct CBOR.CBORBuffer memory)":"infinite","startArray(struct CBOR.CBORBuffer memory)":"infinite","startFixedArray(struct CBOR.CBORBuffer memory,uint64)":"infinite","startFixedMap(struct CBOR.CBORBuffer memory,uint64)":"infinite","startMap(struct CBOR.CBORBuffer memory)":"infinite","writeBool(struct CBOR.CBORBuffer memory,bool)":"infinite","writeBytes(struct CBOR.CBORBuffer memory,bytes memory)":"infinite","writeContentFree(struct CBOR.CBORBuffer memory,uint8)":"infinite","writeDefiniteLengthType(struct CBOR.CBORBuffer memory,uint8,uint64)":"infinite","writeFixedNumeric(struct CBOR.CBORBuffer memory,uint8,uint64)":"infinite","writeIndefiniteLengthType(struct CBOR.CBORBuffer memory,uint8)":"infinite","writeInt256(struct CBOR.CBORBuffer memory,int256)":"infinite","writeInt64(struct CBOR.CBORBuffer memory,int64)":"infinite","writeKVArray(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeKVBool(struct CBOR.CBORBuffer memory,string memory,bool)":"infinite","writeKVBytes(struct CBOR.CBORBuffer memory,string memory,bytes memory)":"infinite","writeKVInt256(struct CBOR.CBORBuffer memory,string memory,int256)":"infinite","writeKVInt64(struct CBOR.CBORBuffer memory,string memory,int64)":"infinite","writeKVMap(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeKVNull(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeKVString(struct CBOR.CBORBuffer memory,string memory,string memory)":"infinite","writeKVUInt256(struct CBOR.CBORBuffer memory,string memory,uint256)":"infinite","writeKVUInt64(struct CBOR.CBORBuffer memory,string memory,uint64)":"infinite","writeKVUndefined(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeNull(struct CBOR.CBORBuffer memory)":"infinite","writeString(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeUInt256(struct CBOR.CBORBuffer memory,uint256)":"infinite","writeUInt64(struct CBOR.CBORBuffer memory,uint64)":"infinite","writeUndefined(struct CBOR.CBORBuffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for populating CBOR encoded payload in Solidity. https://datatracker.ietf.org/doc/html/rfc7049 The library offers various write* and start* methods to encode values of different types. The resulted buffer can be obtained with data() method. Encoding of primitive types is staightforward, whereas encoding of sequences can result in an invalid CBOR if start/write/end flow is violated. For the purpose of gas saving, the library does not verify start/write/end flow internally, except for nested start/end pairs.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":\"CBOR\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2841,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2843,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2847,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":2851,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2855,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":2861,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212202c92920b95ff65aa793f2a6cb729072c41d92e770eb032455500b0ff1f7277a864736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C SWAP3 SWAP3 SIGNEXTEND SWAP6 SELFDESTRUCT PUSH6 0xAA793F2A6CB7 0x29 SMOD 0x2C COINBASE 0xD9 0x2E PUSH24 0xEB032455500B0FF1F7277A864736F6C6343000814003300 ","sourceMap":"251:2847:21:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212202c92920b95ff65aa793f2a6cb729072c41d92e770eb032455500b0ff1f7277a864736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2C SWAP3 SWAP3 SIGNEXTEND SWAP6 SELFDESTRUCT PUSH6 0xAA793F2A6CB7 0x29 SMOD 0x2C COINBASE 0xD9 0x2E PUSH24 0xEB032455500B0FF1F7277A864736F6C6343000814003300 ","sourceMap":"251:2847:21:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122012c133ef50a1088e596f2a16708e36baf6d837de2bde41fdf13598dcf0ccce2164736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xC1 CALLER 0xEF POP LOG1 ADDMOD DUP15 MSIZE PUSH16 0x2A16708E36BAF6D837DE2BDE41FDF135 SWAP9 0xDC CREATE 0xCC 0xCE 0x21 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:24:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122012c133ef50a1088e596f2a16708e36baf6d837de2bde41fdf13598dcf0ccce2164736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xC1 CALLER 0xEF POP LOG1 ADDMOD DUP15 MSIZE PUSH16 0x2A16708E36BAF6D837DE2BDE41FDF135 SWAP9 0xDC CREATE 0xCC 0xCE 0x21 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:24:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212202f9d21d37e7577d4ac43154e026d10e58732e7efd50f37eb4047ffc0806f663364736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F SWAP14 0x21 0xD3 PUSH31 0x7577D4AC43154E026D10E58732E7EFD50F37EB4047FFC0806F663364736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"216:1047:25:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212202f9d21d37e7577d4ac43154e026d10e58732e7efd50f37eb4047ffc0806f663364736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F SWAP14 0x21 0xD3 PUSH31 0x7577D4AC43154E026D10E58732E7EFD50F37EB4047FFC0806F663364736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"216:1047:25:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HorizonFujiAssistant.sol":{"HorizonFujiAssistant":{"abi":[{"inputs":[{"internalType":"string","name":"s","type":"string"}],"name":"stringToUint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234610016576103ad908161001c8239f35b600080fdfe60806004908136101561001157600080fd5b6000803560e01c631bd951551461002757600080fd5b34610324576020928360031936011261032757803567ffffffffffffffff928382116103245736602383011215610324578183013584811161031157601f8101601f19908116603f01168601948511868610176103115760409485528086526024923684838301011161030d57818392858a9301838a0137870101529182908180805b88518210156102ff576001600160f81b0319602960f91b816100cc858d610350565b51161480156102e6575b80156102cd575b80156102b4575b6102a957600b60fa1b816100f8858d610350565b51161461029a57600360fc1b8161010f858d610350565b51161015908161027f575b501561023d57600a9081810291818304149015171561021857602f19610140838b610350565b5160f81c0160ff9081811161022b5716810180911161021857908661016f575b6101699061032b565b906100aa565b916101799061032b565b9160028310610160575095965093909192935b6002811061019e575b87868851908152f35b600181036101db575050600a840293808504600a14901517156101cb57505050905b903880808080610195565b634e487b7160e01b825260119052fd5b159081610210575b506101f2575b505050906101c0565b6064840293808504606414901517156101cb575050503880806101e9565b9050386101e3565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8752601186528787fd5b875162461bcd60e51b81528085018b9052601a818801527f54686174206973206e6f7420612076616c696420737472696e670000000000006044820152606490fd5b603960f81b9150610290848c610350565b511611153861011a565b5090955061016960019661032b565b50906101699061032b565b50600160fd1b816102c5858d610350565b5116146100e4565b50601760f91b816102de858d610350565b5116146100dd565b50600960fa1b816102f7858d610350565b5116146100d6565b96975050939091929361018c565b8280fd5b634e487b7160e01b825260418452602482fd5b80fd5b5080fd5b600019811461033a5760010190565b634e487b7160e01b600052601160045260246000fd5b908151811015610361570160200190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220cac90a1ca0eeb3e1300c7bd5e14b8f16862af9038b9a11363db1383c3a218d0f64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x3AD SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x1BD95155 EQ PUSH2 0x27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x324 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x327 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x324 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 DUP4 ADD CALLDATALOAD DUP5 DUP2 GT PUSH2 0x311 JUMPI PUSH1 0x1F DUP2 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP7 ADD SWAP5 DUP6 GT DUP7 DUP7 LT OR PUSH2 0x311 JUMPI PUSH1 0x40 SWAP5 DUP6 MSTORE DUP1 DUP7 MSTORE PUSH1 0x24 SWAP3 CALLDATASIZE DUP5 DUP4 DUP4 ADD ADD GT PUSH2 0x30D JUMPI DUP2 DUP4 SWAP3 DUP6 DUP11 SWAP4 ADD DUP4 DUP11 ADD CALLDATACOPY DUP8 ADD ADD MSTORE SWAP2 DUP3 SWAP1 DUP2 DUP1 DUP1 JUMPDEST DUP9 MLOAD DUP3 LT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0x29 PUSH1 0xF9 SHL DUP2 PUSH2 0xCC DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ DUP1 ISZERO PUSH2 0x2E6 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2CD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2B4 JUMPI JUMPDEST PUSH2 0x2A9 JUMPI PUSH1 0xB PUSH1 0xFA SHL DUP2 PUSH2 0xF8 DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0x29A JUMPI PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH2 0x10F DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND LT ISZERO SWAP1 DUP2 PUSH2 0x27F JUMPI JUMPDEST POP ISZERO PUSH2 0x23D JUMPI PUSH1 0xA SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x218 JUMPI PUSH1 0x2F NOT PUSH2 0x140 DUP4 DUP12 PUSH2 0x350 JUMP JUMPDEST MLOAD PUSH1 0xF8 SHR ADD PUSH1 0xFF SWAP1 DUP2 DUP2 GT PUSH2 0x22B JUMPI AND DUP2 ADD DUP1 SWAP2 GT PUSH2 0x218 JUMPI SWAP1 DUP7 PUSH2 0x16F JUMPI JUMPDEST PUSH2 0x169 SWAP1 PUSH2 0x32B JUMP JUMPDEST SWAP1 PUSH2 0xAA JUMP JUMPDEST SWAP2 PUSH2 0x179 SWAP1 PUSH2 0x32B JUMP JUMPDEST SWAP2 PUSH1 0x2 DUP4 LT PUSH2 0x160 JUMPI POP SWAP6 SWAP7 POP SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x19E JUMPI JUMPDEST DUP8 DUP7 DUP9 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1DB JUMPI POP POP PUSH1 0xA DUP5 MUL SWAP4 DUP1 DUP6 DIV PUSH1 0xA EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1CB JUMPI POP POP POP SWAP1 JUMPDEST SWAP1 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x195 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 SWAP1 MSTORE REVERT JUMPDEST ISZERO SWAP1 DUP2 PUSH2 0x210 JUMPI JUMPDEST POP PUSH2 0x1F2 JUMPI JUMPDEST POP POP POP SWAP1 PUSH2 0x1C0 JUMP JUMPDEST PUSH1 0x64 DUP5 MUL SWAP4 DUP1 DUP6 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1CB JUMPI POP POP POP CODESIZE DUP1 DUP1 PUSH2 0x1E9 JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x1E3 JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE POP PUSH1 0x11 SWAP1 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x11 DUP7 MSTORE DUP8 DUP8 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP12 SWAP1 MSTORE PUSH1 0x1A DUP2 DUP9 ADD MSTORE PUSH32 0x54686174206973206E6F7420612076616C696420737472696E67000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x39 PUSH1 0xF8 SHL SWAP2 POP PUSH2 0x290 DUP5 DUP13 PUSH2 0x350 JUMP JUMPDEST MLOAD AND GT ISZERO CODESIZE PUSH2 0x11A JUMP JUMPDEST POP SWAP1 SWAP6 POP PUSH2 0x169 PUSH1 0x1 SWAP7 PUSH2 0x32B JUMP JUMPDEST POP SWAP1 PUSH2 0x169 SWAP1 PUSH2 0x32B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFD SHL DUP2 PUSH2 0x2C5 DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0xE4 JUMP JUMPDEST POP PUSH1 0x17 PUSH1 0xF9 SHL DUP2 PUSH2 0x2DE DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0xDD JUMP JUMPDEST POP PUSH1 0x9 PUSH1 0xFA SHL DUP2 PUSH2 0x2F7 DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0xD6 JUMP JUMPDEST SWAP7 SWAP8 POP POP SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x18C JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x33A JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x361 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0xC9 EXP SHR LOG0 0xEE 0xB3 0xE1 ADDRESS 0xC PUSH28 0xD5E14B8F16862AF9038B9A11363DB1383C3A218D0F64736F6C634300 ADDMOD EQ STOP CALLER ","sourceMap":"61:1233:26:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"increment_uint256":{"entryPoint":811,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_bytes":{"entryPoint":848,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806004908136101561001157600080fd5b6000803560e01c631bd951551461002757600080fd5b34610324576020928360031936011261032757803567ffffffffffffffff928382116103245736602383011215610324578183013584811161031157601f8101601f19908116603f01168601948511868610176103115760409485528086526024923684838301011161030d57818392858a9301838a0137870101529182908180805b88518210156102ff576001600160f81b0319602960f91b816100cc858d610350565b51161480156102e6575b80156102cd575b80156102b4575b6102a957600b60fa1b816100f8858d610350565b51161461029a57600360fc1b8161010f858d610350565b51161015908161027f575b501561023d57600a9081810291818304149015171561021857602f19610140838b610350565b5160f81c0160ff9081811161022b5716810180911161021857908661016f575b6101699061032b565b906100aa565b916101799061032b565b9160028310610160575095965093909192935b6002811061019e575b87868851908152f35b600181036101db575050600a840293808504600a14901517156101cb57505050905b903880808080610195565b634e487b7160e01b825260119052fd5b159081610210575b506101f2575b505050906101c0565b6064840293808504606414901517156101cb575050503880806101e9565b9050386101e3565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8752601186528787fd5b875162461bcd60e51b81528085018b9052601a818801527f54686174206973206e6f7420612076616c696420737472696e670000000000006044820152606490fd5b603960f81b9150610290848c610350565b511611153861011a565b5090955061016960019661032b565b50906101699061032b565b50600160fd1b816102c5858d610350565b5116146100e4565b50601760f91b816102de858d610350565b5116146100dd565b50600960fa1b816102f7858d610350565b5116146100d6565b96975050939091929361018c565b8280fd5b634e487b7160e01b825260418452602482fd5b80fd5b5080fd5b600019811461033a5760010190565b634e487b7160e01b600052601160045260246000fd5b908151811015610361570160200190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220cac90a1ca0eeb3e1300c7bd5e14b8f16862af9038b9a11363db1383c3a218d0f64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x1BD95155 EQ PUSH2 0x27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x324 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x327 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x324 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 DUP4 ADD CALLDATALOAD DUP5 DUP2 GT PUSH2 0x311 JUMPI PUSH1 0x1F DUP2 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP7 ADD SWAP5 DUP6 GT DUP7 DUP7 LT OR PUSH2 0x311 JUMPI PUSH1 0x40 SWAP5 DUP6 MSTORE DUP1 DUP7 MSTORE PUSH1 0x24 SWAP3 CALLDATASIZE DUP5 DUP4 DUP4 ADD ADD GT PUSH2 0x30D JUMPI DUP2 DUP4 SWAP3 DUP6 DUP11 SWAP4 ADD DUP4 DUP11 ADD CALLDATACOPY DUP8 ADD ADD MSTORE SWAP2 DUP3 SWAP1 DUP2 DUP1 DUP1 JUMPDEST DUP9 MLOAD DUP3 LT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH1 0x29 PUSH1 0xF9 SHL DUP2 PUSH2 0xCC DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ DUP1 ISZERO PUSH2 0x2E6 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2CD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2B4 JUMPI JUMPDEST PUSH2 0x2A9 JUMPI PUSH1 0xB PUSH1 0xFA SHL DUP2 PUSH2 0xF8 DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0x29A JUMPI PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH2 0x10F DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND LT ISZERO SWAP1 DUP2 PUSH2 0x27F JUMPI JUMPDEST POP ISZERO PUSH2 0x23D JUMPI PUSH1 0xA SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x218 JUMPI PUSH1 0x2F NOT PUSH2 0x140 DUP4 DUP12 PUSH2 0x350 JUMP JUMPDEST MLOAD PUSH1 0xF8 SHR ADD PUSH1 0xFF SWAP1 DUP2 DUP2 GT PUSH2 0x22B JUMPI AND DUP2 ADD DUP1 SWAP2 GT PUSH2 0x218 JUMPI SWAP1 DUP7 PUSH2 0x16F JUMPI JUMPDEST PUSH2 0x169 SWAP1 PUSH2 0x32B JUMP JUMPDEST SWAP1 PUSH2 0xAA JUMP JUMPDEST SWAP2 PUSH2 0x179 SWAP1 PUSH2 0x32B JUMP JUMPDEST SWAP2 PUSH1 0x2 DUP4 LT PUSH2 0x160 JUMPI POP SWAP6 SWAP7 POP SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x19E JUMPI JUMPDEST DUP8 DUP7 DUP9 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1DB JUMPI POP POP PUSH1 0xA DUP5 MUL SWAP4 DUP1 DUP6 DIV PUSH1 0xA EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1CB JUMPI POP POP POP SWAP1 JUMPDEST SWAP1 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x195 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 SWAP1 MSTORE REVERT JUMPDEST ISZERO SWAP1 DUP2 PUSH2 0x210 JUMPI JUMPDEST POP PUSH2 0x1F2 JUMPI JUMPDEST POP POP POP SWAP1 PUSH2 0x1C0 JUMP JUMPDEST PUSH1 0x64 DUP5 MUL SWAP4 DUP1 DUP6 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1CB JUMPI POP POP POP CODESIZE DUP1 DUP1 PUSH2 0x1E9 JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x1E3 JUMP JUMPDEST POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE POP PUSH1 0x11 SWAP1 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x11 DUP7 MSTORE DUP8 DUP8 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP12 SWAP1 MSTORE PUSH1 0x1A DUP2 DUP9 ADD MSTORE PUSH32 0x54686174206973206E6F7420612076616C696420737472696E67000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x39 PUSH1 0xF8 SHL SWAP2 POP PUSH2 0x290 DUP5 DUP13 PUSH2 0x350 JUMP JUMPDEST MLOAD AND GT ISZERO CODESIZE PUSH2 0x11A JUMP JUMPDEST POP SWAP1 SWAP6 POP PUSH2 0x169 PUSH1 0x1 SWAP7 PUSH2 0x32B JUMP JUMPDEST POP SWAP1 PUSH2 0x169 SWAP1 PUSH2 0x32B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFD SHL DUP2 PUSH2 0x2C5 DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0xE4 JUMP JUMPDEST POP PUSH1 0x17 PUSH1 0xF9 SHL DUP2 PUSH2 0x2DE DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0xDD JUMP JUMPDEST POP PUSH1 0x9 PUSH1 0xFA SHL DUP2 PUSH2 0x2F7 DUP6 DUP14 PUSH2 0x350 JUMP JUMPDEST MLOAD AND EQ PUSH2 0xD6 JUMP JUMPDEST SWAP7 SWAP8 POP POP SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x18C JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x33A JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x361 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0xC9 EXP SHR LOG0 0xEE 0xB3 0xE1 ADDRESS 0xC PUSH28 0xD5E14B8F16862AF9038B9A11363DB1383C3A218D0F64736F6C634300 ADDMOD EQ STOP CALLER ","sourceMap":"61:1233:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;61:1233:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;242:15;;;;;;369:3;61:1233;;355:12;;;;;-1:-1:-1;;;;;;;;;61:1233:26;393:4;;;;:::i;:::-;61:1233;;393:11;:26;;;;369:3;393:41;;;;369:3;393:56;;;;369:3;389:105;;-1:-1:-1;;;514:4:26;;;;;:::i;:::-;61:1233;;514:11;510:98;;-1:-1:-1;;;628:4:26;;;;;:::i;:::-;61:1233;;628:12;;:28;;;;369:3;-1:-1:-1;624:400:26;;;714:2;61:1233;;;;;;;;;;;;;;;-1:-1:-1;;726:4:26;;;;:::i;:::-;61:1233;;;;;;;;;;;;;;;;;;;696:41;;756:176;;624:400;369:3;624:400;369:3;:::i;:::-;343:10;;;756:176;797:14;;;;:::i;:::-;838:17;854:1;838:17;;756:176;834:79;884:5;;;;;;;;;338:697;1066:1;1051:16;;1047:211;;338:697;61:1233;;;;;;;;1047:211;1104:1;1088:17;;1104:1;;61:1233;;1136:2;61:1233;;;;;;1136:2;61:1233;;;;;;;1126:12;;;1084:163;;1047:211;;;;;;;;61:1233;-1:-1:-1;;;61:1233:26;;;;;;1084:163;1164:17;:33;;;;1084:163;1160:87;;;1084:163;;;;;;;1160:87;1228:3;61:1233;;;;;;1228:3;61:1233;;;;;;;1218:13;;;1160:87;;;;;1164:33;;;;;;61:1233;-1:-1:-1;;;;;61:1233:26;;-1:-1:-1;61:1233:26;;;;;-1:-1:-1;;;61:1233:26;;;;;;;;624:400;61:1233;;-1:-1:-1;;;972:36:26;;;;;61:1233;;;;;;;;;;;;;;;972:36;628:28;-1:-1:-1;;;61:1233:26;-1:-1:-1;644:4:26;;;;:::i;:::-;61:1233;;644:12;;628:28;;;510:98;546:19;;;;369:3;561:4;584:8;369:3;:::i;389:105::-;470:8;;369:3;470:8;369:3;:::i;393:56::-;-1:-1:-1;;;;438:4:26;;;;;:::i;:::-;61:1233;;438:11;393:56;;:41;-1:-1:-1;;;;423:4:26;;;;;:::i;:::-;61:1233;;423:11;393:41;;:26;-1:-1:-1;;;;408:4:26;;;;;:::i;:::-;61:1233;;408:11;393:26;;355:12;;;;;;;;;;;;61:1233;;;;;-1:-1:-1;;;61:1233:26;;;;;;;;;;;;;;;;-1:-1:-1;;61:1233:26;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"188200","executionCost":"239","totalCost":"188439"},"external":{"stringToUint(string)":"infinite"}},"methodIdentifiers":{"stringToUint(string)":"1bd95155"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"stringToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HorizonFujiAssistant.sol\":\"HorizonFujiAssistant\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/HorizonFujiAssistant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ncontract HorizonFujiAssistant {\\r\\n\\r\\n    /*CONVERTER FUNCTION */\\r\\n    function stringToUint(string memory s) public pure returns (uint) {\\r\\n        bytes memory b = bytes(s);\\r\\n        uint result = 0;\\r\\n        bool decimalFound = false;\\r\\n        uint decimalPlace = 0;\\r\\n\\r\\n        for (uint i = 0; i < b.length; i++) {\\r\\n            if (b[i] == 'R' || b[i] == '$' || b[i] == '.' || b[i] == ' ') {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (b[i] == ',') {\\r\\n                decimalFound = true;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (b[i] >= 0x30 && b[i] <= 0x39) { // ASCII '0' \\u00e9 48\\r\\n                result = result * 10 + (uint8(b[i]) - 48);\\r\\n                if (decimalFound) {\\r\\n                    decimalPlace++;\\r\\n                    if (decimalPlace >= 2) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                revert(\\\"That is not a valid string\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (decimalPlace < 2) {\\r\\n            if (decimalPlace == 1) {\\r\\n                result *= 10;\\r\\n            } else if (decimalPlace == 0 && decimalFound) {\\r\\n                result *= 100;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4fa30f43f33199dd8cee65b262be676306db81180e91c46dd626fea4e58d4f1c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HorizonFujiR.sol":{"HorizonFujiR":{"abi":[{"inputs":[{"internalType":"address","name":"_linkToken","type":"address"},{"internalType":"address","name":"_routerCCIP","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"FailedToWithdrawEth","type":"error"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"InvalidRouter","type":"error"},{"inputs":[],"name":"NothingToWithdraw","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"provisoryOwner","type":"address"},{"indexed":false,"internalType":"uint256","name":"_rwaId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_titleId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_drawNumber","type":"uint256"}],"name":"EnsuranceAdd","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"messageId","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"string","name":"text","type":"string"}],"name":"MessageReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_contractId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_rwaValue","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_referenceValue","type":"uint256"}],"name":"PriceLowEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_contractId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_rwaValue","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_referenceValue","type":"uint256"}],"name":"RWAPriceAtMoment","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_titleId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_drawNumber","type":"uint256"},{"indexed":false,"internalType":"address","name":"_rwaOwner","type":"address"},{"indexed":false,"internalType":"uint256","name":"_colateralId","type":"uint256"}],"name":"RWARefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_rwaId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_rwaValue","type":"uint256"}],"name":"TheRwaValueIsLessThanTheMinimumNeeded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_contractId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_rwaValue","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rwaValue","type":"uint256"}],"name":"TitleCancelledTheRWAWillBeSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_rwaId","type":"uint256"},{"indexed":false,"internalType":"string[]","name":"args","type":"string[]"}],"name":"VerifyingRwaValue","type":"event"},{"inputs":[{"internalType":"uint256","name":"_titleId","type":"uint256"},{"internalType":"uint256","name":"_contractId","type":"uint256"},{"internalType":"uint256","name":"_drawNumber","type":"uint256"},{"internalType":"uint256","name":"_rwaId","type":"uint256"}],"name":"addCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_receiverAddress","type":"address"}],"name":"addReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"}],"name":"addSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_sourceChainSelector","type":"uint64"}],"name":"addSourceChain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]"}],"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple"}],"name":"ccipReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLastReceivedMessageDetails","outputs":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"bytes","name":"text","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"permissionsInfo","outputs":[{"internalType":"uint256","name":"idTitle","type":"uint256"},{"internalType":"uint256","name":"drawNumber","type":"uint256"},{"internalType":"uint256","name":"contractId","type":"uint256"},{"internalType":"address","name":"rwaOwner","type":"address"},{"internalType":"uint256","name":"ensuranceValueNeeded","type":"uint256"},{"internalType":"uint256","name":"ensureValueNow","type":"uint256"},{"internalType":"uint256","name":"colateralId","type":"uint256"},{"internalType":"bytes32","name":"lastRequestId","type":"bytes32"},{"internalType":"uint256","name":"lastRequestTime","type":"uint256"},{"internalType":"uint256","name":"lastResponseTime","type":"uint256"},{"internalType":"bool","name":"colateralLocked","type":"bool"},{"internalType":"bool","name":"isPermission","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"}],"name":"removeSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_sourceChainSelector","type":"uint64"}],"name":"removelistSourceChain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"_titleId","type":"uint256"},{"internalType":"uint256","name":"_contractId","type":"uint256"},{"internalType":"uint256","name":"_drawNumber","type":"uint256"},{"internalType":"uint256","name":"_rwaId","type":"uint256"},{"internalType":"string[]","name":"args","type":"string[]"}],"name":"verifyColateralValue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistedSenders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"name":"whitelistedSourceChains","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"},{"internalType":"address","name":"_token","type":"address"}],"name":"withdrawToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"addSender(address)":{"details":"Whitelists a sender.","params":{"_sender":"The address of the sender."}},"addSourceChain(uint64)":{"details":"Whitelists a chain for transactions.","params":{"_sourceChainSelector":"The selector of the source chain to be whitelisted."}},"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}},"getRouter()":{"returns":{"_0":"i_router address"}},"removeSender(address)":{"details":"Denylists a sender.","params":{"_sender":"The address of the sender."}},"removelistSourceChain(uint64)":{"details":"Denylists a chain for transactions.","params":{"_sourceChainSelector":"The selector of the source chain to be denylisted."}},"supportsInterface(bytes4)":{"params":{"interfaceId":"The interfaceId to check"},"returns":{"_0":"true if the interfaceId is supported"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":251,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 CALLVALUE PUSH3 0xE0 JUMPI PUSH1 0x1F PUSH3 0x1DA1 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH3 0xE5 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0xE0 JUMPI PUSH1 0x20 DUP2 PUSH3 0x53 PUSH3 0x5B SWAP4 PUSH3 0xFB JUMP JUMPDEST POP ADD PUSH3 0xFB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0xC7 JUMPI PUSH1 0x80 MSTORE PUSH20 0x5FA769922A6428758FB44453815E2C436C57C3C7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT DUP2 DUP2 PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE DUP2 DUP2 PUSH1 0xB SLOAD AND OR PUSH1 0xB SSTORE PUSH1 0xC SLOAD AND OR PUSH1 0xC SSTORE PUSH1 0x40 MLOAD PUSH2 0x1C90 SWAP1 DUP2 PUSH3 0x111 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x28D ADD MSTORE PUSH2 0xBD8 ADD MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35FDCCCD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0xE0 JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x1778 JUMPI POP DUP1 PUSH4 0x263596A5 EQ PUSH2 0x173D JUMPI DUP1 PUSH4 0x272EFC69 EQ PUSH2 0x16FE JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0x1603 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1560 JUMPI DUP1 PUSH4 0x69D83ED1 EQ PUSH2 0x1527 JUMPI DUP1 PUSH4 0x7DC91A02 EQ PUSH2 0x14EA JUMPI DUP1 PUSH4 0x85572FFB EQ PUSH2 0xBA4 JUMPI DUP1 PUSH4 0x92365CE4 EQ PUSH2 0x743 JUMPI DUP1 PUSH4 0x95871C8F EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xB0F479A1 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xB2F87643 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xB697F531 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xC5EC1C7A EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xE9982C39 EQ PUSH2 0x111 JUMPI PUSH4 0xFF46ED53 SUB PUSH2 0xF JUMPI CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xF7 PUSH2 0x182B JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x40 PUSH2 0x180 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xFF DUP2 SLOAD SWAP2 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x3 DUP4 ADD SLOAD AND PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP2 PUSH1 0x8 DUP7 ADD SLOAD SWAP4 PUSH1 0x9 DUP8 ADD SLOAD SWAP6 PUSH1 0xB PUSH1 0xA DUP10 ADD SLOAD SWAP9 ADD SLOAD SWAP9 PUSH1 0x40 MLOAD SWAP12 DUP13 MSTORE PUSH1 0x20 DUP13 ADD MSTORE PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x60 DUP11 ADD MSTORE PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0x120 DUP5 ADD MSTORE DUP2 DUP2 AND ISZERO ISZERO PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH2 0x160 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x1E8 PUSH2 0x182B JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x224 PUSH2 0x1815 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x260 PUSH2 0x1815 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x24 SWAP5 PUSH2 0x314 DUP2 PUSH2 0x306 DUP10 DUP10 CALLDATALOAD DUP10 DUP8 SWAP2 PUSH1 0x60 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x186A JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP1 DUP8 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH1 0x40 DUP8 KECCAK256 SWAP1 PUSH2 0x33B PUSH1 0x1 PUSH1 0xFF PUSH1 0xB DUP6 ADD SLOAD PUSH1 0x8 SHR AND ISZERO ISZERO EQ PUSH2 0x1B05 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x64B975DB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP2 SWAP3 DUP4 SWAP1 DUP11 SWAP1 DUP3 SWAP1 DUP9 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x738 JUMPI DUP11 SWAP3 DUP12 SWAP3 PUSH2 0x6FA JUMPI JUMPDEST POP PUSH1 0x4 DUP2 ADD SLOAD DUP4 LT SWAP3 DUP4 PUSH2 0x6BF JUMPI PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xA ADD SSTORE PUSH2 0x644 JUMPI DUP8 DUP3 PUSH1 0xC SLOAD AND DUP1 EXTCODESIZE ISZERO PUSH2 0x640 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x635 JUMPI PUSH2 0x61D JUMPI JUMPDEST POP POP DUP6 DUP4 DUP4 PUSH1 0xC SLOAD AND PUSH1 0x40 MLOAD SWAP9 DUP10 DUP1 SWAP3 PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP3 MSTORE DUP10 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x594 JUMPI DUP10 SWAP8 PUSH2 0x5EE JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 SWAP1 PUSH1 0x60 DUP2 ADD DUP4 DUP2 GT DUP3 DUP3 LT OR PUSH2 0x5D9 JUMPI PUSH1 0x40 MSTORE DUP7 DUP2 MSTORE DUP6 DUP2 ADD DUP5 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x5C6 JUMPI DUP1 PUSH1 0x1 PUSH2 0x460 SWAP3 ADD PUSH1 0x6 SSTORE PUSH2 0x1C09 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 PUSH2 0x5B3 JUMPI SWAP2 PUSH1 0x2 SWAP2 PUSH2 0x48F SWAP5 SWAP4 MLOAD DUP5 SSTORE MLOAD PUSH1 0x1 DUP5 ADD SSTORE MLOAD ISZERO ISZERO SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP4 PUSH1 0xC SLOAD AND PUSH1 0x40 MLOAD SWAP4 DUP7 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE DUP6 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP4 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP4 DUP4 LT SWAP1 DUP4 GT OR PUSH2 0x59F JUMPI POP DUP1 PUSH1 0x40 MSTORE DUP4 DUP2 DUP5 PUSH1 0xA SLOAD AND DUP6 PUSH1 0x2 SLOAD AND PUSH4 0xA30E377 PUSH1 0xE4 SHL DUP4 MSTORE PUSH8 0xADECC60412CE25A5 PUSH1 0x84 DUP8 ADD MSTORE PUSH1 0xA4 DUP7 ADD MSTORE PUSH1 0x60 PUSH1 0xC4 DUP7 ADD MSTORE DUP2 DUP13 PUSH1 0x7F NOT DUP8 PUSH2 0x503 PUSH1 0xE4 DUP3 ADD DUP3 PUSH2 0x17F0 JUMP JUMPDEST SUB ADD SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x594 JUMPI PUSH2 0x556 JUMPI JUMPDEST POP POP SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH32 0x93BFFD1BDE7AFE8C47A27012597F0DC2C5CCEA5FC1323D424E13C21065D594E8 SWAP7 SWAP4 PUSH1 0x40 MLOAD SWAP6 AND DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP1 DUP4 SWAP8 SWAP5 SWAP3 SWAP7 SWAP6 SWAP4 SWAP2 DUP3 SWAP1 RETURNDATASIZE DUP5 GT PUSH2 0x58C JUMPI JUMPDEST DUP2 PUSH2 0x573 SWAP2 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x587 JUMPI SWAP2 SWAP5 SWAP1 SWAP3 SWAP4 CODESIZE DUP1 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x569 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x4 DUP15 SWAP1 MSTORE DUP5 DUP15 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP5 DUP15 REVERT JUMPDEST DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x60F SWAP2 SWAP8 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x616 JUMPI JUMPDEST PUSH2 0x607 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1B51 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x40F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x626 SWAP1 PUSH2 0x1841 JUMP JUMPDEST PUSH2 0x631 JUMPI DUP8 CODESIZE PUSH2 0x3DF JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x48 DUP2 DUP9 ADD MSTORE PUSH32 0x54686520656E737572616E6365206D7573742068617665206174206C65617374 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2031302074696D6573207468652076616C7565206F66207468652076616C7565 PUSH1 0x64 DUP3 ADD MSTORE PUSH8 0x206E656564656421 PUSH1 0xC0 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST SWAP7 SWAP8 POP POP POP POP POP POP PUSH32 0x90D31678EC129D3863BE095922EF7B97386BCCA9B61E15D2D53347CDDCEEB0A7 SWAP5 POP PUSH1 0x40 DUP1 SWAP5 POP MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP3 POP SWAP1 POP PUSH1 0x40 DUP3 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x730 JUMPI JUMPDEST DUP2 PUSH2 0x717 PUSH1 0x40 SWAP4 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x72C JUMPI DUP5 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 CODESIZE PUSH2 0x37E JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x70A JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP13 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x84 CALLDATALOAD GT PUSH2 0x10E JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x84 CALLDATALOAD ADD SLT ISZERO PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0x10E JUMPI CALLDATASIZE PUSH1 0x24 PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x5 SHL PUSH1 0x84 CALLDATALOAD ADD ADD GT PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7CB DUP2 PUSH2 0x306 PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD DUP8 SWAP2 PUSH1 0x60 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x7F1 PUSH1 0x1 PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO ISZERO EQ PUSH2 0x1B05 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xB99 JUMPI DUP4 SWAP2 PUSH2 0xB7A JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xB22 JUMPI DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 CALLDATALOAD DUP2 SSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x88E PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x7 DUP4 ADD PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x84 CALLDATALOAD ADD SWAP1 DUP2 PUSH1 0x7 DUP3 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 DUP5 SWAP2 JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP4 LT PUSH2 0x9B6 JUMPI POP POP POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xB SLOAD AND SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 SWAP4 PUSH4 0x4C8F60A3 PUSH1 0xE0 SHL DUP3 MSTORE DUP3 PUSH1 0x4 DUP4 ADD MSTORE DUP2 DUP8 DUP2 PUSH2 0x8ED PUSH1 0x24 DUP3 ADD PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP12 PUSH2 0x1B70 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x9AB JUMPI DUP5 SWAP3 PUSH2 0x955 JUMPI JUMPDEST POP SWAP2 PUSH2 0x94F SWAP2 PUSH1 0x8 PUSH32 0xCC6833FD9787745C083EDFCC3AE70E4CD35AB78CF84F127388A790FD6ED17FBB SWAP5 ADD SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x64 CALLDATALOAD DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SUB SWAP1 LOG1 DUP1 RETURN JUMPDEST SWAP2 POP SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x9A3 JUMPI JUMPDEST DUP2 PUSH2 0x971 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x587 JUMPI SWAP1 MLOAD SWAP1 SWAP2 PUSH32 0xCC6833FD9787745C083EDFCC3AE70E4CD35AB78CF84F127388A790FD6ED17FBB PUSH2 0x8FF JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x964 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x84 CALLDATALOAD CALLDATASIZE SUB PUSH1 0x42 NOT ADD DUP2 CALLDATALOAD SLT ISZERO PUSH2 0xB1E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD GT PUSH2 0xB1E JUMPI PUSH1 0x84 CALLDATALOAD DUP2 CALLDATALOAD ADD PUSH1 0x24 DUP2 ADD CALLDATALOAD CALLDATASIZE SUB PUSH1 0x44 SWAP1 SWAP2 ADD SGT PUSH2 0xB1E JUMPI PUSH2 0xA12 PUSH1 0x24 DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD PUSH2 0xA0C DUP5 SLOAD PUSH2 0x1924 JUMP JUMPDEST DUP5 PUSH2 0x1975 JUMP JUMPDEST DUP6 PUSH1 0x1F PUSH1 0x24 DUP4 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD GT PUSH1 0x1 EQ PUSH2 0xA80 JUMPI PUSH1 0x20 PUSH1 0x1 SWAP3 DUP4 SWAP3 DUP10 SWAP1 PUSH1 0x24 DUP4 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD PUSH2 0xA6D JUMPI JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x84 CALLDATALOAD DUP4 CALLDATALOAD ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x3 DUP2 SWAP1 SHL SWAP2 SWAP1 SWAP2 SHR NOT SWAP1 SWAP2 AND SWAP1 DUP5 SHL OR DUP6 SSTORE JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0x44 SWAP2 POP DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD ADD CALLDATALOAD CODESIZE PUSH2 0xA3F JUMP JUMPDEST DUP3 DUP8 MSTORE PUSH1 0x20 DUP8 KECCAK256 SWAP1 DUP8 JUMPDEST PUSH1 0x84 CALLDATALOAD DUP5 CALLDATALOAD ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x1F NOT AND DUP2 LT PUSH2 0xAFE JUMPI POP PUSH1 0x1 SWAP3 DUP4 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x84 CALLDATALOAD DUP4 CALLDATALOAD ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xAD3 JUMPI JUMPDEST POP POP DUP3 PUSH1 0x24 DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD DUP2 SHL ADD DUP6 SSTORE PUSH2 0xA61 JUMP JUMPDEST PUSH1 0x44 PUSH1 0x0 NOT PUSH1 0xF8 PUSH1 0x24 DUP7 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x3 SHL AND SHR NOT SWAP2 DUP5 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD ADD CALLDATALOAD AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xABC JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 PUSH1 0x44 DUP7 DUP9 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD ADD CALLDATALOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0xA8A JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420626520746865206F776E6572206F662074686520696E66 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6F726D65642052574121 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0xB93 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x616 JUMPI PUSH2 0x607 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST CODESIZE PUSH2 0x82D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x3 NOT SWAP1 PUSH1 0x20 CALLDATASIZE DUP4 ADD SLT PUSH2 0x10E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x640 JUMPI PUSH1 0xA0 SWAP1 DUP4 CALLDATASIZE SUB ADD SLT PUSH2 0x10E JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x14D2 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0xA0 DUP4 ADD DUP4 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1466 JUMPI PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 ADD CALLDATALOAD DUP4 MSTORE PUSH1 0x24 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x12FC JUMPI PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x44 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x12FC JUMPI PUSH2 0xC67 SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP5 ADD ADD PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x64 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x12FC JUMPI PUSH2 0xC8F SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP5 ADD ADD PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x84 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x12FC JUMPI ADD CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x640 JUMPI PUSH1 0x4 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1466 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xCDB PUSH1 0x20 DUP4 PUSH1 0x5 SHL ADD DUP5 PUSH2 0x186A JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP3 PUSH1 0x6 SHL DUP3 ADD ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x104D JUMPI PUSH1 0x24 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x147E JUMPI POP POP POP PUSH1 0x80 DUP4 ADD MSTORE DUP2 MLOAD DUP2 SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP1 MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP2 DUP5 ADD SWAP4 SUB SLT PUSH2 0x12FC JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x147A JUMPI ADD DUP2 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0x12FC JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xD54 SWAP3 SWAP2 PUSH1 0x40 ADD PUSH2 0x18ED JUMP JUMPDEST SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1466 JUMPI PUSH2 0xD70 PUSH1 0x1 SLOAD PUSH2 0x1924 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x140D JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x138C JUMPI DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x1381 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 SSTORE JUMPDEST PUSH2 0xDB0 PUSH2 0x19AF JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x12FC JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xDD3 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD PUSH2 0x1A68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP4 ADD GT OR PUSH2 0x136D JUMPI PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP6 DUP2 MSTORE DUP4 PUSH1 0x5 DUP2 MUL DIV PUSH1 0x5 EQ DUP5 ISZERO OR ISZERO PUSH2 0x1359 JUMPI PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1A0 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x1A0 DUP8 ADD GT OR PUSH2 0x1345 JUMPI PUSH1 0x5 SWAP1 PUSH2 0x1A0 DUP7 ADD PUSH1 0x40 MSTORE DUP8 DUP7 MSTORE DUP8 PUSH1 0x20 DUP8 ADD MSTORE DUP8 PUSH1 0x40 DUP8 ADD MSTORE DUP8 PUSH1 0x60 DUP8 ADD MSTORE MUL PUSH1 0x80 DUP6 ADD MSTORE DUP6 PUSH1 0xA0 DUP6 ADD MSTORE DUP6 PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD MSTORE DUP5 PUSH2 0x100 DUP5 ADD MSTORE DUP5 PUSH2 0x120 DUP5 ADD MSTORE DUP5 PUSH2 0x140 DUP5 ADD MSTORE DUP1 ISZERO ISZERO PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x1 PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x1 DUP2 ISZERO ISZERO EQ PUSH1 0x0 EQ PUSH2 0x1144 JUMPI POP DUP4 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP2 MLOAD DUP2 SSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0x7 DUP2 ADD PUSH1 0xE0 DUP4 ADD MLOAD SWAP1 PUSH1 0x20 DUP3 MLOAD SWAP3 PUSH2 0xF0E DUP5 DUP5 PUSH2 0x1A75 JUMP JUMPDEST ADD SWAP1 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x1051 JUMPI POP POP POP POP PUSH1 0xB PUSH2 0x180 SWAP2 PUSH2 0x100 DUP5 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0x120 DUP5 ADD MLOAD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x140 DUP5 ADD MLOAD PUSH1 0xA DUP3 ADD SSTORE ADD SWAP2 PUSH2 0xF6A PUSH2 0x160 DUP3 ADD MLOAD ISZERO ISZERO DUP5 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD DUP2 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR SWAP1 SSTORE JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND SWAP2 PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x104D JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x104D JUMPI PUSH1 0x60 ADD MLOAD SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP2 DUP6 ADD SWAP5 SUB SLT PUSH2 0xB1E JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1049 JUMPI ADD DUP3 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0xB1E JUMPI PUSH32 0xB1E312A29937CC11967B0E4A346FEF1AE132424EBABA9DC6D90249DBA053E87C SWAP3 DUP2 PUSH1 0x40 PUSH1 0x20 PUSH2 0x1026 SWAP5 ADD MLOAD SWAP2 ADD PUSH2 0x18ED JUMP JUMPDEST SWAP1 PUSH2 0x1043 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x17F0 JUMP JUMPDEST SUB SWAP1 LOG3 DUP1 RETURN JUMPDEST DUP7 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1130 JUMPI PUSH2 0x1078 DUP3 PUSH2 0x1072 DUP7 SLOAD PUSH2 0x1924 JUMP JUMPDEST DUP7 PUSH2 0x1975 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP11 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x10C3 JUMPI SWAP3 DUP1 PUSH1 0x20 SWAP4 PUSH1 0x1 SWAP7 SWAP4 DUP8 SWAP7 SWAP3 PUSH2 0x10B8 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP6 SSTORE JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0xF19 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1098 JUMP JUMPDEST DUP6 SWAP1 MSTORE PUSH1 0x20 DUP12 KECCAK256 SWAP2 SWAP1 DUP12 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x1118 JUMPI POP DUP4 PUSH1 0x20 SWAP4 PUSH1 0x1 SWAP7 SWAP4 DUP8 SWAP7 SWAP4 DUP8 SWAP5 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x10FF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP6 SSTORE PUSH2 0x10AC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x10F2 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x10CE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST SWAP1 SWAP2 POP SWAP3 SWAP2 SWAP3 ISZERO PUSH2 0x1157 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF81 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP6 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO ISZERO SUB PUSH2 0x1300 JUMPI DUP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP3 DUP3 JUMPDEST DUP3 PUSH1 0x1 PUSH2 0x1191 DUP4 PUSH2 0x1C09 JUMP JUMPDEST POP ADD SLOAD EQ PUSH2 0x11ED JUMPI DUP3 PUSH1 0x1 PUSH2 0x11A5 DUP4 PUSH2 0x1C09 JUMP JUMPDEST POP ADD SLOAD EQ PUSH2 0x11D3 JUMPI JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x11BF JUMPI PUSH1 0x1 ADD PUSH2 0x1185 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x2 PUSH2 0x11DE DUP3 PUSH2 0x1C09 JUMP JUMPDEST POP ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH2 0x11AE JUMP JUMPDEST POP SWAP2 SWAP3 SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC SLOAD AND PUSH1 0x3 DUP3 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 SLOAD AND DUP6 PUSH1 0x6 DUP6 ADD SWAP3 DUP4 SLOAD SWAP1 DUP1 EXTCODESIZE ISZERO PUSH2 0x12FC JUMPI PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x12F1 JUMPI PUSH2 0x12B7 JUMPI JUMPDEST POP SWAP2 PUSH1 0x80 SWAP2 PUSH32 0xE9C6E81492BC93FE089982A07565C4A3A6E0C968C5C00B0CD69A8DAC9BF37B49 SWAP4 PUSH1 0x1 DUP4 SLOAD SWAP4 ADD SLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND SWAP1 SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE LOG1 SWAP1 CODESIZE PUSH2 0x1150 JUMP JUMPDEST SWAP2 PUSH32 0xE9C6E81492BC93FE089982A07565C4A3A6E0C968C5C00B0CD69A8DAC9BF37B49 SWAP4 SWAP2 SWAP6 PUSH2 0x12E7 PUSH1 0x80 SWAP5 PUSH2 0x1841 JUMP JUMPDEST SWAP6 SWAP2 SWAP4 POP SWAP2 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973207065726D697373696F6E206469646E742065786973747321000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x1 DUP5 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 PUSH1 0x1F NOT DUP4 AND DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x13F5 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x13DC JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 SSTORE PUSH2 0xDA8 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x13CE JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x1456 SWAP1 PUSH1 0x1 DUP6 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x145C JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x195E JUMP JUMPDEST CODESIZE PUSH2 0xD79 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1449 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP4 CALLDATASIZE SUB SLT PUSH2 0x104D JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1345 JUMPI PUSH1 0x40 MSTORE DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1049 JUMPI SWAP2 DUP2 PUSH1 0x40 SWAP4 PUSH1 0x20 SWAP4 MSTORE DUP3 DUP7 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35FDCCCD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x1513 PUSH2 0x182B JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x8 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1549 PUSH2 0x1815 JUMP JUMPDEST AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH2 0x157A PUSH2 0x1815 JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0x15F1 JUMPI DUP3 DUP1 DUP1 DUP1 DUP6 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x15EC JUMPI RETURNDATASIZE PUSH2 0x159A DUP2 PUSH2 0x188B JUMP JUMPDEST SWAP1 PUSH2 0x15A8 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 MSTORE DUP5 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x15BB JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9D11F563 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x15B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x686827B PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH2 0x161D PUSH2 0x1815 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x147A JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP6 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x12F1 JUMPI DUP7 SWAP6 PUSH2 0x16CF JUMPI JUMPDEST POP DUP5 ISZERO PUSH2 0x15F1 JUMPI DUP4 SWAP3 DUP7 PUSH1 0x44 SWAP3 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xB99 JUMPI PUSH2 0x169C JUMPI DUP3 DUP1 RETURN JUMPDEST DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x16C8 JUMPI JUMPDEST PUSH2 0x16B0 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x640 JUMPI PUSH2 0x16C1 SWAP1 PUSH2 0x1A68 JUMP JUMPDEST POP CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST POP RETURNDATASIZE PUSH2 0x16A6 JUMP JUMPDEST SWAP1 SWAP5 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x16F7 JUMPI JUMPDEST PUSH2 0x16E7 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xB1E JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x1662 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x16DD JUMP JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1729 PUSH2 0x1815 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x9 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x10E JUMPI SLOAD PUSH2 0x1757 PUSH2 0x19AF JUMP JUMPDEST SWAP1 PUSH2 0x1774 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x17F0 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x640 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x640 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x12FC JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x85572FFB PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x17BC JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x17B5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x17E0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17D0 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1809 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x587 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x587 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1854 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1854 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1854 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x587 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x18BD DUP3 PUSH2 0x188B JUMP JUMPDEST SWAP3 PUSH2 0x18CB PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x186A JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x587 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x18FA DUP2 PUSH2 0x188B JUMP JUMPDEST SWAP2 PUSH2 0x1908 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x186A JUMP JUMPDEST DUP3 SWAP5 DUP3 DUP5 MSTORE DUP3 DUP3 ADD GT PUSH2 0x587 JUMPI PUSH1 0x20 PUSH2 0x1922 SWAP4 ADD SWAP1 PUSH2 0x17CD JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1954 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x193E JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1933 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1969 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x195E JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x1984 JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x1922 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x145C JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x195E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x1 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x19C5 DUP5 PUSH2 0x1924 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x1A46 JUMPI POP PUSH1 0x1 EQ PUSH2 0x19E9 JUMPI JUMPDEST POP PUSH2 0x1922 SWAP3 POP SUB DUP4 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE SWAP2 POP PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP5 DUP4 LT PUSH2 0x1A2B JUMPI POP PUSH2 0x1922 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x19DC JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x1A12 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x1922 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x19DC JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x587 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x1854 JUMPI DUP1 SLOAD SWAP2 DUP1 DUP3 SSTORE DUP3 DUP2 LT PUSH2 0x1A92 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 DUP2 DUP4 KECCAK256 SWAP4 DUP5 ADD SWAP4 ADD JUMPDEST DUP4 DUP2 LT PUSH2 0x1AB0 JUMPI POP POP POP POP JUMP JUMPDEST DUP1 DUP4 PUSH2 0x1ABE PUSH1 0x1 SWAP4 SLOAD PUSH2 0x1924 JUMP JUMPDEST DUP1 PUSH2 0x1ACC JUMPI JUMPDEST POP POP ADD PUSH2 0x1AA3 JUMP JUMPDEST PUSH1 0x1F DUP1 DUP3 GT DUP6 EQ PUSH2 0x1AE3 JUMPI POP POP DUP2 SSTORE JUMPDEST DUP4 CODESIZE PUSH2 0x1AC4 JUMP JUMPDEST PUSH2 0x1AFC SWAP1 DUP5 DUP5 MSTORE DUP7 DUP5 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD DUP6 DUP4 ADD PUSH2 0x195E JUMP JUMPDEST DUP2 DUP4 SSTORE SSTORE PUSH2 0x1ADC JUMP JUMPDEST ISZERO PUSH2 0x1B0C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973207065726D697373696F6E206469646E277420657869737473210000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x587 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x587 JUMPI SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 PUSH1 0x5 DUP4 SWAP1 SHL DUP5 ADD DUP2 ADD SWAP4 SWAP2 SWAP3 SWAP1 PUSH1 0x0 DUP2 DUP5 ADD DUP6 JUMPDEST DUP5 DUP4 LT PUSH2 0x1B9A JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 PUSH1 0x1F NOT DUP1 DUP9 DUP4 SUB ADD DUP5 MSTORE DUP9 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x587 JUMPI DUP4 ADD DUP7 DUP2 ADD SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x587 JUMPI DUP1 CALLDATASIZE SUB DUP3 SGT PUSH2 0x587 JUMPI DUP4 DUP9 SWAP4 PUSH1 0x1F DUP4 DUP1 DUP8 SWAP7 DUP8 SWAP7 PUSH1 0x1 SWAP11 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP10 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x1B89 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x1C44 JUMPI PUSH1 0x3 SWAP1 PUSH1 0x6 PUSH1 0x0 MSTORE MUL PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 DUP14 SSTORE LOG1 0x4B 0xDE PUSH22 0x421EC57699E8B4A3FAE48ABF6E7B1DA20AC91CF55AFA PUSH22 0x58A664736F6C63430008140033000000000000000000 ","sourceMap":"1119:12451:27:-:0;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;1119:12451:27;;528:20:0;524:58;;588:17;;3420:42:27;1119:12451;;;;;;;;3399:65;1119:12451;;;3399:65;1119:12451;;;3519:69;1119:12451;;;3519:69;1119:12451;3627:59;1119:12451;;;3627:59;1119:12451;;;;;;;;;588:17:0;1119:12451:27;;;;;;;;;;;524:58:0;1119:12451:27;;-1:-1:-1;;;557:25:0;;-1:-1:-1;557:25:0;;;1119:12451:27;;;557:25:0;1119:12451:27;-1:-1:-1;1119:12451:27;;;;;;-1:-1:-1;1119:12451:27;;;;;-1:-1:-1;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":6165,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":6993,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_available_length_bytes_fromMemory":{"entryPoint":6381,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":6760,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":6310,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint64":{"entryPoint":6187,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_address_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_array_string_calldata_dyn_calldata":{"entryPoint":7024,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes":{"entryPoint":6128,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_packed_uint256_uint256_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":6283,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":6517,"id":null,"parameterSlots":3,"returnSlots":0},"clear_storage_range_bytes1":{"entryPoint":6494,"id":null,"parameterSlots":2,"returnSlots":0},"copy_array_from_storage_to_memory_bytes":{"entryPoint":6575,"id":null,"parameterSlots":0,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6093,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6436,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6250,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_25897":{"entryPoint":6209,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_2a44":{"entryPoint":6917,"id":null,"parameterSlots":1,"returnSlots":0},"resize_array_array_string_storage_dyn":{"entryPoint":6773,"id":null,"parameterSlots":2,"returnSlots":0},"storage_array_index_access_struct_RwaMonitor_dyn_ptr":{"entryPoint":7177,"id":null,"parameterSlots":1,"returnSlots":2},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"14":[{"length":32,"start":653},{"length":32,"start":3032}]},"linkReferences":{},"object":"608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816301ffc9a71461177857508063263596a51461173d578063272efc69146116fe5780633aeac4e11461160357806351cff8d91461156057806369d83ed1146115275780637dc91a02146114ea57806385572ffb14610ba457806392365ce41461074357806395871c8f146102bc578063b0f479a114610277578063b2f876431461023e578063b697f53114610202578063c5ec1c7a146101c6578063e9982c39146101115763ff46ed530361000f573461010e57602036600319011261010e576001600160401b036100f761182b565b168152600860205260408120805460ff1916905580f35b80fd5b503461010e57602036600319011261010e57604061018091600435815260076020522060ff815491600181015490600281015460018060a01b0360038301541660048301546005840154600685015491600886015493600987015495600b600a890154980154986040519b8c5260208c015260408b015260608a0152608089015260a088015260c087015260e0860152610100850152610120840152818116151561014084015260081c161515610160820152f35b503461010e57602036600319011261010e576001600160401b036101e861182b565b168152600860205260408120805460ff1916600117905580f35b503461010e57602036600319011261010e576001600160a01b03610224611815565b168152600960205260408120805460ff1916600117905580f35b503461010e57602036600319011261010e576001600160a01b03610260611815565b168152600960205260408120805460ff1916905580f35b503461010e578060031936011261010e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461010e57608036600319011261010e57600435604435906064359060405191602080840160249461031481610306898935898791606093918352602083015260408201520190565b03601f19810183528261186a565b51902080875260078252604087209061033b600160ff600b85015460081c16151514611b05565b600b546008830154604080516364b975db60e11b815260048101929092526001600160a01b0394919283908a90829088165afa908115610738578a928b926106fa575b506004810154831092836106bf576005820155600a0155610644578782600c5416803b15610640576040516323b872dd60e01b8152336004820152306024820152604481018790529082908290606490829084905af180156106355761061d575b5050858383600c5416604051988980926331a9108f60e11b82528960048301525afa9687156105945789976105ee575b506040516001600160401b03919060608101838111828210176105d957604052868152858101848152604082019060018252600654600160401b8110156105c6578060016104609201600655611c09565b9390936105b3579160029161048f949351845551600184015551151591019060ff801983541691151516179055565b83600c5416604051938685015260408401528560608401526060835260808301918383109083111761059f575080604052838184600a54168560025416630a30e37760e41b835267adecc60412ce25a5608487015260a4860152606060c4860152818c607f198761050360e48201826117f0565b0301925af1801561059457610556575b50509160809493917f93bffd1bde7afe8c47a27012597f0dc2c5ccea5fc1323d424e13c21065d594e896936040519516855284015260408301526060820152a180f35b90839794929695939182903d841161058c575b816105739161186a565b810103126105875791949092933880610513565b600080fd5b3d9150610569565b6040513d8b823e3d90fd5b634e487b7160e01b60009081526041600452fd5b634e487b7160e01b8e5260048e9052848efd5b634e487b7160e01b8e526041600452848efd5b82634e487b7160e01b60005260416004526000fd5b61060f919750843d8611610616575b610607818361186a565b810190611b51565b953861040f565b503d6105fd565b61062690611841565b6106315787386103df565b8780fd5b6040513d84823e3d90fd5b5080fd5b60405162461bcd60e51b8152600481018490526048818801527f54686520656e737572616e6365206d7573742068617665206174206c6561737460448201527f2031302074696d6573207468652076616c7565206f66207468652076616c7565606482015267206e65656465642160c01b608482015260a490fd5b96975050505050507f90d31678ec129d3863be095922ef7b97386bcca9b61e15d2d53347cddceeb0a79450604080945051928352820152a180f35b925090506040823d604011610730575b816107176040938361186a565b8101031261072c57848251920151903861037e565b8980fd5b3d915061070a565b6040513d8c823e3d90fd5b503461010e5760a036600319011261010e576001600160401b036084351161010e5736602360843501121561010e576001600160401b03608435600401351161010e573660246084356004013560051b60843501011161010e5760405160208101906107cb816103066044356024356004358791606093918352602083015260408201520190565b51902080825260076020526107f1600160ff600b60408620015460081c16151514611b05565b600c546040516331a9108f60e11b8152606435600482015290602090829060249082906001600160a01b03165afa908115610b99578391610b7a575b506001600160a01b03163303610b2257815260076020526040812060043581556024356002820155604435600182015560038101336001600160601b0360a01b825416179055606435600682015561088e6084356004013560078301611a75565b60246084350190816007820184526020842084915b6084356004013583106109b65750505060018060a01b03600b54169060206040518093634c8f60a360e01b82528260048301528187816108ed60248201608435600401358b611b70565b03925af19182156109ab578492610955575b509161094f9160087fcc6833fd9787745c083edfcc3ae70e4cd35ab78cf84f127388a790fd6ed17fbb94015560405191829160643583526040602084015260408301906084356004013590611b70565b0390a180f35b9150916020823d6020116109a3575b816109716020938361186a565b8101031261058757905190917fcc6833fd9787745c083edfcc3ae70e4cd35ab78cf84f127388a790fd6ed17fbb6108ff565b3d9150610964565b6040513d86823e3d90fd5b60843536036042190181351215610b1e576001600160401b036024823560843501013511610b1e5760843581350160248101353603604490910113610b1e57610a1260248235608435010135610a0c8454611924565b84611975565b85601f6024833560843501013511600114610a805760206001928392899060248335608435010135610a6d575b5060001960843583350160240135600381901b9190911c1990911690841b1785555b019201920191906108a3565b6044915082356084350101013538610a3f565b8287526020872090875b60843584350160240135601f19168110610afe5750600192839260209260843583350160240135601f19811610610ad3575b50508260248235608435010135811b018555610a61565b604460001960f86024863560843501013560031b161c19918435608435010101351690553880610abc565b909160206001819260448688356084350101013581550193019101610a8a565b8580fd5b60405162461bcd60e51b815260206004820152602a60248201527f596f75206d75737420626520746865206f776e6572206f662074686520696e666044820152696f726d6564205257412160b01b6064820152608490fd5b610b93915060203d60201161061657610607818361186a565b3861082d565b6040513d85823e3d90fd5b503461010e576003199060203683011261010e57600435916001600160401b0383116106405760a090833603011261010e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036114d2576040519160a083018381106001600160401b03821117611466576040528060040135835260248101356001600160401b03811681036112fc57602084015260448101356001600160401b0381116112fc57610c6790600436918401016118a6565b604084015260648101356001600160401b0381116112fc57610c8f90600436918401016118a6565b60608401526084810135906001600160401b0382116112fc5701366023820112156106405760048101356001600160401b0381116114665760405191610cdb60208360051b018461186a565b8183526024602084019260061b8201019036821161104d57602401915b81831061147e57505050608083015281518155606082015180518101906020818184019303126112fc576020810151906001600160401b03821161147a570181603f820112156112fc576020810151610d5492916040016118ed565b9182516001600160401b03811161146657610d70600154611924565b601f811161140d575b506020601f821160011461138c57839482939492611381575b50508160011b916000199060031b1c1916176001555b610db06119af565b6060818051810103126112fc576020810151610dd3606060408401519301611a68565b6040518060208101106001600160401b0360208301111761136d5760208101604052858152836005810204600514841517156113595760405193846101a08101106001600160401b036101a087011117611345576005906101a086016040528786528760208701528760408701528760608701520260808501528560a08501528560c085015260e08401528461010084015284610120840152846101408401528015156101608401526001610180840152600181151514600014611144575083526007602052604083208151815560208201516001820155604082015160028201556003810160018060a01b036060840151166001600160601b0360a01b8254161790556080820151600482015560a0820151600582015560c082015160068201556007810160e0830151906020825192610f0e8484611a75565b019086526020862086915b8383106110515750505050600b6101809161010084015160088201556101208401516009820155610140840151600a8201550191610f6a6101608201511515849060ff801983541691151516179055565b0151815461ff00191690151560081b61ff00161790555b80516001600160401b0360208301511691604081015160208180518101031261104d57602001516001600160a01b038116919082900361104d5760600151908151820191602081818501940312610b1e576020810151906001600160401b038211611049570182603f82011215610b1e577fb1e312a29937cc11967b0e4a346fef1ae132424ebaba9dc6d90249dba053e87c92816040602061102694015191016118ed565b9061104360405192839283526040602084015260408301906117f0565b0390a380f35b8680fd5b8480fd5b80518051906001600160401b03821161113057611078826110728654611924565b86611975565b6020908a601f84116001146110c3579280602093600196938796926110b8575b5050600019600383901b1c191690841b1785555b01920192019190610f19565b015190503880611098565b85905260208b2091908b5b601f1985168110611118575083602093600196938796938794601f198116106110ff575b505050811b0185556110ac565b015160001960f88460031b161c191690553880806110f2565b919260206001819286850151815501940192016110ce565b634e487b7160e01b8a52604160045260248afd5b90915092919215611157575b5090610f81565b8082526007602052600160ff600b60408520015460081c161515036113005780825260076020526040822092825b82600161119183611c09565b500154146111ed578260016111a583611c09565b500154146111d3575b60001981146111bf57600101611185565b634e487b7160e01b84526011600452602484fd5b60026111de82611c09565b5001805460ff191690556111ae565b509192905060018060a01b03600c5416600382019060018060a01b03825416856006850192835490803b156112fc57604051632142170760e11b81523060048201526001600160a01b0394909416602485015260448401919091528290606490829084905af180156112f1576112b7575b50916080917fe9c6e81492bc93fe089982a07565c4a3a6e0c968c5c00b0cd69a8dac9bf37b4993600183549301549160018060a01b03905416905491604051938452602084015260408301526060820152a19038611150565b917fe9c6e81492bc93fe089982a07565c4a3a6e0c968c5c00b0cd69a8dac9bf37b499391956112e7608094611841565b959193509161125e565b6040513d88823e3d90fd5b8280fd5b60405162461bcd60e51b815260206004820152601d60248201527f54686973207065726d697373696f6e206469646e7420657869737473210000006044820152606490fd5b634e487b7160e01b87526041600452602487fd5b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b86526041600452602486fd5b015190503880610d92565b600184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690601f198316855b8181106113f5575095836001959697106113dc575b505050811b01600155610da8565b015160001960f88460031b161c191690553880806113ce565b9192602060018192868b0151815501940192016113b9565b61145690600185527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f840160051c8101916020851061145c575b601f0160051c019061195e565b38610d79565b9091508190611449565b634e487b7160e01b83526041600452602483fd5b8380fd5b60408336031261104d57604051604081018181106001600160401b038211176113455760405283356001600160a01b0381168103611049579181604093602093528286013583820152815201920191610cf8565b6040516335fdcccd60e21b8152336004820152602490fd5b503461010e57602036600319011261010e5760ff60406020926001600160401b0361151361182b565b168152600884522054166040519015158152f35b503461010e57602036600319011261010e576001600160a01b03611549611815565b166001600160601b0360a01b600254161760025580f35b503461010e57602036600319011261010e5761157a611815565b479081156115f1578280808085855af13d156115ec573d61159a8161188b565b906115a8604051928361186a565b81528460203d92013e5b156115bb578280f35b604051639d11f56360e01b81523360048201526001600160a01b039190911660248201526044810191909152606490fd5b6115b2565b604051630686827b60e51b8152600490fd5b503461010e57604036600319011261010e5761161d611815565b6001600160a01b0390602435828116919082900361147a576040516370a0823160e01b8152306004820152926020928385602481845afa9485156112f15786956116cf575b5084156115f157839286604492604051978895869463a9059cbb60e01b865216600485015260248401525af18015610b995761169c578280f35b81813d83116116c8575b6116b0818361186a565b81010312610640576116c190611a68565b5038808280f35b503d6116a6565b9094508381813d83116116f7575b6116e7818361186a565b81010312610b1e57519338611662565b503d6116dd565b503461010e57602036600319011261010e5760209060ff906040906001600160a01b03611729611815565b168152600984522054166040519015158152f35b503461010e578060031936011261010e57546117576119af565b9061177460405192839283526040602084015260408301906117f0565b0390f35b9050346106405760203660031901126106405760043563ffffffff60e01b81168091036112fc57602092506385572ffb60e01b81149081156117bc575b5015158152f35b6301ffc9a760e01b149050386117b5565b60005b8381106117e05750506000910152565b81810151838201526020016117d0565b90602091611809815180928185528580860191016117cd565b601f01601f1916010190565b600435906001600160a01b038216820361058757565b600435906001600160401b038216820361058757565b6001600160401b03811161185457604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761185457604052565b6001600160401b03811161185457601f01601f191660200190565b81601f82011215610587578035906118bd8261188b565b926118cb604051948561186a565b8284526020838301011161058757816000926020809301838601378301015290565b909291926118fa8161188b565b91611908604051938461186a565b8294828452828201116105875760206119229301906117cd565b565b90600182811c92168015611954575b602083101461193e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611933565b818110611969575050565b6000815560010161195e565b9190601f811161198457505050565b611922926000526020600020906020601f840160051c8301931061145c57601f0160051c019061195e565b604051906000826001918254926119c584611924565b80845293818116908115611a4657506001146119e9575b506119229250038361186a565b600081815291507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b848310611a2b57506119229350508101602001386119dc565b81935090816020925483858a01015201910190918592611a12565b90506020925061192294915060ff191682840152151560051b820101386119dc565b5190811515820361058757565b600160401b821161185457805491808255828110611a9257505050565b600091825260209081832093840193015b838110611ab05750505050565b8083611abe60019354611924565b80611acc575b505001611aa3565b601f8082118514611ae357505081555b8338611ac4565b611afc90848452868420920160051c820185830161195e565b81835555611adc565b15611b0c57565b60405162461bcd60e51b815260206004820152601e60248201527f54686973207065726d697373696f6e206469646e2774206578697374732100006044820152606490fd5b9081602091031261058757516001600160a01b03811681036105875790565b8183526020600583901b84018101939192906000818401855b848310611b9a575050505050505090565b90919293949596601f19808883030184528835601e198436030181121561058757830186810190356001600160401b03811161058757803603821361058757838893601f83808796879660019a5286860137600085828601015201160101990193019301919594939290611b89565b600654811015611c44576003906006600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220e58d55a14bde75421ec57699e8b4a3fae48abf6e7b1da20ac91cf55afa7558a664736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x1778 JUMPI POP DUP1 PUSH4 0x263596A5 EQ PUSH2 0x173D JUMPI DUP1 PUSH4 0x272EFC69 EQ PUSH2 0x16FE JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0x1603 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1560 JUMPI DUP1 PUSH4 0x69D83ED1 EQ PUSH2 0x1527 JUMPI DUP1 PUSH4 0x7DC91A02 EQ PUSH2 0x14EA JUMPI DUP1 PUSH4 0x85572FFB EQ PUSH2 0xBA4 JUMPI DUP1 PUSH4 0x92365CE4 EQ PUSH2 0x743 JUMPI DUP1 PUSH4 0x95871C8F EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0xB0F479A1 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xB2F87643 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0xB697F531 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xC5EC1C7A EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xE9982C39 EQ PUSH2 0x111 JUMPI PUSH4 0xFF46ED53 SUB PUSH2 0xF JUMPI CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xF7 PUSH2 0x182B JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x40 PUSH2 0x180 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE KECCAK256 PUSH1 0xFF DUP2 SLOAD SWAP2 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x3 DUP4 ADD SLOAD AND PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD SWAP2 PUSH1 0x8 DUP7 ADD SLOAD SWAP4 PUSH1 0x9 DUP8 ADD SLOAD SWAP6 PUSH1 0xB PUSH1 0xA DUP10 ADD SLOAD SWAP9 ADD SLOAD SWAP9 PUSH1 0x40 MLOAD SWAP12 DUP13 MSTORE PUSH1 0x20 DUP13 ADD MSTORE PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x60 DUP11 ADD MSTORE PUSH1 0x80 DUP10 ADD MSTORE PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xE0 DUP7 ADD MSTORE PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0x120 DUP5 ADD MSTORE DUP2 DUP2 AND ISZERO ISZERO PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH2 0x160 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x1E8 PUSH2 0x182B JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x224 PUSH2 0x1815 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x260 PUSH2 0x1815 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP1 DUP5 ADD PUSH1 0x24 SWAP5 PUSH2 0x314 DUP2 PUSH2 0x306 DUP10 DUP10 CALLDATALOAD DUP10 DUP8 SWAP2 PUSH1 0x60 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x186A JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP1 DUP8 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH1 0x40 DUP8 KECCAK256 SWAP1 PUSH2 0x33B PUSH1 0x1 PUSH1 0xFF PUSH1 0xB DUP6 ADD SLOAD PUSH1 0x8 SHR AND ISZERO ISZERO EQ PUSH2 0x1B05 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x8 DUP4 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x64B975DB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP2 SWAP3 DUP4 SWAP1 DUP11 SWAP1 DUP3 SWAP1 DUP9 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x738 JUMPI DUP11 SWAP3 DUP12 SWAP3 PUSH2 0x6FA JUMPI JUMPDEST POP PUSH1 0x4 DUP2 ADD SLOAD DUP4 LT SWAP3 DUP4 PUSH2 0x6BF JUMPI PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xA ADD SSTORE PUSH2 0x644 JUMPI DUP8 DUP3 PUSH1 0xC SLOAD AND DUP1 EXTCODESIZE ISZERO PUSH2 0x640 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x635 JUMPI PUSH2 0x61D JUMPI JUMPDEST POP POP DUP6 DUP4 DUP4 PUSH1 0xC SLOAD AND PUSH1 0x40 MLOAD SWAP9 DUP10 DUP1 SWAP3 PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP3 MSTORE DUP10 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x594 JUMPI DUP10 SWAP8 PUSH2 0x5EE JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 SWAP1 PUSH1 0x60 DUP2 ADD DUP4 DUP2 GT DUP3 DUP3 LT OR PUSH2 0x5D9 JUMPI PUSH1 0x40 MSTORE DUP7 DUP2 MSTORE DUP6 DUP2 ADD DUP5 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0x1 DUP3 MSTORE PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x5C6 JUMPI DUP1 PUSH1 0x1 PUSH2 0x460 SWAP3 ADD PUSH1 0x6 SSTORE PUSH2 0x1C09 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 PUSH2 0x5B3 JUMPI SWAP2 PUSH1 0x2 SWAP2 PUSH2 0x48F SWAP5 SWAP4 MLOAD DUP5 SSTORE MLOAD PUSH1 0x1 DUP5 ADD SSTORE MLOAD ISZERO ISZERO SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP4 PUSH1 0xC SLOAD AND PUSH1 0x40 MLOAD SWAP4 DUP7 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE DUP6 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP4 MSTORE PUSH1 0x80 DUP4 ADD SWAP2 DUP4 DUP4 LT SWAP1 DUP4 GT OR PUSH2 0x59F JUMPI POP DUP1 PUSH1 0x40 MSTORE DUP4 DUP2 DUP5 PUSH1 0xA SLOAD AND DUP6 PUSH1 0x2 SLOAD AND PUSH4 0xA30E377 PUSH1 0xE4 SHL DUP4 MSTORE PUSH8 0xADECC60412CE25A5 PUSH1 0x84 DUP8 ADD MSTORE PUSH1 0xA4 DUP7 ADD MSTORE PUSH1 0x60 PUSH1 0xC4 DUP7 ADD MSTORE DUP2 DUP13 PUSH1 0x7F NOT DUP8 PUSH2 0x503 PUSH1 0xE4 DUP3 ADD DUP3 PUSH2 0x17F0 JUMP JUMPDEST SUB ADD SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x594 JUMPI PUSH2 0x556 JUMPI JUMPDEST POP POP SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH32 0x93BFFD1BDE7AFE8C47A27012597F0DC2C5CCEA5FC1323D424E13C21065D594E8 SWAP7 SWAP4 PUSH1 0x40 MLOAD SWAP6 AND DUP6 MSTORE DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP1 DUP4 SWAP8 SWAP5 SWAP3 SWAP7 SWAP6 SWAP4 SWAP2 DUP3 SWAP1 RETURNDATASIZE DUP5 GT PUSH2 0x58C JUMPI JUMPDEST DUP2 PUSH2 0x573 SWAP2 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x587 JUMPI SWAP2 SWAP5 SWAP1 SWAP3 SWAP4 CODESIZE DUP1 PUSH2 0x513 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x569 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x4 DUP15 SWAP1 MSTORE DUP5 DUP15 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP15 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE DUP5 DUP15 REVERT JUMPDEST DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x60F SWAP2 SWAP8 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x616 JUMPI JUMPDEST PUSH2 0x607 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1B51 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x40F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x626 SWAP1 PUSH2 0x1841 JUMP JUMPDEST PUSH2 0x631 JUMPI DUP8 CODESIZE PUSH2 0x3DF JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x48 DUP2 DUP9 ADD MSTORE PUSH32 0x54686520656E737572616E6365206D7573742068617665206174206C65617374 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2031302074696D6573207468652076616C7565206F66207468652076616C7565 PUSH1 0x64 DUP3 ADD MSTORE PUSH8 0x206E656564656421 PUSH1 0xC0 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST SWAP7 SWAP8 POP POP POP POP POP POP PUSH32 0x90D31678EC129D3863BE095922EF7B97386BCCA9B61E15D2D53347CDDCEEB0A7 SWAP5 POP PUSH1 0x40 DUP1 SWAP5 POP MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP3 POP SWAP1 POP PUSH1 0x40 DUP3 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x730 JUMPI JUMPDEST DUP2 PUSH2 0x717 PUSH1 0x40 SWAP4 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x72C JUMPI DUP5 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 CODESIZE PUSH2 0x37E JUMP JUMPDEST DUP10 DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x70A JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP13 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x84 CALLDATALOAD GT PUSH2 0x10E JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x84 CALLDATALOAD ADD SLT ISZERO PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0x10E JUMPI CALLDATASIZE PUSH1 0x24 PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x5 SHL PUSH1 0x84 CALLDATALOAD ADD ADD GT PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7CB DUP2 PUSH2 0x306 PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD DUP8 SWAP2 PUSH1 0x60 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 DUP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x7F1 PUSH1 0x1 PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO ISZERO EQ PUSH2 0x1B05 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xB99 JUMPI DUP4 SWAP2 PUSH2 0xB7A JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0xB22 JUMPI DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 CALLDATALOAD DUP2 SSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x88E PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x7 DUP4 ADD PUSH2 0x1A75 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x84 CALLDATALOAD ADD SWAP1 DUP2 PUSH1 0x7 DUP3 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 DUP5 SWAP2 JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP4 LT PUSH2 0x9B6 JUMPI POP POP POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xB SLOAD AND SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 SWAP4 PUSH4 0x4C8F60A3 PUSH1 0xE0 SHL DUP3 MSTORE DUP3 PUSH1 0x4 DUP4 ADD MSTORE DUP2 DUP8 DUP2 PUSH2 0x8ED PUSH1 0x24 DUP3 ADD PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP12 PUSH2 0x1B70 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x9AB JUMPI DUP5 SWAP3 PUSH2 0x955 JUMPI JUMPDEST POP SWAP2 PUSH2 0x94F SWAP2 PUSH1 0x8 PUSH32 0xCC6833FD9787745C083EDFCC3AE70E4CD35AB78CF84F127388A790FD6ED17FBB SWAP5 ADD SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x64 CALLDATALOAD DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH1 0x84 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD SWAP1 PUSH2 0x1B70 JUMP JUMPDEST SUB SWAP1 LOG1 DUP1 RETURN JUMPDEST SWAP2 POP SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x9A3 JUMPI JUMPDEST DUP2 PUSH2 0x971 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x587 JUMPI SWAP1 MLOAD SWAP1 SWAP2 PUSH32 0xCC6833FD9787745C083EDFCC3AE70E4CD35AB78CF84F127388A790FD6ED17FBB PUSH2 0x8FF JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x964 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x84 CALLDATALOAD CALLDATASIZE SUB PUSH1 0x42 NOT ADD DUP2 CALLDATALOAD SLT ISZERO PUSH2 0xB1E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD GT PUSH2 0xB1E JUMPI PUSH1 0x84 CALLDATALOAD DUP2 CALLDATALOAD ADD PUSH1 0x24 DUP2 ADD CALLDATALOAD CALLDATASIZE SUB PUSH1 0x44 SWAP1 SWAP2 ADD SGT PUSH2 0xB1E JUMPI PUSH2 0xA12 PUSH1 0x24 DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD PUSH2 0xA0C DUP5 SLOAD PUSH2 0x1924 JUMP JUMPDEST DUP5 PUSH2 0x1975 JUMP JUMPDEST DUP6 PUSH1 0x1F PUSH1 0x24 DUP4 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD GT PUSH1 0x1 EQ PUSH2 0xA80 JUMPI PUSH1 0x20 PUSH1 0x1 SWAP3 DUP4 SWAP3 DUP10 SWAP1 PUSH1 0x24 DUP4 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD PUSH2 0xA6D JUMPI JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x84 CALLDATALOAD DUP4 CALLDATALOAD ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x3 DUP2 SWAP1 SHL SWAP2 SWAP1 SWAP2 SHR NOT SWAP1 SWAP2 AND SWAP1 DUP5 SHL OR DUP6 SSTORE JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0x44 SWAP2 POP DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD ADD CALLDATALOAD CODESIZE PUSH2 0xA3F JUMP JUMPDEST DUP3 DUP8 MSTORE PUSH1 0x20 DUP8 KECCAK256 SWAP1 DUP8 JUMPDEST PUSH1 0x84 CALLDATALOAD DUP5 CALLDATALOAD ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x1F NOT AND DUP2 LT PUSH2 0xAFE JUMPI POP PUSH1 0x1 SWAP3 DUP4 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x84 CALLDATALOAD DUP4 CALLDATALOAD ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xAD3 JUMPI JUMPDEST POP POP DUP3 PUSH1 0x24 DUP3 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD DUP2 SHL ADD DUP6 SSTORE PUSH2 0xA61 JUMP JUMPDEST PUSH1 0x44 PUSH1 0x0 NOT PUSH1 0xF8 PUSH1 0x24 DUP7 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x3 SHL AND SHR NOT SWAP2 DUP5 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD ADD CALLDATALOAD AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xABC JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 PUSH1 0x44 DUP7 DUP9 CALLDATALOAD PUSH1 0x84 CALLDATALOAD ADD ADD ADD CALLDATALOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0xA8A JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420626520746865206F776E6572206F662074686520696E66 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6F726D65642052574121 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0xB93 SWAP2 POP PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x616 JUMPI PUSH2 0x607 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST CODESIZE PUSH2 0x82D JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x3 NOT SWAP1 PUSH1 0x20 CALLDATASIZE DUP4 ADD SLT PUSH2 0x10E JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x640 JUMPI PUSH1 0xA0 SWAP1 DUP4 CALLDATASIZE SUB ADD SLT PUSH2 0x10E JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x14D2 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0xA0 DUP4 ADD DUP4 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1466 JUMPI PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 ADD CALLDATALOAD DUP4 MSTORE PUSH1 0x24 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x12FC JUMPI PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x44 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x12FC JUMPI PUSH2 0xC67 SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP5 ADD ADD PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x64 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x12FC JUMPI PUSH2 0xC8F SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP5 ADD ADD PUSH2 0x18A6 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x84 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x12FC JUMPI ADD CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x640 JUMPI PUSH1 0x4 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1466 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xCDB PUSH1 0x20 DUP4 PUSH1 0x5 SHL ADD DUP5 PUSH2 0x186A JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x24 PUSH1 0x20 DUP5 ADD SWAP3 PUSH1 0x6 SHL DUP3 ADD ADD SWAP1 CALLDATASIZE DUP3 GT PUSH2 0x104D JUMPI PUSH1 0x24 ADD SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x147E JUMPI POP POP POP PUSH1 0x80 DUP4 ADD MSTORE DUP2 MLOAD DUP2 SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP1 MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 DUP2 DUP5 ADD SWAP4 SUB SLT PUSH2 0x12FC JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x147A JUMPI ADD DUP2 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0x12FC JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xD54 SWAP3 SWAP2 PUSH1 0x40 ADD PUSH2 0x18ED JUMP JUMPDEST SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1466 JUMPI PUSH2 0xD70 PUSH1 0x1 SLOAD PUSH2 0x1924 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x140D JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x138C JUMPI DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x1381 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 SSTORE JUMPDEST PUSH2 0xDB0 PUSH2 0x19AF JUMP JUMPDEST PUSH1 0x60 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x12FC JUMPI PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xDD3 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD PUSH2 0x1A68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP4 ADD GT OR PUSH2 0x136D JUMPI PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE DUP6 DUP2 MSTORE DUP4 PUSH1 0x5 DUP2 MUL DIV PUSH1 0x5 EQ DUP5 ISZERO OR ISZERO PUSH2 0x1359 JUMPI PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1A0 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x1A0 DUP8 ADD GT OR PUSH2 0x1345 JUMPI PUSH1 0x5 SWAP1 PUSH2 0x1A0 DUP7 ADD PUSH1 0x40 MSTORE DUP8 DUP7 MSTORE DUP8 PUSH1 0x20 DUP8 ADD MSTORE DUP8 PUSH1 0x40 DUP8 ADD MSTORE DUP8 PUSH1 0x60 DUP8 ADD MSTORE MUL PUSH1 0x80 DUP6 ADD MSTORE DUP6 PUSH1 0xA0 DUP6 ADD MSTORE DUP6 PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP5 ADD MSTORE DUP5 PUSH2 0x100 DUP5 ADD MSTORE DUP5 PUSH2 0x120 DUP5 ADD MSTORE DUP5 PUSH2 0x140 DUP5 ADD MSTORE DUP1 ISZERO ISZERO PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x1 PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x1 DUP2 ISZERO ISZERO EQ PUSH1 0x0 EQ PUSH2 0x1144 JUMPI POP DUP4 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP2 MLOAD DUP2 SSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x3 DUP2 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP5 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0x7 DUP2 ADD PUSH1 0xE0 DUP4 ADD MLOAD SWAP1 PUSH1 0x20 DUP3 MLOAD SWAP3 PUSH2 0xF0E DUP5 DUP5 PUSH2 0x1A75 JUMP JUMPDEST ADD SWAP1 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x1051 JUMPI POP POP POP POP PUSH1 0xB PUSH2 0x180 SWAP2 PUSH2 0x100 DUP5 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE PUSH2 0x120 DUP5 ADD MLOAD PUSH1 0x9 DUP3 ADD SSTORE PUSH2 0x140 DUP5 ADD MLOAD PUSH1 0xA DUP3 ADD SSTORE ADD SWAP2 PUSH2 0xF6A PUSH2 0x160 DUP3 ADD MLOAD ISZERO ISZERO DUP5 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD DUP2 SLOAD PUSH2 0xFF00 NOT AND SWAP1 ISZERO ISZERO PUSH1 0x8 SHL PUSH2 0xFF00 AND OR SWAP1 SSTORE JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND SWAP2 PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x104D JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x104D JUMPI PUSH1 0x60 ADD MLOAD SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x20 DUP2 DUP2 DUP6 ADD SWAP5 SUB SLT PUSH2 0xB1E JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1049 JUMPI ADD DUP3 PUSH1 0x3F DUP3 ADD SLT ISZERO PUSH2 0xB1E JUMPI PUSH32 0xB1E312A29937CC11967B0E4A346FEF1AE132424EBABA9DC6D90249DBA053E87C SWAP3 DUP2 PUSH1 0x40 PUSH1 0x20 PUSH2 0x1026 SWAP5 ADD MLOAD SWAP2 ADD PUSH2 0x18ED JUMP JUMPDEST SWAP1 PUSH2 0x1043 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x17F0 JUMP JUMPDEST SUB SWAP1 LOG3 DUP1 RETURN JUMPDEST DUP7 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x1130 JUMPI PUSH2 0x1078 DUP3 PUSH2 0x1072 DUP7 SLOAD PUSH2 0x1924 JUMP JUMPDEST DUP7 PUSH2 0x1975 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP11 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x10C3 JUMPI SWAP3 DUP1 PUSH1 0x20 SWAP4 PUSH1 0x1 SWAP7 SWAP4 DUP8 SWAP7 SWAP3 PUSH2 0x10B8 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP6 SSTORE JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0xF19 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1098 JUMP JUMPDEST DUP6 SWAP1 MSTORE PUSH1 0x20 DUP12 KECCAK256 SWAP2 SWAP1 DUP12 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x1118 JUMPI POP DUP4 PUSH1 0x20 SWAP4 PUSH1 0x1 SWAP7 SWAP4 DUP8 SWAP7 SWAP4 DUP8 SWAP5 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x10FF JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP6 SSTORE PUSH2 0x10AC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x10F2 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x10CE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST SWAP1 SWAP2 POP SWAP3 SWAP2 SWAP3 ISZERO PUSH2 0x1157 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF81 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0xB PUSH1 0x40 DUP6 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO ISZERO SUB PUSH2 0x1300 JUMPI DUP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP3 DUP3 JUMPDEST DUP3 PUSH1 0x1 PUSH2 0x1191 DUP4 PUSH2 0x1C09 JUMP JUMPDEST POP ADD SLOAD EQ PUSH2 0x11ED JUMPI DUP3 PUSH1 0x1 PUSH2 0x11A5 DUP4 PUSH2 0x1C09 JUMP JUMPDEST POP ADD SLOAD EQ PUSH2 0x11D3 JUMPI JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x11BF JUMPI PUSH1 0x1 ADD PUSH2 0x1185 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x2 PUSH2 0x11DE DUP3 PUSH2 0x1C09 JUMP JUMPDEST POP ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH2 0x11AE JUMP JUMPDEST POP SWAP2 SWAP3 SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xC SLOAD AND PUSH1 0x3 DUP3 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 SLOAD AND DUP6 PUSH1 0x6 DUP6 ADD SWAP3 DUP4 SLOAD SWAP1 DUP1 EXTCODESIZE ISZERO PUSH2 0x12FC JUMPI PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x12F1 JUMPI PUSH2 0x12B7 JUMPI JUMPDEST POP SWAP2 PUSH1 0x80 SWAP2 PUSH32 0xE9C6E81492BC93FE089982A07565C4A3A6E0C968C5C00B0CD69A8DAC9BF37B49 SWAP4 PUSH1 0x1 DUP4 SLOAD SWAP4 ADD SLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SLOAD AND SWAP1 SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE LOG1 SWAP1 CODESIZE PUSH2 0x1150 JUMP JUMPDEST SWAP2 PUSH32 0xE9C6E81492BC93FE089982A07565C4A3A6E0C968C5C00B0CD69A8DAC9BF37B49 SWAP4 SWAP2 SWAP6 PUSH2 0x12E7 PUSH1 0x80 SWAP5 PUSH2 0x1841 JUMP JUMPDEST SWAP6 SWAP2 SWAP4 POP SWAP2 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973207065726D697373696F6E206469646E742065786973747321000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0xD92 JUMP JUMPDEST PUSH1 0x1 DUP5 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 PUSH1 0x1F NOT DUP4 AND DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x13F5 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x13DC JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 SSTORE PUSH2 0xDA8 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x13CE JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x13B9 JUMP JUMPDEST PUSH2 0x1456 SWAP1 PUSH1 0x1 DUP6 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0x145C JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x195E JUMP JUMPDEST CODESIZE PUSH2 0xD79 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1449 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP4 CALLDATASIZE SUB SLT PUSH2 0x104D JUMPI PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1345 JUMPI PUSH1 0x40 MSTORE DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1049 JUMPI SWAP2 DUP2 PUSH1 0x40 SWAP4 PUSH1 0x20 SWAP4 MSTORE DUP3 DUP7 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35FDCCCD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x1513 PUSH2 0x182B JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x8 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1549 PUSH2 0x1815 JUMP JUMPDEST AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH2 0x157A PUSH2 0x1815 JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0x15F1 JUMPI DUP3 DUP1 DUP1 DUP1 DUP6 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x15EC JUMPI RETURNDATASIZE PUSH2 0x159A DUP2 PUSH2 0x188B JUMP JUMPDEST SWAP1 PUSH2 0x15A8 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 MSTORE DUP5 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x15BB JUMPI DUP3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9D11F563 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x15B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x686827B PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH2 0x161D PUSH2 0x1815 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x147A JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP6 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x12F1 JUMPI DUP7 SWAP6 PUSH2 0x16CF JUMPI JUMPDEST POP DUP5 ISZERO PUSH2 0x15F1 JUMPI DUP4 SWAP3 DUP7 PUSH1 0x44 SWAP3 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP6 DUP7 SWAP5 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP7 MSTORE AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xB99 JUMPI PUSH2 0x169C JUMPI DUP3 DUP1 RETURN JUMPDEST DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x16C8 JUMPI JUMPDEST PUSH2 0x16B0 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x640 JUMPI PUSH2 0x16C1 SWAP1 PUSH2 0x1A68 JUMP JUMPDEST POP CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST POP RETURNDATASIZE PUSH2 0x16A6 JUMP JUMPDEST SWAP1 SWAP5 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x16F7 JUMPI JUMPDEST PUSH2 0x16E7 DUP2 DUP4 PUSH2 0x186A JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xB1E JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x1662 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x16DD JUMP JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x10E JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF SWAP1 PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1729 PUSH2 0x1815 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x9 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x10E JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x10E JUMPI SLOAD PUSH2 0x1757 PUSH2 0x19AF JUMP JUMPDEST SWAP1 PUSH2 0x1774 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 MSTORE PUSH1 0x40 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x17F0 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x640 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x640 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x12FC JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x85572FFB PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x17BC JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x17B5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x17E0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17D0 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1809 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x17CD JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x587 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x587 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1854 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1854 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x1854 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x587 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x18BD DUP3 PUSH2 0x188B JUMP JUMPDEST SWAP3 PUSH2 0x18CB PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x186A JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x587 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x18FA DUP2 PUSH2 0x188B JUMP JUMPDEST SWAP2 PUSH2 0x1908 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x186A JUMP JUMPDEST DUP3 SWAP5 DUP3 DUP5 MSTORE DUP3 DUP3 ADD GT PUSH2 0x587 JUMPI PUSH1 0x20 PUSH2 0x1922 SWAP4 ADD SWAP1 PUSH2 0x17CD JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1954 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x193E JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1933 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x1969 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x195E JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x1984 JUMPI POP POP POP JUMP JUMPDEST PUSH2 0x1922 SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x145C JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x195E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x1 SWAP2 DUP3 SLOAD SWAP3 PUSH2 0x19C5 DUP5 PUSH2 0x1924 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP4 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x1A46 JUMPI POP PUSH1 0x1 EQ PUSH2 0x19E9 JUMPI JUMPDEST POP PUSH2 0x1922 SWAP3 POP SUB DUP4 PUSH2 0x186A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE SWAP2 POP PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 JUMPDEST DUP5 DUP4 LT PUSH2 0x1A2B JUMPI POP PUSH2 0x1922 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x19DC JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x1A12 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x1922 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x19DC JUMP JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x587 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x1854 JUMPI DUP1 SLOAD SWAP2 DUP1 DUP3 SSTORE DUP3 DUP2 LT PUSH2 0x1A92 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 DUP2 DUP4 KECCAK256 SWAP4 DUP5 ADD SWAP4 ADD JUMPDEST DUP4 DUP2 LT PUSH2 0x1AB0 JUMPI POP POP POP POP JUMP JUMPDEST DUP1 DUP4 PUSH2 0x1ABE PUSH1 0x1 SWAP4 SLOAD PUSH2 0x1924 JUMP JUMPDEST DUP1 PUSH2 0x1ACC JUMPI JUMPDEST POP POP ADD PUSH2 0x1AA3 JUMP JUMPDEST PUSH1 0x1F DUP1 DUP3 GT DUP6 EQ PUSH2 0x1AE3 JUMPI POP POP DUP2 SSTORE JUMPDEST DUP4 CODESIZE PUSH2 0x1AC4 JUMP JUMPDEST PUSH2 0x1AFC SWAP1 DUP5 DUP5 MSTORE DUP7 DUP5 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD DUP6 DUP4 ADD PUSH2 0x195E JUMP JUMPDEST DUP2 DUP4 SSTORE SSTORE PUSH2 0x1ADC JUMP JUMPDEST ISZERO PUSH2 0x1B0C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973207065726D697373696F6E206469646E277420657869737473210000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x587 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x587 JUMPI SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 PUSH1 0x5 DUP4 SWAP1 SHL DUP5 ADD DUP2 ADD SWAP4 SWAP2 SWAP3 SWAP1 PUSH1 0x0 DUP2 DUP5 ADD DUP6 JUMPDEST DUP5 DUP4 LT PUSH2 0x1B9A JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 PUSH1 0x1F NOT DUP1 DUP9 DUP4 SUB ADD DUP5 MSTORE DUP9 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x587 JUMPI DUP4 ADD DUP7 DUP2 ADD SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x587 JUMPI DUP1 CALLDATASIZE SUB DUP3 SGT PUSH2 0x587 JUMPI DUP4 DUP9 SWAP4 PUSH1 0x1F DUP4 DUP1 DUP8 SWAP7 DUP8 SWAP7 PUSH1 0x1 SWAP11 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP10 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x1B89 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x1C44 JUMPI PUSH1 0x3 SWAP1 PUSH1 0x6 PUSH1 0x0 MSTORE MUL PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 DUP14 SSTORE LOG1 0x4B 0xDE PUSH22 0x421EC57699E8B4A3FAE48ABF6E7B1DA20AC91CF55AFA PUSH22 0x58A664736F6C63430008140033000000000000000000 ","sourceMap":"1119:12451:27:-:0;;;;;;;;;;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;:::i;:::-;;;;11324:23;1119:12451;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;3080:54;1119:12451;;;;;;3080:54;1119:12451;3080:54;;1119:12451;3080:54;;;;1119:12451;;;;;;;3080:54;;1119:12451;;;3080:54;;1119:12451;3080:54;;;1119:12451;3080:54;;;1119:12451;3080:54;;;;1119:12451;3080:54;;;;1119:12451;3080:54;;;;;1119:12451;3080:54;;1119:12451;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3080:54;1119:12451;;;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;:::i;:::-;;;;10961:23;1119:12451;;;;;;;-1:-1:-1;;1119:12451:27;11009:4;1119:12451;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;:::i;:::-;;;;11611:18;1119:12451;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;:::i;:::-;;;;11881:18;1119:12451;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;;;;;;1622:8:0;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;;7170:52;;;1119:12451;;7170:52;1119:12451;7170:52;1119:12451;;;7170:52;;1119:12451;;;;;;;;;;;;;;;;;7170:52;;1119:12451;;7170:52;;;;;;:::i;:::-;1119:12451;7160:63;;1119:12451;;;7269:15;1119:12451;;;;;7321:23;7313:74;1119:12451;;7321:23;;;1119:12451;;;;;;7321:31;7313:74;:::i;:::-;7321:23;1119:12451;;7471:24;;1119:12451;;;;-1:-1:-1;;;7441:55:27;;1119:12451;7441:55;;1119:12451;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;7441:55;;;;;;;;;;;;;1119:12451;-1:-1:-1;1119:12451:27;7528:31;;1119:12451;7512:47;;;;;;7589:25;;;1119:12451;7644:27;;1119:12451;;;;;7911:3;1119:12451;;7911:51;;;;;1119:12451;;-1:-1:-1;;;7911:51:27;;7928:10;1119:12451;7911:51;;1119:12451;7948:4;1119:12451;;;;;;;;;;;;;;;;;;;;;7911:51;;;;;;;;7509:1112;1119:12451;;;;;7911:3;1119:12451;;;;;;;;;;;8004:19;;;1119:12451;8004:19;;1119:12451;8004:19;;;;;;;;;;;7509:1112;-1:-1:-1;1119:12451:27;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;8057:141;;;1119:12451;;;;8057:141;;1119:12451;;;;8040:11;1119:12451;-1:-1:-1;;;1119:12451:27;;;;;;;;;;8040:11;1119:12451;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7911:3;1119:12451;;;;8258:39;;;;1119:12451;;;;;;;;;;;8258:39;;1119:12451;;;;;;;;;;;;;;;;;;;;7644:27;1119:12451;;;;;;;;;8314:73;;8340:20;8314:73;;;1119:12451;;;;;;;;;;8314:73;;;;1119:12451;;;;;;;:::i;:::-;8314:73;;;;;;;;;;;7509:1112;1119:12451;;;;;;;8454:59;1119:12451;;;;;;;;;;;;;;;;;;;8454:59;1119:12451;;8314:73;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1119:12451;;;;8314:73;;;;;;;;;1119:12451;;;;8314:73;;;-1:-1:-1;8314:73:27;;;1119:12451;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;8004:19;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;7911:51;;;;:::i;:::-;1119:12451;;7911:51;;;;1119:12451;;;;7911:51;1119:12451;;;;;;;;;7911:51;1119:12451;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;7509:1112;1119:12451;;;;;;;;8550:59;1119:12451;;;;;;;;;;;;;8550:59;1119:12451;;7441:55;;;;;1119:12451;7441:55;;1119:12451;7441:55;;;;;;1119:12451;7441:55;;;:::i;:::-;;;1119:12451;;;;;;;;;;7441:55;;;;1119:12451;;;;7441:55;;;-1:-1:-1;7441:55:27;;;1119:12451;;;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;6264:52;;1119:12451;6264:52;1119:12451;6264:52;1119:12451;;;;;;6264:52;1119:12451;;;;;;;;;;;;;;;;;6264:52;1119:12451;6254:63;;1119:12451;;;6338:15;1119:12451;;6330:95;1119:12451;;6338:44;1119:12451;;;6338:44;1119:12451;;;;;;6338:52;6330:95;:::i;:::-;6458:3;1119:12451;;;-1:-1:-1;;;6458:19:27;;1119:12451;;;6458:19;;1119:12451;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;6458:19;;;;;;;;;;;1119:12451;-1:-1:-1;;;;;;1119:12451:27;6444:10;:33;1119:12451;;;;6338:15;1119:12451;;;;;;;;;;;6654:21;;;1119:12451;;;;6700:21;;1119:12451;;6746:19;;6444:10;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;6789:22;;;1119:12451;;;;;;;6338:15;6831;;1119:12451;:::i;:::-;;;;;;;6338:15;6831;;1119:12451;;;;;;;;;;;;;;;;;;;;;;;;;6338:44;1119:12451;;;;;;;;;;;6886:27;;;1119:12451;6886:27;;1119:12451;;;;;;;;;;;;;;;:::i;:::-;6886:27;;;;;;;;;;;;;1119:12451;6926:24;;1119:12451;6926:24;1119:12451;6980:31;6926:24;;1119:12451;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6980:31;;;1119:12451;;6886:27;;;;1119:12451;6886:27;;1119:12451;6886:27;;;;;;1119:12451;6886:27;;;:::i;:::-;;;1119:12451;;;;;;6886:27;;6980:31;6886:27;;;;;-1:-1:-1;6886:27:27;;;1119:12451;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;6458:19;;;;1119:12451;6458:19;1119:12451;6458:19;;;;;;;:::i;:::-;;;;;1119:12451;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;1790:8:0;-1:-1:-1;;;;;1119:12451:27;1768:10:0;:31;1764:69;;1119:12451:27;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4478:19;1119:12451;;4467:40;;;1119:12451;4467:40;;;;1119:12451;;;;;;4467:40;;1119:12451;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;4717:51;;1119:12451;;;;;4717:51;;1119:12451;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;5329:475;1119:12451;5329:475;;1119:12451;5329:475;1119:12451;5329:475;;1119:12451;5329:475;1119:12451;5329:475;;1119:12451;;;5329:475;;1119:12451;5329:475;1119:12451;5329:475;;1119:12451;5329:475;;;;1119:12451;;5329:475;;1119:12451;5329:475;;;;1119:12451;5329:475;;;;1119:12451;5329:475;;;;1119:12451;;;;5329:475;;;1119:12451;;5329:475;;;1119:12451;;;;;5820:24;5817:229;1119:12451;;;;;;5860:15;1119:12451;;;;;;;;;;5329:475;;1119:12451;;;;;;5329:475;;1119:12451;;;;;;;;;;;;;;5329:475;;1119:12451;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;5329:475;;1119:12451;;;;;;5329:475;;1119:12451;;;;;5329:475;;;1119:12451;;;;;5860:15;1119:12451;;;5329:475;;1119:12451;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5329:475;;;;1119:12451;5329:475;;;;;1119:12451;;;;;5329:475;;;1119:12451;;;;;5329:475;;;1119:12451;;;;;;5329:475;1119:12451;5329:475;;;1119:12451;;;;;;;;;;;;;;;;;;;;5329:475;1119:12451;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;5817:229;1119:12451;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;4962:21;1119:12451;;;;4951:44;;1119:12451;;;;;4951:44;1119:12451;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;5008:19;1119:12451;;;4997:41;;;1119:12451;4997:41;;;;1119:12451;;;;;;4997:41;;1119:12451;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;4872:167;1119:12451;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;4872:167;;;1119:12451;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;5817:229;1119:12451;;;;;;;5936:99;;5817:229;;;;;5936:99;1119:12451;;;8716:15;1119:12451;;;;8716:45;1119:12451;;;8716:45;1119:12451;;;;;;8716:53;1119:12451;;;;;8716:15;1119:12451;;;;;8898:10;;8960:3;8910:14;1119:12451;8910:14;;;:::i;:::-;:29;;1119:12451;8910:48;;;8982:14;1119:12451;8982:14;;;:::i;:::-;:29;;1119:12451;8982:48;8979:118;;8960:3;-1:-1:-1;;1119:12451:27;;;;;;8898:10;;1119:12451;-1:-1:-1;;;1119:12451:27;;;;;;;;8979:118;9050:23;:14;;;:::i;:::-;-1:-1:-1;9050:23:27;1119:12451;;-1:-1:-1;;1119:12451:27;;;8979:118;;8910:48;;;;;;1119:12451;;;;;9120:3;1119:12451;;;9156:19;;1119:12451;;;;;;;;;9177:22;1119:12451;9177:22;;1119:12451;;;9120:80;;;;;;1119:12451;;-1:-1:-1;;;9120:80:27;;9149:4;1119:12451;9120:80;;1119:12451;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;9120:80;;;;;;;;8894:214;1119:12451;;;;9218:99;1119:12451;;;;9250:21;;1119:12451;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9218:99;5936;;;;9120:80;;9218:99;9120:80;;;;1119:12451;9120:80;;:::i;:::-;;;;;;;;;1119:12451;;;;;;;;;9120:80;1119:12451;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;-1:-1:-1;1119:12451:27;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;1119:12451:27;;;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1764:69:0;1119:12451:27;;-1:-1:-1;;;1808:25:0;;1768:10;1119:12451:27;1808:25:0;;1119:12451:27;;;1808:25:0;1119:12451:27;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;:::i;:::-;;;;3203:54;1119:12451;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;-1:-1:-1;;;;;1119:12451:27;;:::i;:::-;;-1:-1:-1;;;;;1119:12451:27;;4054:27;1119:12451;;;4054:27;1119:12451;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;:::i;:::-;12313:21;12402:11;;;12398:43;;12569:36;;;;;;;;1119:12451;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;12707:5;12703:71;;1119:12451;;;12703:71;1119:12451;;-1:-1:-1;;;12721:53:27;;12741:10;1119:12451;12721:53;;1119:12451;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;12721:53;1119:12451;;;12398:43;1119:12451;;-1:-1:-1;;;12422:19:27;;1119:12451;;12422:19;1119:12451;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;:::i;:::-;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;-1:-1:-1;;;12951:39:27;;12984:4;1119:12451;12951:39;;1119:12451;;;;;;;;12951:39;;;;;;;;;;;;1119:12451;13058:11;;;13054:43;;1119:12451;;;;;;;;;;;;;;;13110:45;;1119:12451;;13110:45;;1119:12451;;;;;13110:45;;;;;;;;1119:12451;;;13110:45;;;;;;;;;;;;;:::i;:::-;;;1119:12451;;;;;;;:::i;:::-;;13110:45;;1119:12451;;;13110:45;;;;;12951:39;;;;;;;;;;;;;;;;;:::i;:::-;;;1119:12451;;;;;12951:39;;;;;;;;;1119:12451;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;:::i;:::-;;;;3318:50;1119:12451;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;857:56:0;;;:100;;;;1119:12451:27;;;;;;;857:100:0;-1:-1:-1;;;917:40:0;;-1:-1:-1;857:100:0;;;1119:12451:27;;;;;;;;-1:-1:-1;;1119:12451:27;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1119:12451:27;;;;:::o;:::-;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;:::o;:::-;-1:-1:-1;;;;;1119:12451:27;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;:::o;:::-;-1:-1:-1;;;;;1119:12451:27;;;;;;-1:-1:-1;;1119:12451:27;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;1119:12451:27;;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;12076:16:27;;1119:12451;;;;;;;:::i;:::-;;;;;;;;;12076:16;;;;1119:12451;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1119:12451:27;;;-1:-1:-1;;1119:12451:27;;;;;;;-1:-1:-1;1119:12451:27;;-1:-1:-1;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1119:12451:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1119:12451:27;;;;;-1:-1:-1;1119:12451:27;:::o;:::-;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"1462400","executionCost":"infinite","totalCost":"infinite"},"external":{"addCollateral(uint256,uint256,uint256,uint256)":"infinite","addReceiver(address)":"24576","addSender(address)":"24781","addSourceChain(uint64)":"24803","ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"infinite","getLastReceivedMessageDetails()":"infinite","getRouter()":"infinite","permissionsInfo(bytes32)":"23967","removeSender(address)":"24753","removelistSourceChain(uint64)":"24835","supportsInterface(bytes4)":"280","verifyColateralValue(uint256,uint256,uint256,uint256,string[])":"infinite","whitelistedSenders(address)":"2479","whitelistedSourceChains(uint64)":"2561","withdraw(address)":"infinite","withdrawToken(address,address)":"infinite"},"internal":{"_ccipReceive(struct Client.Any2EVMMessage memory)":"infinite","checkColateralPrice()":"infinite","handlePermission(bytes32,uint256,bool)":"infinite","sendRwaBackToOwner(bytes32)":"infinite"}},"methodIdentifiers":{"addCollateral(uint256,uint256,uint256,uint256)":"95871c8f","addReceiver(address)":"69d83ed1","addSender(address)":"b697f531","addSourceChain(uint64)":"c5ec1c7a","ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb","getLastReceivedMessageDetails()":"263596a5","getRouter()":"b0f479a1","permissionsInfo(bytes32)":"e9982c39","removeSender(address)":"b2f87643","removelistSourceChain(uint64)":"ff46ed53","supportsInterface(bytes4)":"01ffc9a7","verifyColateralValue(uint256,uint256,uint256,uint256,string[])":"92365ce4","whitelistedSenders(address)":"272efc69","whitelistedSourceChains(uint64)":"7dc91a02","withdraw(address)":"51cff8d9","withdrawToken(address,address)":"3aeac4e1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerCCIP\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provisoryOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rwaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_titleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_drawNumber\",\"type\":\"uint256\"}],\"name\":\"EnsuranceAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rwaValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referenceValue\",\"type\":\"uint256\"}],\"name\":\"PriceLowEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rwaValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referenceValue\",\"type\":\"uint256\"}],\"name\":\"RWAPriceAtMoment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_titleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_drawNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rwaOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_colateralId\",\"type\":\"uint256\"}],\"name\":\"RWARefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rwaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rwaValue\",\"type\":\"uint256\"}],\"name\":\"TheRwaValueIsLessThanTheMinimumNeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rwaValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaValue\",\"type\":\"uint256\"}],\"name\":\"TitleCancelledTheRWAWillBeSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rwaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"VerifyingRwaValue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_titleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_drawNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rwaId\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"addReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"addSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"addSourceChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReceivedMessageDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"permissionsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"idTitle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rwaOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ensuranceValueNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ensureValueNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colateralId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"lastRequestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastRequestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastResponseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"colateralLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPermission\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"removeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_sourceChainSelector\",\"type\":\"uint64\"}],\"name\":\"removelistSourceChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_titleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_drawNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rwaId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"verifyColateralValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"whitelistedSourceChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addSender(address)\":{\"details\":\"Whitelists a sender.\",\"params\":{\"_sender\":\"The address of the sender.\"}},\"addSourceChain(uint64)\":{\"details\":\"Whitelists a chain for transactions.\",\"params\":{\"_sourceChainSelector\":\"The selector of the source chain to be whitelisted.\"}},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"removeSender(address)\":{\"details\":\"Denylists a sender.\",\"params\":{\"_sender\":\"The address of the sender.\"}},\"removelistSourceChain(uint64)\":{\"details\":\"Denylists a chain for transactions.\",\"params\":{\"_sourceChainSelector\":\"The selector of the source chain to be denylisted.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSender(address)\":{\"notice\":\"This function can only be called by the owner.\"},\"addSourceChain(uint64)\":{\"notice\":\"This function can only be called by the owner.\"},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"removeSender(address)\":{\"notice\":\"This function can only be called by the owner.\"},\"removelistSourceChain(uint64)\":{\"notice\":\"This function can only be called by the owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HorizonFujiR.sol\":\"HorizonFujiR\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcf5d0a5cd6ed0f6a9ed721b3e532c0504ed1ba3ab6d3567165876ceb4f23b084\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9899fab6a40f68408ddf153612c553f2441ea27770176bf71ccce22c40393286\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/HorizonFujiAssistant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ncontract HorizonFujiAssistant {\\r\\n\\r\\n    /*CONVERTER FUNCTION */\\r\\n    function stringToUint(string memory s) public pure returns (uint) {\\r\\n        bytes memory b = bytes(s);\\r\\n        uint result = 0;\\r\\n        bool decimalFound = false;\\r\\n        uint decimalPlace = 0;\\r\\n\\r\\n        for (uint i = 0; i < b.length; i++) {\\r\\n            if (b[i] == 'R' || b[i] == '$' || b[i] == '.' || b[i] == ' ') {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (b[i] == ',') {\\r\\n                decimalFound = true;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (b[i] >= 0x30 && b[i] <= 0x39) { // ASCII '0' \\u00e9 48\\r\\n                result = result * 10 + (uint8(b[i]) - 48);\\r\\n                if (decimalFound) {\\r\\n                    decimalPlace++;\\r\\n                    if (decimalPlace >= 2) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                revert(\\\"That is not a valid string\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (decimalPlace < 2) {\\r\\n            if (decimalPlace == 1) {\\r\\n                result *= 10;\\r\\n            } else if (decimalPlace == 0 && decimalFound) {\\r\\n                result *= 100;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4fa30f43f33199dd8cee65b262be676306db81180e91c46dd626fea4e58d4f1c\",\"license\":\"MIT\"},\"contracts/HorizonFujiR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\r\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./HorizonFunctions.sol\\\";\\r\\nimport \\\"./HorizonFujiS.sol\\\";\\r\\n\\r\\n// Custom errors to provide more descriptive revert messages.\\r\\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\r\\nerror NothingToWithdraw();\\r\\nerror FailedToWithdrawEth(address owner, address target, uint256 value);\\r\\nerror DestinationChainNotWhitelisted(uint64 destinationChainSelector);\\r\\nerror SourceChainNotWhitelisted(uint64 sourceChainSelector);\\r\\nerror SenderNotWhitelisted(address sender);\\r\\n\\r\\ncontract HorizonFujiR is CCIPReceiver {\\r\\n\\r\\n    // Event emitted when a message is received from another chain.\\r\\n    event MessageReceived( bytes32 indexed messageId, uint64 indexed sourceChainSelector, address sender, string text);\\r\\n    event TheRwaValueIsLessThanTheMinimumNeeded(uint _rwaId, uint _rwaValue);\\r\\n    event VerifyingRwaValue(uint _rwaId, string[] args);\\r\\n    event EnsuranceAdd(address provisoryOwner, uint _rwaId, uint _titleId, uint _drawNumber);\\r\\n    event RWARefunded(uint _titleId, uint _drawNumber, address _rwaOwner, uint _colateralId);\\r\\n    event RWAPriceAtMoment(uint _contractId, uint _rwaValue, uint _referenceValue);\\r\\n    event PriceLowEvent(uint _contractId, uint _rwaValue, uint _referenceValue);\\r\\n    event TitleCancelledTheRWAWillBeSold(uint _contractId,  uint _rwaValue, uint rwaValue);\\r\\n\\r\\n    //CCIP State Variables to store the last id, received text\\r\\n    bytes32 private lastReceivedMessageId;\\r\\n    bytes private lastReceivedText;\\r\\n    \\r\\n    //State variable to store the polygon receiver address\\r\\n    address private horizonR;\\r\\n\\r\\n    //State variables to store the Functions params\\r\\n    uint64 private subscriptionId;\\r\\n    address router;\\r\\n    uint32 gasLimit;\\r\\n    bytes32 donID;\\r\\n\\r\\n    //State variables to store the CCIP params\\r\\n    LinkTokenInterface linkToken;\\r\\n    \\r\\n    struct Permissions {\\r\\n        uint idTitle;\\r\\n        uint drawNumber;\\r\\n        uint contractId;\\r\\n        address rwaOwner;\\r\\n        uint ensuranceValueNeeded;\\r\\n        uint ensureValueNow;\\r\\n        uint colateralId;\\r\\n        string[] args;\\r\\n        bytes32 lastRequestId;\\r\\n        uint lastRequestTime;\\r\\n        uint lastResponseTime;\\r\\n        bool colateralLocked;\\r\\n        bool isPermission;\\r\\n    }\\r\\n\\r\\n    struct RwaMonitor{\\r\\n        uint rwaId;\\r\\n        bytes32 hashPermission;\\r\\n        bool isActive;\\r\\n    }\\r\\n\\r\\n    //Array to keep track of RWA's prices\\r\\n    RwaMonitor[] rwaMonitors;\\r\\n    // Mapping to keep track of colateral permissions\\r\\n    mapping(bytes32 => Permissions) public permissionsInfo;\\r\\n\\r\\n    // Mapping to keep track of whitelisted source chains.\\r\\n    mapping(uint64 => bool) public whitelistedSourceChains;\\r\\n    // Mapping to keep track of whitelisted senders.\\r\\n    mapping(address => bool) public whitelistedSenders;\\r\\n\\r\\n    HorizonFujiS sender = HorizonFujiS(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDERE\\u00c7O\\r\\n    HorizonFunctions functions = HorizonFunctions(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDERE\\u00c7O\\r\\n    ERC721 rwa = ERC721(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDERE\\u00c7O\\r\\n\\r\\n    constructor(address _linkToken, // 0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\\r\\n                address _routerCCIP) CCIPReceiver(_routerCCIP) { //0x554472a2720e5e7d5d3c817529aba05eed5f82d8\\r\\n        LinkTokenInterface linkToken = LinkTokenInterface(_linkToken);\\r\\n    }\\r\\n\\r\\n    function addReceiver(address _receiverAddress) public {\\r\\n        horizonR = _receiverAddress;\\r\\n    }\\r\\n\\r\\n    /* handle a received message*/\\r\\n    function _ccipReceive( Client.Any2EVMMessage memory any2EvmMessage) internal override /*onlyWhitelistedSourceChain(any2EvmMessage.sourceChainSelector) onlyWhitelistedSenders(abi.decode(any2EvmMessage.sender, (address)))*/ {\\r\\n        lastReceivedMessageId = any2EvmMessage.messageId; // fetch the messageId\\r\\n        lastReceivedText = abi.decode(any2EvmMessage.data, (bytes)); // abi-decoding of the sent text\\r\\n\\r\\n        bytes32 permissionHash;\\r\\n        uint _ensuranceValueNeeded;\\r\\n        bool _colateralLocked;\\r\\n\\r\\n        (permissionHash, _ensuranceValueNeeded, _colateralLocked) = abi.decode(lastReceivedText, (bytes32, uint, bool));\\r\\n\\r\\n        handlePermission(permissionHash, _ensuranceValueNeeded, _colateralLocked);\\r\\n\\r\\n        emit MessageReceived( any2EvmMessage.messageId, any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)), abi.decode(any2EvmMessage.data, (string)));\\r\\n    }\\r\\n\\r\\n    function handlePermission(bytes32 _permissionHash,\\r\\n                              uint _ensuranceValueNeeded,\\r\\n                              bool _colateralLocked) internal{\\r\\n\\r\\n        string[] memory emptyArray = new string[](0);\\r\\n\\r\\n        Permissions memory permission = Permissions({\\r\\n            idTitle: 0,\\r\\n            contractId: 0,\\r\\n            drawNumber: 0,\\r\\n            rwaOwner: address(0),\\r\\n            ensuranceValueNeeded: (_ensuranceValueNeeded * 5),\\r\\n            ensureValueNow: 0,\\r\\n            colateralId: 0,\\r\\n            args: emptyArray,\\r\\n            lastRequestId: 0,\\r\\n            lastRequestTime: 0,\\r\\n            lastResponseTime: 0,\\r\\n            colateralLocked: _colateralLocked,\\r\\n            isPermission: true\\r\\n        });\\r\\n\\r\\n        if(_colateralLocked == true){\\r\\n            permissionsInfo[_permissionHash] = permission;\\r\\n        }else{\\r\\n            if(_colateralLocked == false){\\r\\n                sendRwaBackToOwner(_permissionHash);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function verifyColateralValue(uint256 _titleId, uint _contractId, uint _drawNumber, uint _rwaId, string[] calldata args) public { //[\\\"motos\\\",77,5223,\\\"2015-1\\\"]\\r\\n        bytes32 permissionHash = keccak256(abi.encodePacked(_titleId, _contractId, _drawNumber));\\r\\n\\r\\n        require(permissionsInfo[permissionHash].isPermission == true, \\\"This permission didn't exists!\\\");\\r\\n        require(msg.sender == rwa.ownerOf(_rwaId), \\\"You must be the owner of the informed RWA!\\\");\\r\\n\\r\\n        Permissions storage permission = permissionsInfo[permissionHash];\\r\\n\\r\\n        permission.idTitle = _titleId;\\r\\n        permission.contractId = _contractId;\\r\\n        permission.drawNumber = _drawNumber;\\r\\n        permission.rwaOwner = msg.sender;\\r\\n        permission.colateralId = _rwaId;\\r\\n        permission.args = args;\\r\\n\\r\\n        bytes32 requestId = functions.sendRequest(args);\\r\\n\\r\\n        permission.lastRequestId = requestId;\\r\\n\\r\\n        emit VerifyingRwaValue(_rwaId, args);\\r\\n    }\\r\\n\\r\\n    function addCollateral(uint256 _titleId, uint _contractId, uint _drawNumber, uint _rwaId) public {\\r\\n        bytes32 permissionHash = keccak256(abi.encodePacked(_titleId, _contractId, _drawNumber));\\r\\n\\r\\n        Permissions storage permission = permissionsInfo[permissionHash];\\r\\n\\r\\n        require(permission.isPermission == true, \\\"This permission didn't exists!\\\");\\r\\n\\r\\n        (uint vehicleValue, uint responseTime) = functions.returnFunctionsInfo(permission.lastRequestId);\\r\\n\\r\\n        if(vehicleValue >= permission.ensuranceValueNeeded){\\r\\n            \\r\\n            permission.ensureValueNow = vehicleValue;\\r\\n            permission.lastResponseTime = responseTime;\\r\\n\\r\\n            uint targetPrice = permission.ensuranceValueNeeded;\\r\\n\\r\\n            require(vehicleValue >= targetPrice, \\\"The ensurance must have at least 10 times the value of the value needed!\\\");\\r\\n            \\r\\n            rwa.transferFrom(msg.sender, address(this), _rwaId);\\r\\n\\r\\n            address provisoryOwner = rwa.ownerOf(_rwaId);\\r\\n\\r\\n            rwaMonitors.push(RwaMonitor({\\r\\n                rwaId: _rwaId,\\r\\n                hashPermission: permissionHash,\\r\\n                isActive: true\\r\\n            }));\\r\\n            \\r\\n            bytes memory colateralAdded = abi.encode(permissionHash, rwa, _rwaId);\\r\\n\\r\\n            sender.sendMessagePayLINK(12532609583862916517, horizonR, colateralAdded); //Destination chainId - 12532609583862916517\\r\\n\\r\\n            emit EnsuranceAdd(provisoryOwner, _rwaId, _titleId, _drawNumber);\\r\\n        } else{\\r\\n            emit TheRwaValueIsLessThanTheMinimumNeeded(_rwaId, vehicleValue);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sendRwaBackToOwner(bytes32 _permissionHash) internal{\\r\\n        require(permissionsInfo[_permissionHash].isPermission == true, \\\"This permission didnt exists!\\\");\\r\\n\\r\\n        Permissions storage permission = permissionsInfo[_permissionHash];\\r\\n\\r\\n        for(uint i = 0; rwaMonitors[i].hashPermission != _permissionHash; i++){\\r\\n            if(rwaMonitors[i].hashPermission == _permissionHash){\\r\\n                rwaMonitors[i].isActive = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        rwa.safeTransferFrom(address(this), permission.rwaOwner, permission.colateralId);\\r\\n\\r\\n        emit RWARefunded(permission.idTitle, permission.drawNumber, permission.rwaOwner, permission.colateralId);\\r\\n    }\\r\\n        \\r\\n    function checkColateralPrice() internal { //Triggered by Automation\\r\\n        for (uint256 i = 0; i < rwaMonitors.length; i++) {\\r\\n\\r\\n            if(rwaMonitors[i].isActive == true){\\r\\n                Permissions storage permission = permissionsInfo[rwaMonitors[i].hashPermission];\\r\\n                \\r\\n                bytes32 requestId = functions.sendRequest(permission.args);\\r\\n\\r\\n                (uint vehicleValue, uint responseTime) = functions.returnFunctionsInfo(requestId);\\r\\n\\r\\n                permission.ensureValueNow = vehicleValue;\\r\\n                permission.lastResponseTime = responseTime;\\r\\n\\r\\n                uint id = rwaMonitors[i].rwaId;\\r\\n                uint rwaValue = vehicleValue;\\r\\n                uint referenceValue = permission.ensuranceValueNeeded;\\r\\n\\r\\n                if (rwaValue >= (referenceValue * 5)) {\\r\\n                    emit RWAPriceAtMoment(permission.contractId, id, rwaValue);\\r\\n\\r\\n                } else if (rwaValue >= referenceValue * 4) {\\r\\n                    emit PriceLowEvent(permission.contractId, id, rwaValue); //ALERT\\r\\n\\r\\n                } else if (rwaValue < referenceValue * 2) {\\r\\n                    rwaMonitors[i].isActive = false;\\r\\n                    emit TitleCancelledTheRWAWillBeSold(permission.contractId, id, rwaValue);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Whitelists a chain for transactions.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _sourceChainSelector The selector of the source chain to be whitelisted.\\r\\n    function addSourceChain( uint64 _sourceChainSelector) external /*onlyOwner*/ {\\r\\n        whitelistedSourceChains[_sourceChainSelector] = true;\\r\\n    }\\r\\n    /// @dev Denylists a chain for transactions.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _sourceChainSelector The selector of the source chain to be denylisted.\\r\\n    function removelistSourceChain( uint64 _sourceChainSelector) external /*onlyOwner*/ {\\r\\n        whitelistedSourceChains[_sourceChainSelector] = false;\\r\\n    }\\r\\n    /// @dev Whitelists a sender.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _sender The address of the sender.\\r\\n    function addSender(address _sender) external /*onlyOwner*/ {\\r\\n        whitelistedSenders[_sender] = true;\\r\\n    }\\r\\n    /// @dev Denylists a sender.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _sender The address of the sender.\\r\\n    function removeSender(address _sender) external /*onlyOwner*/ {\\r\\n        whitelistedSenders[_sender] = false;\\r\\n    }\\r\\n\\r\\n    function getLastReceivedMessageDetails() external view returns (bytes32 messageId, bytes memory text) {\\r\\n        return (lastReceivedMessageId, lastReceivedText);\\r\\n    }\\r\\n\\r\\n    /*Withdraw - Receive*/\\r\\n    receive() external payable {}\\r\\n\\r\\n    function withdraw(address _beneficiary) public /*onlyOwner*/ {\\r\\n        // Retrieve the balance of this contract\\r\\n        uint256 amount = address(this).balance;\\r\\n\\r\\n        // Revert if there is nothing to withdraw\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        // Attempt to send the funds, capturing the success status and discarding any return data\\r\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\r\\n\\r\\n        // Revert if the send failed, with information about the attempted transfer\\r\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken( address _beneficiary, address _token) public /*onlyOwner*/ {\\r\\n        // Retrieve the balance of this contract\\r\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        // Revert if there is nothing to withdraw\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        IERC20(_token).transfer(_beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    /*MODIFIERS    */\\r\\n    modifier onlyWhitelistedSourceChain(uint64 _sourceChainSelector) {\\r\\n        if (!whitelistedSourceChains[_sourceChainSelector])\\r\\n            revert SourceChainNotWhitelisted(_sourceChainSelector);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhitelistedSenders(address _sender) {\\r\\n        if (!whitelistedSenders[_sender]) revert SenderNotWhitelisted(_sender);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x862c527f497981cae600ae5270747d308e58c31f8ce703866b58fb51fa26b79a\",\"license\":\"MIT\"},\"contracts/HorizonFujiS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\r\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\ncontract HorizonFujiS is CCIPReceiver {\\r\\n\\r\\n    // Custom errors to provide more descriptive revert messages.    \\r\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\r\\n    error NothingToWithdraw();\\r\\n    error FailedToWithdrawEth(address owner, address target, uint256 value);\\r\\n    error DestinationChainNotWhitelisted(uint64 destinationChainSelector);\\r\\n\\r\\n    // Event emitted when a message is sent to another chain.\\r\\n    event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address receiver, bytes _data, address feeToken, uint256 fees);\\r\\n    event MessageReceived(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address sender, string text, address token, uint256 tokenAmount);\\r\\n    event CCIPReceiverAdded(string _blockchainName, address _receiverAddress);\\r\\n    event CCIPReceiverRemoved(address _receiverAddress);\\r\\n\\r\\n    bytes32 private lastReceivedMessageId;\\r\\n    string private lastReceivedText;\\r\\n    uint private destinationChainSelector;\\r\\n\\r\\n    address owner;\\r\\n\\r\\n    /* STRUCTS */\\r\\n    struct ReceiverInfo {\\r\\n        string blockchainName;\\r\\n        address receiverAddress;\\r\\n        bool isReceiver;\\r\\n    }\\r\\n    \\r\\n    // Mapping to keep track of whitelisted destination chains.\\r\\n    mapping(uint64 => bool) public whitelistedDestinationChains;\\r\\n    // Mapping to keep track of receivers.\\r\\n    mapping(address receiverAddress => ReceiverInfo) public ccipReceicers;\\r\\n\\r\\n    LinkTokenInterface linkToken;\\r\\n\\r\\n    constructor(address _router, //0x554472a2720e5e7d5d3c817529aba05eed5f82d8\\r\\n                address _linkToken //0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\\r\\n               ) CCIPReceiver(_router){  \\r\\n        linkToken = LinkTokenInterface(_linkToken);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @dev Whitelists a chain for transactions.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _destinationChainSelector The selector of the destination chain to be whitelisted.\\r\\n    function whitelistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\\r\\n        whitelistedDestinationChains[_destinationChainSelector] = true;\\r\\n    }\\r\\n\\r\\n    /// @dev Denylists a chain for transactions.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _destinationChainSelector The selector of the destination chain to be denylisted.\\r\\n    function denylistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\\r\\n        whitelistedDestinationChains[_destinationChainSelector] = false;\\r\\n    }\\r\\n\\r\\n    function addReceiver(string memory _blockchainName, address _receiverAddress) public onlyOwner{\\r\\n        require(_receiverAddress != address(0), \\\"Enter a valid address!\\\");\\r\\n        require(ccipReceicers[_receiverAddress].isReceiver == false, \\\"Receiver is already registered!\\\");\\r\\n\\r\\n        ReceiverInfo memory newReceiver = ReceiverInfo({\\r\\n            blockchainName: _blockchainName,\\r\\n            receiverAddress: _receiverAddress,\\r\\n            isReceiver: true\\r\\n        });\\r\\n        \\r\\n        ccipReceicers[_receiverAddress] = newReceiver;\\r\\n\\r\\n        emit CCIPReceiverAdded(_blockchainName, _receiverAddress);\\r\\n    }\\r\\n\\r\\n    function removeReceiver(address _receiverAddress) public onlyOwner {\\r\\n        require(ccipReceicers[_receiverAddress].isReceiver == true, \\\"Receiver is already registered!\\\");\\r\\n\\r\\n        delete ccipReceicers[_receiverAddress];\\r\\n\\r\\n        emit CCIPReceiverRemoved(_receiverAddress);\\r\\n    }\\r\\n\\r\\n    function sendMessagePayLINK(uint64 _destinationChainSelector, address _receiver, bytes memory _data) external /*onlyOwner onlyWhitelistedDestinationChain(_destinationChainSelector)*/ returns (bytes32 messageId){\\r\\n        require(ccipReceicers[_receiver].receiverAddress != address(0), \\\"Enter a valid receiver address!\\\");\\r\\n        require(ccipReceicers[_receiver].isReceiver == true, \\\"This receiver is not whitelisted yet!\\\");\\r\\n        \\r\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\r\\n            ccipReceicers[_receiver].receiverAddress,\\r\\n            _data,\\r\\n            address(linkToken)\\r\\n        );\\r\\n\\r\\n        IRouterClient router = IRouterClient(this.getRouter());\\r\\n\\r\\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        if (fees > linkToken.balanceOf(address(this)))\\r\\n            revert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\\r\\n\\r\\n        linkToken.approve(address(router), fees);\\r\\n\\r\\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        emit MessageSent( messageId, _destinationChainSelector, _receiver, _data, address(linkToken), fees);\\r\\n\\r\\n        return messageId;\\r\\n    }\\r\\n\\r\\n    function _buildCCIPMessage(address _receiver, bytes memory _data, address _feeTokenAddress) internal pure returns (Client.EVM2AnyMessage memory) {\\r\\n        Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\\r\\n            receiver: abi.encode(_receiver),\\r\\n            data: abi.encode(_data),\\r\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\r\\n            extraArgs:  Client._argsToBytes(\\r\\n                Client.EVMExtraArgsV1({gasLimit: 800_000, strict: false})\\r\\n            ),\\r\\n            feeToken: _feeTokenAddress\\r\\n        });\\r\\n        return evm2AnyMessage;\\r\\n    }\\r\\n\\r\\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override{\\r\\n        lastReceivedMessageId = any2EvmMessage.messageId;\\r\\n        lastReceivedText = abi.decode(any2EvmMessage.data, (string));\\r\\n\\r\\n        emit MessageReceived(any2EvmMessage.messageId, any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)), abi.decode(any2EvmMessage.data, (string)), any2EvmMessage.destTokenAmounts[0].token, any2EvmMessage.destTokenAmounts[0].amount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function withdraw(address _beneficiary) public /*onlyOwner*/ {\\r\\n        uint256 amount = address(this).balance;\\r\\n\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\r\\n\\r\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken( address _beneficiary, address _token) public /*onlyOwner*/ {\\r\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        IERC20(_token).transfer(_beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    /* MODIFIERS */\\r\\n\\r\\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is whitelisted.\\r\\n    /// @param _destinationChainSelector The selector of the destination chain.\\r\\n    modifier onlyWhitelistedDestinationChain(uint64 _destinationChainSelector) {\\r\\n        if (!whitelistedDestinationChains[_destinationChainSelector])\\r\\n            revert DestinationChainNotWhitelisted(_destinationChainSelector);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(){\\r\\n        require(msg.sender == owner, \\\"Only Owner can call this function!\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5229d711de072d2efc43a0fa46a011cae07945fee6464d8c95a35a0dbdcb78e9\",\"license\":\"MIT\"},\"contracts/HorizonFunctions.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\r\\n// pragma solidity 0.8.19;\\r\\n\\r\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\r\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\r\\nimport \\\"./HorizonFujiAssistant.sol\\\";\\r\\n\\r\\ncontract HorizonFunctions is FunctionsClient{\\r\\n    using FunctionsRequest for FunctionsRequest.Request;\\r\\n\\r\\n    // State variables to store the last request ID, response, and error\\r\\n    bytes32 public s_lastRequestId;\\r\\n\\r\\n    // Custom error type\\r\\n    error UnexpectedRequestID(bytes32 requestId);\\r\\n\\r\\n    // Event to log responses\\r\\n    event Response( bytes32 indexed requestId, bytes response, bytes err);\\r\\n\\r\\n    struct VehicleData {\\r\\n        string value;\\r\\n        uint uintValue;\\r\\n        uint requestTime;\\r\\n        uint responseTime;\\r\\n        bytes lastResponse;\\r\\n        bytes lastError;\\r\\n        bool isRequest;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 requestId => VehicleData) public vehicleDataMapping;\\r\\n\\r\\n    uint64 private subscriptionId;\\r\\n    address router;\\r\\n    uint32 gasLimit;\\r\\n    bytes32 donID;\\r\\n\\r\\n    // JavaScript source code\\r\\n    // Fetch vehicle value from the FIPE API.\\r\\n    // Documentation: https://github.com/deividfortuna/fipe\\r\\n    string source =\\r\\n        \\\"const tipoAutomovel = args[0];\\\" //motos\\r\\n        \\\"const idMarca = args[1];\\\" //77\\r\\n        \\\"const idModelo = args[2];\\\" //5223\\r\\n        \\\"const dataModelo = args[3];\\\" //2015-1\\r\\n        \\\"const apiResponse = await Functions.makeHttpRequest({\\\"\\r\\n            \\\"url: `https://parallelum.com.br/fipe/api/v1/${tipoAutomovel}/marcas/${idMarca}/modelos/${idModelo}/anos/${dataModelo}`\\\"\\r\\n        \\\"});\\\"\\r\\n        \\\"if (apiResponse.error) {\\\"\\r\\n        \\\"throw Error('Request failed');\\\"\\r\\n        \\\"}\\\"\\r\\n        \\\"const { data } = apiResponse;\\\"\\r\\n        \\\"return Functions.encodeString(data.Valor);\\\";\\r\\n\\r\\n    HorizonFujiAssistant assistant = HorizonFujiAssistant(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDERE\\u00c7O\\r\\n\\r\\n    constructor(uint64 _subscriptionId, //770\\r\\n                address _routerFunctions, // 0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0 - Fuji\\r\\n                uint32 _gasLimit, // 300000\\r\\n                bytes32 _donID // 0x66756e2d6176616c616e6368652d66756a692d31000000000000000000000000 - Fuji\\r\\n                ) FunctionsClient(_routerFunctions) {\\r\\n        subscriptionId = _subscriptionId; //770\\r\\n        router = _routerFunctions; // 0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0 - Fuji\\r\\n        gasLimit = _gasLimit; // 300000\\r\\n        donID = _donID; // 0x66756e2d6176616c616e6368652d66756a692d31000000000000000000000000 - Fuji\\r\\n    }\\r\\n\\r\\n    function sendRequest(string[] calldata args) external returns (bytes32 requestId) { //[\\\"motos\\\",77,5223,\\\"2015-1\\\"]\\r\\n\\r\\n        FunctionsRequest.Request memory req;\\r\\n\\r\\n        req.initializeRequestForInlineJavaScript(source);\\r\\n\\r\\n        if (args.length > 0) req.setArgs(args);\\r\\n\\r\\n        s_lastRequestId = _sendRequest(req.encodeCBOR(), subscriptionId, gasLimit, donID);\\r\\n        \\r\\n        VehicleData memory vehicleInfo = VehicleData ({\\r\\n            value: \\\"\\\",\\r\\n            uintValue: 0,\\r\\n            requestTime: block.timestamp,\\r\\n            responseTime: 0,\\r\\n            lastResponse: \\\"\\\",\\r\\n            lastError: \\\"\\\",\\r\\n            isRequest: true\\r\\n        });\\r\\n\\r\\n        vehicleDataMapping[s_lastRequestId] = vehicleInfo;\\r\\n\\r\\n        return s_lastRequestId;\\r\\n    }\\r\\n\\r\\n    function fulfillRequest( bytes32 requestId, bytes memory response, bytes memory err) internal override {\\r\\n        VehicleData storage vehicle = vehicleDataMapping[requestId];\\r\\n\\r\\n        if (vehicle.isRequest == false) {\\r\\n            revert UnexpectedRequestID(requestId); // Check if request IDs match\\r\\n        }\\r\\n\\r\\n        // Update the vehicle mapping with the response and any errors\\r\\n        vehicle.lastResponse = response;\\r\\n        vehicle.lastError = err;\\r\\n        vehicle.value = string(response);\\r\\n        vehicle.responseTime = block.timestamp;\\r\\n\\r\\n        uint valueConverted = assistant.stringToUint(vehicle.value); //I need convert into USdolars\\r\\n\\r\\n        vehicle.uintValue = (valueConverted / 5);\\r\\n\\r\\n        // Emit an event to log the response\\r\\n        emit Response(requestId, response, err);\\r\\n    }\\r\\n\\r\\n    function returnFunctionsInfo(bytes32 requestId) external view returns(uint, uint){\\r\\n        VehicleData storage vehicle = vehicleDataMapping[requestId];\\r\\n        uint vehicleValue = vehicle.uintValue;\\r\\n        uint responseTime = vehicle.responseTime;\\r\\n\\r\\n        return (vehicleValue, responseTime);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3078493dfd9fdc2750452f5436adfeac01ec3992530f48dae7a8623be50e00b7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5720,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"lastReceivedMessageId","offset":0,"slot":"0","type":"t_bytes32"},{"astId":5722,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"lastReceivedText","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":5724,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"horizonR","offset":0,"slot":"2","type":"t_address"},{"astId":5726,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"subscriptionId","offset":20,"slot":"2","type":"t_uint64"},{"astId":5728,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"router","offset":0,"slot":"3","type":"t_address"},{"astId":5730,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"gasLimit","offset":20,"slot":"3","type":"t_uint32"},{"astId":5732,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"donID","offset":0,"slot":"4","type":"t_bytes32"},{"astId":5735,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"linkToken","offset":0,"slot":"5","type":"t_contract(LinkTokenInterface)1390"},{"astId":5774,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"rwaMonitors","offset":0,"slot":"6","type":"t_array(t_struct(RwaMonitor)5770_storage)dyn_storage"},{"astId":5779,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"permissionsInfo","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_struct(Permissions)5763_storage)"},{"astId":5783,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"whitelistedSourceChains","offset":0,"slot":"8","type":"t_mapping(t_uint64,t_bool)"},{"astId":5787,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"whitelistedSenders","offset":0,"slot":"9","type":"t_mapping(t_address,t_bool)"},{"astId":5796,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"sender","offset":0,"slot":"10","type":"t_contract(HorizonFujiS)7177"},{"astId":5805,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"functions","offset":0,"slot":"11","type":"t_contract(HorizonFunctions)7450"},{"astId":5814,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"rwa","offset":0,"slot":"12","type":"t_contract(ERC721)3817"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_array(t_struct(RwaMonitor)5770_storage)dyn_storage":{"base":"t_struct(RwaMonitor)5770_storage","encoding":"dynamic_array","label":"struct HorizonFujiR.RwaMonitor[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(ERC721)3817":{"encoding":"inplace","label":"contract ERC721","numberOfBytes":"20"},"t_contract(HorizonFujiS)7177":{"encoding":"inplace","label":"contract HorizonFujiS","numberOfBytes":"20"},"t_contract(HorizonFunctions)7450":{"encoding":"inplace","label":"contract HorizonFunctions","numberOfBytes":"20"},"t_contract(LinkTokenInterface)1390":{"encoding":"inplace","label":"contract LinkTokenInterface","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(Permissions)5763_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct HorizonFujiR.Permissions)","numberOfBytes":"32","value":"t_struct(Permissions)5763_storage"},"t_mapping(t_uint64,t_bool)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => bool)","numberOfBytes":"32","value":"t_bool"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Permissions)5763_storage":{"encoding":"inplace","label":"struct HorizonFujiR.Permissions","members":[{"astId":5737,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"idTitle","offset":0,"slot":"0","type":"t_uint256"},{"astId":5739,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"drawNumber","offset":0,"slot":"1","type":"t_uint256"},{"astId":5741,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"contractId","offset":0,"slot":"2","type":"t_uint256"},{"astId":5743,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"rwaOwner","offset":0,"slot":"3","type":"t_address"},{"astId":5745,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"ensuranceValueNeeded","offset":0,"slot":"4","type":"t_uint256"},{"astId":5747,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"ensureValueNow","offset":0,"slot":"5","type":"t_uint256"},{"astId":5749,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"colateralId","offset":0,"slot":"6","type":"t_uint256"},{"astId":5752,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"args","offset":0,"slot":"7","type":"t_array(t_string_storage)dyn_storage"},{"astId":5754,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"lastRequestId","offset":0,"slot":"8","type":"t_bytes32"},{"astId":5756,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"lastRequestTime","offset":0,"slot":"9","type":"t_uint256"},{"astId":5758,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"lastResponseTime","offset":0,"slot":"10","type":"t_uint256"},{"astId":5760,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"colateralLocked","offset":0,"slot":"11","type":"t_bool"},{"astId":5762,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"isPermission","offset":1,"slot":"11","type":"t_bool"}],"numberOfBytes":"384"},"t_struct(RwaMonitor)5770_storage":{"encoding":"inplace","label":"struct HorizonFujiR.RwaMonitor","members":[{"astId":5765,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"rwaId","offset":0,"slot":"0","type":"t_uint256"},{"astId":5767,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"hashPermission","offset":0,"slot":"1","type":"t_bytes32"},{"astId":5769,"contract":"contracts/HorizonFujiR.sol:HorizonFujiR","label":"isActive","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"addSender(address)":{"notice":"This function can only be called by the owner."},"addSourceChain(uint64)":{"notice":"This function can only be called by the owner."},"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."},"getRouter()":{"notice":"Return the current router"},"removeSender(address)":{"notice":"This function can only be called by the owner."},"removelistSourceChain(uint64)":{"notice":"This function can only be called by the owner."},"supportsInterface(bytes4)":{"notice":"IERC165 supports an interfaceId"}},"version":1}}},"contracts/HorizonFujiS.sol":{"HorizonFujiS":{"abi":[{"inputs":[{"internalType":"address","name":"_router","type":"address"},{"internalType":"address","name":"_linkToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint64","name":"destinationChainSelector","type":"uint64"}],"name":"DestinationChainNotWhitelisted","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"FailedToWithdrawEth","type":"error"},{"inputs":[{"internalType":"address","name":"router","type":"address"}],"name":"InvalidRouter","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentBalance","type":"uint256"},{"internalType":"uint256","name":"calculatedFees","type":"uint256"}],"name":"NotEnoughBalance","type":"error"},{"inputs":[],"name":"NothingToWithdraw","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_blockchainName","type":"string"},{"indexed":false,"internalType":"address","name":"_receiverAddress","type":"address"}],"name":"CCIPReceiverAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_receiverAddress","type":"address"}],"name":"CCIPReceiverRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"messageId","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"string","name":"text","type":"string"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"MessageReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"messageId","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"destinationChainSelector","type":"uint64"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"bytes","name":"_data","type":"bytes"},{"indexed":false,"internalType":"address","name":"feeToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"fees","type":"uint256"}],"name":"MessageSent","type":"event"},{"inputs":[{"internalType":"string","name":"_blockchainName","type":"string"},{"internalType":"address","name":"_receiverAddress","type":"address"}],"name":"addReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"receiverAddress","type":"address"}],"name":"ccipReceicers","outputs":[{"internalType":"string","name":"blockchainName","type":"string"},{"internalType":"address","name":"receiverAddress","type":"address"},{"internalType":"bool","name":"isReceiver","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]"}],"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple"}],"name":"ccipReceive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_destinationChainSelector","type":"uint64"}],"name":"denylistDestinationChain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_receiverAddress","type":"address"}],"name":"removeReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_destinationChainSelector","type":"uint64"},{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"sendMessagePayLINK","outputs":[{"internalType":"bytes32","name":"messageId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"_destinationChainSelector","type":"uint64"}],"name":"whitelistDestinationChain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"name":"whitelistedDestinationChains","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_beneficiary","type":"address"},{"internalType":"address","name":"_token","type":"address"}],"name":"withdrawToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}},"denylistDestinationChain(uint64)":{"details":"Denylists a chain for transactions.","params":{"_destinationChainSelector":"The selector of the destination chain to be denylisted."}},"getRouter()":{"returns":{"_0":"i_router address"}},"supportsInterface(bytes4)":{"params":{"interfaceId":"The interfaceId to check"},"returns":{"_0":"true if the interfaceId is supported"}},"whitelistDestinationChain(uint64)":{"details":"Whitelists a chain for transactions.","params":{"_destinationChainSelector":"The selector of the destination chain to be whitelisted."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":214,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60a0346100bb57601f6115e538819003918201601f19168301916001600160401b038311848410176100c05780849260409485528339810103126100bb57610052602061004b836100d6565b92016100d6565b906001600160a01b0390818116156100a25760805260018060a01b03199116816006541617600655339060035416176003556040516114fa90816100eb823960805181818160c401526106db0152f35b6040516335fdcccd60e21b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100bb5756fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a7146110ca575080631d5e294714610e3f5780631f27166d14610d505780633aeac4e114610c7057806351cff8d914610bcf5780636552d8b414610aef57806373645cff14610aa05780637898d18414610a4e578063835b347c14610a0f57806385572ffb1461069e578063a30e3770146100f85763b0f479a1146100ae573861000f565b346100f35760003660031901126100f3576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b346100f35760603660031901126100f357610111611274565b6101196111c6565b6044356001600160401b0381116100f35761013890369060040161128a565b6001600160a01b0382811660009081526005602052604090206001015491939116156106595760018060a01b0382166000526005602052600160ff816040600020015460a01c161515036106065760018060a01b038216600052600560205260018060a01b03600160406000200154169160018060a01b036006541691606060806040516101c58161111d565b8281528260208201528260408201526000838201520152604051936020850152602084526101f284611138565b60405160208082015261021a8161020c604082018961124f565b03601f198101835282611153565b60405190602082018281106001600160401b038211176105f057604052600082526040519561024887611138565b620c350087526020870160008152604051976397a657c960e01b60208a01525160248901525115156044880152604487528660808101106001600160401b036080890111176105f057608087016040526102a46080880161111d565b608087015260a086015260c08501528260e0850152836101008101526040519263b0f479a160e01b8452602084600481305afa93841561048e576000946105ac575b506040516320487ded60e01b8152936020858061030a60808a018760048401611362565b03816001600160a01b0385165afa94851561048e57600095610578575b506040516370a0823160e01b8152306004820152602081602481865afa90811561048e57600091610546575b5085116104c75760405163095ea7b360e01b81526001600160a01b03821660048201526024810186905291602090839060449082906000905af190811561048e576103c49660209360809361049a575b5060006040518099819582946396f4e9f960e01b8452018860048401611362565b03926001600160a01b03165af193841561048e57600094610457575b5060209484926001600160401b037f3d8a9f055772202d2c3c1fddbad930d3dbe588d8692b75b84cee0719462829119360018060a01b03600654169661043f60405195869560018060a01b0316865260808c870152608086019061124f565b976040850152606084015216940390a3604051908152f35b909193506020813d602011610486575b8161047460209383611153565b810103126100f35751929060206103e0565b3d9150610467565b6040513d6000823e3d90fd5b6104b990853d87116104c0575b6104b18183611153565b81019061142b565b50896103a3565b503d6104a7565b6040516370a0823160e01b815230600482015285602082602481875afa90811561048e57600091610511575b6044925060405191634787a10360e11b835260048301526024820152fd5b90506020823d60201161053e575b8161052c60209383611153565b810103126100f35760449151906104f3565b3d915061051f565b90506020813d602011610570575b8161056160209383611153565b810103126100f3575188610353565b3d9150610554565b9094506020813d6020116105a4575b8161059460209383611153565b810103126100f357519387610327565b3d9150610587565b9093506020813d6020116105e8575b816105c860209383611153565b810103126100f357516001600160a01b03811681036100f35792866102e6565b3d91506105bb565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152602560248201527f54686973207265636569766572206973206e6f742077686974656c6973746564604482015264207965742160d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601f60248201527f456e74657220612076616c6964207265636569766572206164647265737321006044820152606490fd5b346100f357600319602036820181136100f3576004356001600160401b03928382116100f35760a09082360301126100f3576001600160a01b03917f0000000000000000000000000000000000000000000000000000000000000000831633036109f7576040519261070f8461111d565b8260040135845260248301359385851685036100f35782810194855260448401358681116100f357610747906004369187010161128a565b956040820196875260648501358181116100f35761076b906004369188010161128a565b94606083019586526084810135908282116100f3570191366023840112156100f3576004830135928284116105f057604051936107ad878260051b0186611153565b80855260248786019160061b830101913683116100f357602401905b8282106109ba575050506080810192835280516000556107f28651868082518301019101611443565b80518381116105f0578060019261080984546111f2565b601f8111610962575b508890601f83116001146108e2576000926108d7575b5050600019600383901b1c191690821b1790555b51955116955183818051810103126100f357830151918083168093036100f3576108c7846108ac6108977f90ec910a8f80bb04e184a806e2ae6f8786ef2ae898859a3180f953397edc12019851838082518301019101611443565b936108a286516114a1565b51511694516114a1565b5101519160806040519687968752860152608085019061124f565b91604084015260608301520390a3005b015190508b80610828565b90849350601f19831691846000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69260005b8c82821061094c5750508411610933575b505050811b01905561083c565b015160001960f88460031b161c191690558b8080610926565b8385015186558897909501949384019301610915565b6109aa90856000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f850160051c8101918c86106109b0575b601f0160051c019061134b565b8c610812565b909150819061099d565b6040823603126100f357604051906109d182611138565b82359088821682036100f357828a926040945282850135838201528152019101906107c9565b6040516335fdcccd60e21b8152336004820152602490fd5b346100f35760203660031901126100f3576001600160401b03610a30611274565b166000526004602052602060ff604060002054166040519015158152f35b346100f35760203660031901126100f3576001600160401b03610a6f611274565b610a8460018060a01b036003541633146112a8565b166000908152600460205260409020805460ff19166001179055005b346100f35760203660031901126100f3576001600160401b03610ac1611274565b610ad660018060a01b036003541633146112a8565b166000908152600460205260409020805460ff19169055005b346100f35760203660031901126100f3577fc98322fddcb9467a648bda840e8c0844a6a420e0a62af038077f0de932e729666020610b2b6111dc565b6003546001600160a01b039190610b4590831633146112a8565b168060005260058252610b69600160ff816040600020015460a01c161515146112ff565b80600052600582526000600160408220610b8381546111f2565b80610b95575b500155604051908152a1005b601f81118314610baa57508281555b86610b89565b8390828252610bc6601f888420920160051c820185830161134b565b81835555610ba4565b346100f35760203660031901126100f357610be86111dc565b47908115610c5e57600080808085855af13d15610c59573d610c0981611174565b90610c176040519283611153565b8152600060203d92013e5b15610c2957005b604051639d11f56360e01b81523360048201526001600160a01b0390911660248201526044810191909152606490fd5b610c22565b604051630686827b60e51b8152600490fd5b346100f35760403660031901126100f357610c896111dc565b6001600160a01b03610c996111c6565b16604051916370a0823160e01b83523060048401526020928381602481865afa90811561048e57600091610d23575b508015610c5e5760405163a9059cbb60e01b81526001600160a01b039290921660048301526024820152908290829060449082906000905af1801561048e57610d0d57005b8161001b92903d106104c0576104b18183611153565b90508381813d8311610d49575b610d3a8183611153565b810103126100f3575184610cc8565b503d610d30565b346100f3576020806003193601126100f3576001600160a01b0380610d736111dc565b166000526005825260406000209060405191600090805491610d94836111f2565b808652600193808516908115610e235750600114610def575b5091610dd99591610dc28660ff950387611153565b01549060405195869560608752606087019061124f565b9382169085015260a01c16151560408301520390f35b60008381528781209092505b818310610e1057505084018501610dd9610dad565b8054878401890152918701918401610dfb565b60ff19168789015250151560051b850186019050610dd9610dad565b346100f35760403660031901126100f3576001600160401b036004358181116100f357366023820112156100f357610e8190369060248160040135910161118f565b610e896111c6565b6003546001600160a01b03918291610ea490831633146112a8565b16801561108c578060005260209160058352600190610ed060ff836040600020015460a01c16156112ff565b6040519060608201828110888211176105f0576040528582528482019284845260408301928184528560005260058752604060002090519889519081116105f057610f1b82546111f2565b601f811161105c575b5087601f8211600114610fce579080610fba9a99989796959493927f619facc3344a864638bdf6b94faebe32fea796eccc10ab263d90da8b44c42be49c600092610fc3575b5050600019600383901b1c191690831b1781555b0192511682549160ff60a01b9051151560a01b16916affffffffffffffffffffff60a81b161717905560405193849360408552604085019061124f565b918301520390a1005b015190508c80610f69565b601f1982169083600052896000209160005b81811061104757509183917f619facc3344a864638bdf6b94faebe32fea796eccc10ab263d90da8b44c42be49d879695610fba9e9d9c9b9a9998951061102e575b505050811b018155610f7d565b015160001960f88460031b161c191690558c8080611021565b8d830151845592860192918b01918b01610fe0565b611086908360005289600020601f840160051c8101918b85106109b057601f0160051c019061134b565b8a610f24565b60405162461bcd60e51b8152602060048201526016602482015275456e74657220612076616c696420616464726573732160501b6044820152606490fd5b346100f35760203660031901126100f3576004359063ffffffff60e01b82168092036100f3576020916385572ffb60e01b811490811561110c575b5015158152f35b6301ffc9a760e01b14905083611105565b60a081019081106001600160401b038211176105f057604052565b604081019081106001600160401b038211176105f057604052565b90601f801991011681019081106001600160401b038211176105f057604052565b6001600160401b0381116105f057601f01601f191660200190565b92919261119b82611174565b916111a96040519384611153565b8294818452818301116100f3578281602093846000960137010152565b602435906001600160a01b03821682036100f357565b600435906001600160a01b03821682036100f357565b90600182811c92168015611222575b602083101461120c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611201565b60005b83811061123f5750506000910152565b818101518382015260200161122f565b906020916112688151809281855285808601910161122c565b601f01601f1916010190565b600435906001600160401b03821682036100f357565b9080601f830112156100f3578160206112a59335910161118f565b90565b156112af57565b60405162461bcd60e51b815260206004820152602260248201527f4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6044820152616e2160f01b6064820152608490fd5b1561130657565b60405162461bcd60e51b815260206004820152601f60248201527f526563656976657220697320616c7265616479207265676973746572656421006044820152606490fd5b818110611356575050565b6000815560010161134b565b906001600160401b039093929316815260406020918183820152611391855160a08484015260e083019061124f565b916113ad8487015193603f19948585830301606086015261124f565b8187015194848483030160808501528080875193848152019601926000905b83821061140257505050505060c060806112a5959660018060a01b0360608201511660a08501520151928285030191015261124f565b845180516001600160a01b031689528301518884015296870196938201936001909101906113cc565b908160209103126100f3575180151581036100f35790565b6020818303126100f3578051906001600160401b0382116100f3570181601f820112156100f357805161147581611174565b926114836040519485611153565b818452602082840101116100f3576112a5916020808501910161122c565b8051156114ae5760200190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f0128c6531ca8be5d1ba7f2efabdaf97c63d582fb74a9a9422ff2b3e6a2edc0764736f6c63430008140033","opcodes":"PUSH1 0xA0 CALLVALUE PUSH2 0xBB JUMPI PUSH1 0x1F PUSH2 0x15E5 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xC0 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x40 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xBB JUMPI PUSH2 0x52 PUSH1 0x20 PUSH2 0x4B DUP4 PUSH2 0xD6 JUMP JUMPDEST SWAP3 ADD PUSH2 0xD6 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP2 AND ISZERO PUSH2 0xA2 JUMPI PUSH1 0x80 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP2 AND DUP2 PUSH1 0x6 SLOAD AND OR PUSH1 0x6 SSTORE CALLER SWAP1 PUSH1 0x3 SLOAD AND OR PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD PUSH2 0x14FA SWAP1 DUP2 PUSH2 0xEB DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH1 0xC4 ADD MSTORE PUSH2 0x6DB ADD MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35FDCCCD PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xBB JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x10CA JUMPI POP DUP1 PUSH4 0x1D5E2947 EQ PUSH2 0xE3F JUMPI DUP1 PUSH4 0x1F27166D EQ PUSH2 0xD50 JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0xC70 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0xBCF JUMPI DUP1 PUSH4 0x6552D8B4 EQ PUSH2 0xAEF JUMPI DUP1 PUSH4 0x73645CFF EQ PUSH2 0xAA0 JUMPI DUP1 PUSH4 0x7898D184 EQ PUSH2 0xA4E JUMPI DUP1 PUSH4 0x835B347C EQ PUSH2 0xA0F JUMPI DUP1 PUSH4 0x85572FFB EQ PUSH2 0x69E JUMPI DUP1 PUSH4 0xA30E3770 EQ PUSH2 0xF8 JUMPI PUSH4 0xB0F479A1 EQ PUSH2 0xAE JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH2 0x111 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x11C6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF3 JUMPI PUSH2 0x138 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x128A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 SWAP4 SWAP2 AND ISZERO PUSH2 0x659 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO SUB PUSH2 0x606 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x6 SLOAD AND SWAP2 PUSH1 0x60 PUSH1 0x80 PUSH1 0x40 MLOAD PUSH2 0x1C5 DUP2 PUSH2 0x111D JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x20 DUP5 MSTORE PUSH2 0x1F2 DUP5 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH2 0x21A DUP2 PUSH2 0x20C PUSH1 0x40 DUP3 ADD DUP10 PUSH2 0x124F JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1153 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE PUSH1 0x40 MLOAD SWAP6 PUSH2 0x248 DUP8 PUSH2 0x1138 JUMP JUMPDEST PUSH3 0xC3500 DUP8 MSTORE PUSH1 0x20 DUP8 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP8 PUSH4 0x97A657C9 PUSH1 0xE0 SHL PUSH1 0x20 DUP11 ADD MSTORE MLOAD PUSH1 0x24 DUP10 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x44 DUP9 ADD MSTORE PUSH1 0x44 DUP8 MSTORE DUP7 PUSH1 0x80 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x80 DUP10 ADD GT OR PUSH2 0x5F0 JUMPI PUSH1 0x80 DUP8 ADD PUSH1 0x40 MSTORE PUSH2 0x2A4 PUSH1 0x80 DUP9 ADD PUSH2 0x111D JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MSTORE DUP3 PUSH1 0xE0 DUP6 ADD MSTORE DUP4 PUSH2 0x100 DUP2 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH4 0xB0F479A1 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x20 DUP5 PUSH1 0x4 DUP2 ADDRESS GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP5 PUSH2 0x5AC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x20487DED PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 PUSH1 0x20 DUP6 DUP1 PUSH2 0x30A PUSH1 0x80 DUP11 ADD DUP8 PUSH1 0x4 DUP5 ADD PUSH2 0x1362 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP6 PUSH2 0x578 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x546 JUMPI JUMPDEST POP DUP6 GT PUSH2 0x4C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 PUSH1 0x20 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH2 0x3C4 SWAP7 PUSH1 0x20 SWAP4 PUSH1 0x80 SWAP4 PUSH2 0x49A JUMPI JUMPDEST POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP10 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0x96F4E9F9 PUSH1 0xE0 SHL DUP5 MSTORE ADD DUP9 PUSH1 0x4 DUP5 ADD PUSH2 0x1362 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP4 DUP5 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP5 PUSH2 0x457 JUMPI JUMPDEST POP PUSH1 0x20 SWAP5 DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH32 0x3D8A9F055772202D2C3C1FDDBAD930D3DBE588D8692B75B84CEE071946282911 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x6 SLOAD AND SWAP7 PUSH2 0x43F PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE PUSH1 0x80 DUP13 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP8 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE AND SWAP5 SUB SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP4 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x486 JUMPI JUMPDEST DUP2 PUSH2 0x474 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD SWAP3 SWAP1 PUSH1 0x20 PUSH2 0x3E0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x467 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4B9 SWAP1 DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x4C0 JUMPI JUMPDEST PUSH2 0x4B1 DUP2 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x142B JUMP JUMPDEST POP DUP10 PUSH2 0x3A3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP6 PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x511 JUMPI JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x4787A103 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x53E JUMPI JUMPDEST DUP2 PUSH2 0x52C PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI PUSH1 0x44 SWAP2 MLOAD SWAP1 PUSH2 0x4F3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x51F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x570 JUMPI JUMPDEST DUP2 PUSH2 0x561 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD DUP9 PUSH2 0x353 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x554 JUMP JUMPDEST SWAP1 SWAP5 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5A4 JUMPI JUMPDEST DUP2 PUSH2 0x594 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD SWAP4 DUP8 PUSH2 0x327 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x587 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5E8 JUMPI JUMPDEST DUP2 PUSH2 0x5C8 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xF3 JUMPI SWAP3 DUP7 PUSH2 0x2E6 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5BB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973207265636569766572206973206E6F742077686974656C6973746564 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2079657421 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E74657220612076616C696420726563656976657220616464726573732100 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x3 NOT PUSH1 0x20 CALLDATASIZE DUP3 ADD DUP2 SGT PUSH2 0xF3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP3 GT PUSH2 0xF3 JUMPI PUSH1 0xA0 SWAP1 DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH32 0x0 DUP4 AND CALLER SUB PUSH2 0x9F7 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x70F DUP5 PUSH2 0x111D JUMP JUMPDEST DUP3 PUSH1 0x4 ADD CALLDATALOAD DUP5 MSTORE PUSH1 0x24 DUP4 ADD CALLDATALOAD SWAP4 DUP6 DUP6 AND DUP6 SUB PUSH2 0xF3 JUMPI DUP3 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x44 DUP5 ADD CALLDATALOAD DUP7 DUP2 GT PUSH2 0xF3 JUMPI PUSH2 0x747 SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP8 ADD ADD PUSH2 0x128A JUMP JUMPDEST SWAP6 PUSH1 0x40 DUP3 ADD SWAP7 DUP8 MSTORE PUSH1 0x64 DUP6 ADD CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF3 JUMPI PUSH2 0x76B SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP9 ADD ADD PUSH2 0x128A JUMP JUMPDEST SWAP5 PUSH1 0x60 DUP4 ADD SWAP6 DUP7 MSTORE PUSH1 0x84 DUP2 ADD CALLDATALOAD SWAP1 DUP3 DUP3 GT PUSH2 0xF3 JUMPI ADD SWAP2 CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0xF3 JUMPI PUSH1 0x4 DUP4 ADD CALLDATALOAD SWAP3 DUP3 DUP5 GT PUSH2 0x5F0 JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0x7AD DUP8 DUP3 PUSH1 0x5 SHL ADD DUP7 PUSH2 0x1153 JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x24 DUP8 DUP7 ADD SWAP2 PUSH1 0x6 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0xF3 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x9BA JUMPI POP POP POP PUSH1 0x80 DUP2 ADD SWAP3 DUP4 MSTORE DUP1 MLOAD PUSH1 0x0 SSTORE PUSH2 0x7F2 DUP7 MLOAD DUP7 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x1443 JUMP JUMPDEST DUP1 MLOAD DUP4 DUP2 GT PUSH2 0x5F0 JUMPI DUP1 PUSH1 0x1 SWAP3 PUSH2 0x809 DUP5 SLOAD PUSH2 0x11F2 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x962 JUMPI JUMPDEST POP DUP9 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x8E2 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x8D7 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE JUMPDEST MLOAD SWAP6 MLOAD AND SWAP6 MLOAD DUP4 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI DUP4 ADD MLOAD SWAP2 DUP1 DUP4 AND DUP1 SWAP4 SUB PUSH2 0xF3 JUMPI PUSH2 0x8C7 DUP5 PUSH2 0x8AC PUSH2 0x897 PUSH32 0x90EC910A8F80BB04E184A806E2AE6F8786EF2AE898859A3180F953397EDC1201 SWAP9 MLOAD DUP4 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x1443 JUMP JUMPDEST SWAP4 PUSH2 0x8A2 DUP7 MLOAD PUSH2 0x14A1 JUMP JUMPDEST MLOAD MLOAD AND SWAP5 MLOAD PUSH2 0x14A1 JUMP JUMPDEST MLOAD ADD MLOAD SWAP2 PUSH1 0x80 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 MSTORE DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP2 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE SUB SWAP1 LOG3 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP12 DUP1 PUSH2 0x828 JUMP JUMPDEST SWAP1 DUP5 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP5 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH2 0x94C JUMPI POP POP DUP5 GT PUSH2 0x933 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x83C JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP12 DUP1 DUP1 PUSH2 0x926 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP9 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x915 JUMP JUMPDEST PUSH2 0x9AA SWAP1 DUP6 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP13 DUP7 LT PUSH2 0x9B0 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x134B JUMP JUMPDEST DUP13 PUSH2 0x812 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x99D JUMP JUMPDEST PUSH1 0x40 DUP3 CALLDATASIZE SUB SLT PUSH2 0xF3 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x9D1 DUP3 PUSH2 0x1138 JUMP JUMPDEST DUP3 CALLDATALOAD SWAP1 DUP9 DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI DUP3 DUP11 SWAP3 PUSH1 0x40 SWAP5 MSTORE DUP3 DUP6 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x7C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35FDCCCD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xA30 PUSH2 0x1274 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xA6F PUSH2 0x1274 JUMP JUMPDEST PUSH2 0xA84 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x3 SLOAD AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xAC1 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0xAD6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x3 SLOAD AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH32 0xC98322FDDCB9467A648BDA840E8C0844A6A420E0A62AF038077F0DE932E72966 PUSH1 0x20 PUSH2 0xB2B PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH2 0xB45 SWAP1 DUP4 AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH2 0xB69 PUSH1 0x1 PUSH1 0xFF DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO EQ PUSH2 0x12FF JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 DUP3 KECCAK256 PUSH2 0xB83 DUP2 SLOAD PUSH2 0x11F2 JUMP JUMPDEST DUP1 PUSH2 0xB95 JUMPI JUMPDEST POP ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x1F DUP2 GT DUP4 EQ PUSH2 0xBAA JUMPI POP DUP3 DUP2 SSTORE JUMPDEST DUP7 PUSH2 0xB89 JUMP JUMPDEST DUP4 SWAP1 DUP3 DUP3 MSTORE PUSH2 0xBC6 PUSH1 0x1F DUP9 DUP5 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD DUP6 DUP4 ADD PUSH2 0x134B JUMP JUMPDEST DUP2 DUP4 SSTORE SSTORE PUSH2 0xBA4 JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH2 0xBE8 PUSH2 0x11DC JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0xC5E JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP6 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0xC59 JUMPI RETURNDATASIZE PUSH2 0xC09 DUP2 PUSH2 0x1174 JUMP JUMPDEST SWAP1 PUSH2 0xC17 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0xC29 JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9D11F563 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x686827B PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH2 0xC89 PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC99 PUSH2 0x11C6 JUMP JUMPDEST AND PUSH1 0x40 MLOAD SWAP2 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP4 MSTORE ADDRESS PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x20 SWAP3 DUP4 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP2 PUSH2 0xD23 JUMPI JUMPDEST POP DUP1 ISZERO PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x48E JUMPI PUSH2 0xD0D JUMPI STOP JUMPDEST DUP2 PUSH2 0x1B SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x4C0 JUMPI PUSH2 0x4B1 DUP2 DUP4 PUSH2 0x1153 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xD49 JUMPI JUMPDEST PUSH2 0xD3A DUP2 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD DUP5 PUSH2 0xCC8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xD30 JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xD73 PUSH2 0x11DC JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x0 SWAP1 DUP1 SLOAD SWAP2 PUSH2 0xD94 DUP4 PUSH2 0x11F2 JUMP JUMPDEST DUP1 DUP7 MSTORE PUSH1 0x1 SWAP4 DUP1 DUP6 AND SWAP1 DUP2 ISZERO PUSH2 0xE23 JUMPI POP PUSH1 0x1 EQ PUSH2 0xDEF JUMPI JUMPDEST POP SWAP2 PUSH2 0xDD9 SWAP6 SWAP2 PUSH2 0xDC2 DUP7 PUSH1 0xFF SWAP6 SUB DUP8 PUSH2 0x1153 JUMP JUMPDEST ADD SLOAD SWAP1 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0x60 DUP8 MSTORE PUSH1 0x60 DUP8 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP4 DUP3 AND SWAP1 DUP6 ADD MSTORE PUSH1 0xA0 SHR AND ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE DUP8 DUP2 KECCAK256 SWAP1 SWAP3 POP JUMPDEST DUP2 DUP4 LT PUSH2 0xE10 JUMPI POP POP DUP5 ADD DUP6 ADD PUSH2 0xDD9 PUSH2 0xDAD JUMP JUMPDEST DUP1 SLOAD DUP8 DUP5 ADD DUP10 ADD MSTORE SWAP2 DUP8 ADD SWAP2 DUP5 ADD PUSH2 0xDFB JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP10 ADD MSTORE POP ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD DUP7 ADD SWAP1 POP PUSH2 0xDD9 PUSH2 0xDAD JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF3 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0xF3 JUMPI PUSH2 0xE81 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x118F JUMP JUMPDEST PUSH2 0xE89 PUSH2 0x11C6 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 SWAP2 PUSH2 0xEA4 SWAP1 DUP4 AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND DUP1 ISZERO PUSH2 0x108C JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x5 DUP4 MSTORE PUSH1 0x1 SWAP1 PUSH2 0xED0 PUSH1 0xFF DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xA0 SHR AND ISZERO PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT DUP9 DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE DUP6 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 DUP5 DUP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 DUP5 MSTORE DUP6 PUSH1 0x0 MSTORE PUSH1 0x5 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD SWAP9 DUP10 MLOAD SWAP1 DUP2 GT PUSH2 0x5F0 JUMPI PUSH2 0xF1B DUP3 SLOAD PUSH2 0x11F2 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x105C JUMPI JUMPDEST POP DUP8 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xFCE JUMPI SWAP1 DUP1 PUSH2 0xFBA SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH32 0x619FACC3344A864638BDF6B94FAEBE32FEA796ECCC10AB263D90DA8B44C42BE4 SWAP13 PUSH1 0x0 SWAP3 PUSH2 0xFC3 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP4 SHL OR DUP2 SSTORE JUMPDEST ADD SWAP3 MLOAD AND DUP3 SLOAD SWAP2 PUSH1 0xFF PUSH1 0xA0 SHL SWAP1 MLOAD ISZERO ISZERO PUSH1 0xA0 SHL AND SWAP2 PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA8 SHL AND OR OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP2 DUP4 ADD MSTORE SUB SWAP1 LOG1 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP13 DUP1 PUSH2 0xF69 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 DUP4 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1047 JUMPI POP SWAP2 DUP4 SWAP2 PUSH32 0x619FACC3344A864638BDF6B94FAEBE32FEA796ECCC10AB263D90DA8B44C42BE4 SWAP14 DUP8 SWAP7 SWAP6 PUSH2 0xFBA SWAP15 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP6 LT PUSH2 0x102E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP2 SSTORE PUSH2 0xF7D JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP13 DUP1 DUP1 PUSH2 0x1021 JUMP JUMPDEST DUP14 DUP4 ADD MLOAD DUP5 SSTORE SWAP3 DUP7 ADD SWAP3 SWAP2 DUP12 ADD SWAP2 DUP12 ADD PUSH2 0xFE0 JUMP JUMPDEST PUSH2 0x1086 SWAP1 DUP4 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP12 DUP6 LT PUSH2 0x9B0 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x134B JUMP JUMPDEST DUP11 PUSH2 0xF24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x456E74657220612076616C6964206164647265737321 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0xF3 JUMPI PUSH1 0x20 SWAP2 PUSH4 0x85572FFB PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x110C JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x5F0 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x119B DUP3 PUSH2 0x1174 JUMP JUMPDEST SWAP2 PUSH2 0x11A9 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1153 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xF3 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1222 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x120C JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1201 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x123F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x122F JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1268 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x122C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xF3 JUMPI DUP2 PUSH1 0x20 PUSH2 0x12A5 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x118F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12AF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79204F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6E21 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1306 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563656976657220697320616C726561647920726567697374657265642100 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x1356 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x134B JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP4 SWAP3 SWAP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 SWAP2 DUP2 DUP4 DUP3 ADD MSTORE PUSH2 0x1391 DUP6 MLOAD PUSH1 0xA0 DUP5 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP2 PUSH2 0x13AD DUP5 DUP8 ADD MLOAD SWAP4 PUSH1 0x3F NOT SWAP5 DUP6 DUP6 DUP4 SUB ADD PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x124F JUMP JUMPDEST DUP2 DUP8 ADD MLOAD SWAP5 DUP5 DUP5 DUP4 SUB ADD PUSH1 0x80 DUP6 ADD MSTORE DUP1 DUP1 DUP8 MLOAD SWAP4 DUP5 DUP2 MSTORE ADD SWAP7 ADD SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x1402 JUMPI POP POP POP POP POP PUSH1 0xC0 PUSH1 0x80 PUSH2 0x12A5 SWAP6 SWAP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0xA0 DUP6 ADD MSTORE ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x124F JUMP JUMPDEST DUP5 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 MSTORE DUP4 ADD MLOAD DUP9 DUP5 ADD MSTORE SWAP7 DUP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x13CC JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xF3 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xF3 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xF3 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xF3 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xF3 JUMPI DUP1 MLOAD PUSH2 0x1475 DUP2 PUSH2 0x1174 JUMP JUMPDEST SWAP3 PUSH2 0x1483 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1153 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0xF3 JUMPI PUSH2 0x12A5 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x122C JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x14AE JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE SLT DUP13 PUSH6 0x31CA8BE5D1BA PUSH32 0x2EFABDAF97C63D582FB74A9A9422FF2B3E6A2EDC0764736F6C63430008140033 ","sourceMap":"577:7022:28:-:0;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;-1:-1:-1;;;;;577:7022:28;;;;528:20:0;524:58;;588:17;;577:7022:28;;;;;;;;;2272:42;577:7022;;;2272:42;577:7022;2333:10;577:7022;2325:18;577:7022;;;2325:18;577:7022;;;;;;;;;588:17:0;577:7022:28;;;;;;;;;;;524:58:0;577:7022:28;;-1:-1:-1;;;557:25:0;;-1:-1:-1;557:25:0;;;577:7022:28;;;557:25:0;577:7022:28;-1:-1:-1;577:7022:28;;;;;;-1:-1:-1;577:7022:28;;;;;-1:-1:-1;577:7022:28;;;;-1:-1:-1;;;;;577:7022:28;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":4572,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_17706":{"entryPoint":4550,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_available_length_string":{"entryPoint":4495,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":5163,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":4746,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":5187,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint64":{"entryPoint":4724,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":4687,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint64_struct_EVM2AnyMessage":{"entryPoint":4962,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_string":{"entryPoint":4468,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":4939,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":4652,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4594,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":4435,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_17719":{"entryPoint":4381,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_17720":{"entryPoint":4408,"id":null,"parameterSlots":1,"returnSlots":0},"memory_array_index_access_struct_EVMTokenAmount_dyn":{"entryPoint":5281,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":4863,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_aa74":{"entryPoint":4776,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"14":[{"length":32,"start":196},{"length":32,"start":1755}]},"linkReferences":{},"object":"608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816301ffc9a7146110ca575080631d5e294714610e3f5780631f27166d14610d505780633aeac4e114610c7057806351cff8d914610bcf5780636552d8b414610aef57806373645cff14610aa05780637898d18414610a4e578063835b347c14610a0f57806385572ffb1461069e578063a30e3770146100f85763b0f479a1146100ae573861000f565b346100f35760003660031901126100f3576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600080fd5b346100f35760603660031901126100f357610111611274565b6101196111c6565b6044356001600160401b0381116100f35761013890369060040161128a565b6001600160a01b0382811660009081526005602052604090206001015491939116156106595760018060a01b0382166000526005602052600160ff816040600020015460a01c161515036106065760018060a01b038216600052600560205260018060a01b03600160406000200154169160018060a01b036006541691606060806040516101c58161111d565b8281528260208201528260408201526000838201520152604051936020850152602084526101f284611138565b60405160208082015261021a8161020c604082018961124f565b03601f198101835282611153565b60405190602082018281106001600160401b038211176105f057604052600082526040519561024887611138565b620c350087526020870160008152604051976397a657c960e01b60208a01525160248901525115156044880152604487528660808101106001600160401b036080890111176105f057608087016040526102a46080880161111d565b608087015260a086015260c08501528260e0850152836101008101526040519263b0f479a160e01b8452602084600481305afa93841561048e576000946105ac575b506040516320487ded60e01b8152936020858061030a60808a018760048401611362565b03816001600160a01b0385165afa94851561048e57600095610578575b506040516370a0823160e01b8152306004820152602081602481865afa90811561048e57600091610546575b5085116104c75760405163095ea7b360e01b81526001600160a01b03821660048201526024810186905291602090839060449082906000905af190811561048e576103c49660209360809361049a575b5060006040518099819582946396f4e9f960e01b8452018860048401611362565b03926001600160a01b03165af193841561048e57600094610457575b5060209484926001600160401b037f3d8a9f055772202d2c3c1fddbad930d3dbe588d8692b75b84cee0719462829119360018060a01b03600654169661043f60405195869560018060a01b0316865260808c870152608086019061124f565b976040850152606084015216940390a3604051908152f35b909193506020813d602011610486575b8161047460209383611153565b810103126100f35751929060206103e0565b3d9150610467565b6040513d6000823e3d90fd5b6104b990853d87116104c0575b6104b18183611153565b81019061142b565b50896103a3565b503d6104a7565b6040516370a0823160e01b815230600482015285602082602481875afa90811561048e57600091610511575b6044925060405191634787a10360e11b835260048301526024820152fd5b90506020823d60201161053e575b8161052c60209383611153565b810103126100f35760449151906104f3565b3d915061051f565b90506020813d602011610570575b8161056160209383611153565b810103126100f3575188610353565b3d9150610554565b9094506020813d6020116105a4575b8161059460209383611153565b810103126100f357519387610327565b3d9150610587565b9093506020813d6020116105e8575b816105c860209383611153565b810103126100f357516001600160a01b03811681036100f35792866102e6565b3d91506105bb565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152602560248201527f54686973207265636569766572206973206e6f742077686974656c6973746564604482015264207965742160d81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601f60248201527f456e74657220612076616c6964207265636569766572206164647265737321006044820152606490fd5b346100f357600319602036820181136100f3576004356001600160401b03928382116100f35760a09082360301126100f3576001600160a01b03917f0000000000000000000000000000000000000000000000000000000000000000831633036109f7576040519261070f8461111d565b8260040135845260248301359385851685036100f35782810194855260448401358681116100f357610747906004369187010161128a565b956040820196875260648501358181116100f35761076b906004369188010161128a565b94606083019586526084810135908282116100f3570191366023840112156100f3576004830135928284116105f057604051936107ad878260051b0186611153565b80855260248786019160061b830101913683116100f357602401905b8282106109ba575050506080810192835280516000556107f28651868082518301019101611443565b80518381116105f0578060019261080984546111f2565b601f8111610962575b508890601f83116001146108e2576000926108d7575b5050600019600383901b1c191690821b1790555b51955116955183818051810103126100f357830151918083168093036100f3576108c7846108ac6108977f90ec910a8f80bb04e184a806e2ae6f8786ef2ae898859a3180f953397edc12019851838082518301019101611443565b936108a286516114a1565b51511694516114a1565b5101519160806040519687968752860152608085019061124f565b91604084015260608301520390a3005b015190508b80610828565b90849350601f19831691846000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69260005b8c82821061094c5750508411610933575b505050811b01905561083c565b015160001960f88460031b161c191690558b8080610926565b8385015186558897909501949384019301610915565b6109aa90856000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f850160051c8101918c86106109b0575b601f0160051c019061134b565b8c610812565b909150819061099d565b6040823603126100f357604051906109d182611138565b82359088821682036100f357828a926040945282850135838201528152019101906107c9565b6040516335fdcccd60e21b8152336004820152602490fd5b346100f35760203660031901126100f3576001600160401b03610a30611274565b166000526004602052602060ff604060002054166040519015158152f35b346100f35760203660031901126100f3576001600160401b03610a6f611274565b610a8460018060a01b036003541633146112a8565b166000908152600460205260409020805460ff19166001179055005b346100f35760203660031901126100f3576001600160401b03610ac1611274565b610ad660018060a01b036003541633146112a8565b166000908152600460205260409020805460ff19169055005b346100f35760203660031901126100f3577fc98322fddcb9467a648bda840e8c0844a6a420e0a62af038077f0de932e729666020610b2b6111dc565b6003546001600160a01b039190610b4590831633146112a8565b168060005260058252610b69600160ff816040600020015460a01c161515146112ff565b80600052600582526000600160408220610b8381546111f2565b80610b95575b500155604051908152a1005b601f81118314610baa57508281555b86610b89565b8390828252610bc6601f888420920160051c820185830161134b565b81835555610ba4565b346100f35760203660031901126100f357610be86111dc565b47908115610c5e57600080808085855af13d15610c59573d610c0981611174565b90610c176040519283611153565b8152600060203d92013e5b15610c2957005b604051639d11f56360e01b81523360048201526001600160a01b0390911660248201526044810191909152606490fd5b610c22565b604051630686827b60e51b8152600490fd5b346100f35760403660031901126100f357610c896111dc565b6001600160a01b03610c996111c6565b16604051916370a0823160e01b83523060048401526020928381602481865afa90811561048e57600091610d23575b508015610c5e5760405163a9059cbb60e01b81526001600160a01b039290921660048301526024820152908290829060449082906000905af1801561048e57610d0d57005b8161001b92903d106104c0576104b18183611153565b90508381813d8311610d49575b610d3a8183611153565b810103126100f3575184610cc8565b503d610d30565b346100f3576020806003193601126100f3576001600160a01b0380610d736111dc565b166000526005825260406000209060405191600090805491610d94836111f2565b808652600193808516908115610e235750600114610def575b5091610dd99591610dc28660ff950387611153565b01549060405195869560608752606087019061124f565b9382169085015260a01c16151560408301520390f35b60008381528781209092505b818310610e1057505084018501610dd9610dad565b8054878401890152918701918401610dfb565b60ff19168789015250151560051b850186019050610dd9610dad565b346100f35760403660031901126100f3576001600160401b036004358181116100f357366023820112156100f357610e8190369060248160040135910161118f565b610e896111c6565b6003546001600160a01b03918291610ea490831633146112a8565b16801561108c578060005260209160058352600190610ed060ff836040600020015460a01c16156112ff565b6040519060608201828110888211176105f0576040528582528482019284845260408301928184528560005260058752604060002090519889519081116105f057610f1b82546111f2565b601f811161105c575b5087601f8211600114610fce579080610fba9a99989796959493927f619facc3344a864638bdf6b94faebe32fea796eccc10ab263d90da8b44c42be49c600092610fc3575b5050600019600383901b1c191690831b1781555b0192511682549160ff60a01b9051151560a01b16916affffffffffffffffffffff60a81b161717905560405193849360408552604085019061124f565b918301520390a1005b015190508c80610f69565b601f1982169083600052896000209160005b81811061104757509183917f619facc3344a864638bdf6b94faebe32fea796eccc10ab263d90da8b44c42be49d879695610fba9e9d9c9b9a9998951061102e575b505050811b018155610f7d565b015160001960f88460031b161c191690558c8080611021565b8d830151845592860192918b01918b01610fe0565b611086908360005289600020601f840160051c8101918b85106109b057601f0160051c019061134b565b8a610f24565b60405162461bcd60e51b8152602060048201526016602482015275456e74657220612076616c696420616464726573732160501b6044820152606490fd5b346100f35760203660031901126100f3576004359063ffffffff60e01b82168092036100f3576020916385572ffb60e01b811490811561110c575b5015158152f35b6301ffc9a760e01b14905083611105565b60a081019081106001600160401b038211176105f057604052565b604081019081106001600160401b038211176105f057604052565b90601f801991011681019081106001600160401b038211176105f057604052565b6001600160401b0381116105f057601f01601f191660200190565b92919261119b82611174565b916111a96040519384611153565b8294818452818301116100f3578281602093846000960137010152565b602435906001600160a01b03821682036100f357565b600435906001600160a01b03821682036100f357565b90600182811c92168015611222575b602083101461120c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611201565b60005b83811061123f5750506000910152565b818101518382015260200161122f565b906020916112688151809281855285808601910161122c565b601f01601f1916010190565b600435906001600160401b03821682036100f357565b9080601f830112156100f3578160206112a59335910161118f565b90565b156112af57565b60405162461bcd60e51b815260206004820152602260248201527f4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6044820152616e2160f01b6064820152608490fd5b1561130657565b60405162461bcd60e51b815260206004820152601f60248201527f526563656976657220697320616c7265616479207265676973746572656421006044820152606490fd5b818110611356575050565b6000815560010161134b565b906001600160401b039093929316815260406020918183820152611391855160a08484015260e083019061124f565b916113ad8487015193603f19948585830301606086015261124f565b8187015194848483030160808501528080875193848152019601926000905b83821061140257505050505060c060806112a5959660018060a01b0360608201511660a08501520151928285030191015261124f565b845180516001600160a01b031689528301518884015296870196938201936001909101906113cc565b908160209103126100f3575180151581036100f35790565b6020818303126100f3578051906001600160401b0382116100f3570181601f820112156100f357805161147581611174565b926114836040519485611153565b818452602082840101116100f3576112a5916020808501910161122c565b8051156114ae5760200190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f0128c6531ca8be5d1ba7f2efabdaf97c63d582fb74a9a9422ff2b3e6a2edc0764736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x10CA JUMPI POP DUP1 PUSH4 0x1D5E2947 EQ PUSH2 0xE3F JUMPI DUP1 PUSH4 0x1F27166D EQ PUSH2 0xD50 JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0xC70 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0xBCF JUMPI DUP1 PUSH4 0x6552D8B4 EQ PUSH2 0xAEF JUMPI DUP1 PUSH4 0x73645CFF EQ PUSH2 0xAA0 JUMPI DUP1 PUSH4 0x7898D184 EQ PUSH2 0xA4E JUMPI DUP1 PUSH4 0x835B347C EQ PUSH2 0xA0F JUMPI DUP1 PUSH4 0x85572FFB EQ PUSH2 0x69E JUMPI DUP1 PUSH4 0xA30E3770 EQ PUSH2 0xF8 JUMPI PUSH4 0xB0F479A1 EQ PUSH2 0xAE JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH2 0x111 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0x119 PUSH2 0x11C6 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xF3 JUMPI PUSH2 0x138 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x128A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 SWAP4 SWAP2 AND ISZERO PUSH2 0x659 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO SUB PUSH2 0x606 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x6 SLOAD AND SWAP2 PUSH1 0x60 PUSH1 0x80 PUSH1 0x40 MLOAD PUSH2 0x1C5 DUP2 PUSH2 0x111D JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x20 DUP5 MSTORE PUSH2 0x1F2 DUP5 PUSH2 0x1138 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH2 0x21A DUP2 PUSH2 0x20C PUSH1 0x40 DUP3 ADD DUP10 PUSH2 0x124F JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x1153 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE PUSH1 0x40 MLOAD SWAP6 PUSH2 0x248 DUP8 PUSH2 0x1138 JUMP JUMPDEST PUSH3 0xC3500 DUP8 MSTORE PUSH1 0x20 DUP8 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP8 PUSH4 0x97A657C9 PUSH1 0xE0 SHL PUSH1 0x20 DUP11 ADD MSTORE MLOAD PUSH1 0x24 DUP10 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x44 DUP9 ADD MSTORE PUSH1 0x44 DUP8 MSTORE DUP7 PUSH1 0x80 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x80 DUP10 ADD GT OR PUSH2 0x5F0 JUMPI PUSH1 0x80 DUP8 ADD PUSH1 0x40 MSTORE PUSH2 0x2A4 PUSH1 0x80 DUP9 ADD PUSH2 0x111D JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD MSTORE DUP3 PUSH1 0xE0 DUP6 ADD MSTORE DUP4 PUSH2 0x100 DUP2 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH4 0xB0F479A1 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x20 DUP5 PUSH1 0x4 DUP2 ADDRESS GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP5 PUSH2 0x5AC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x20487DED PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 PUSH1 0x20 DUP6 DUP1 PUSH2 0x30A PUSH1 0x80 DUP11 ADD DUP8 PUSH1 0x4 DUP5 ADD PUSH2 0x1362 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP6 PUSH2 0x578 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x546 JUMPI JUMPDEST POP DUP6 GT PUSH2 0x4C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 PUSH1 0x20 SWAP1 DUP4 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH2 0x3C4 SWAP7 PUSH1 0x20 SWAP4 PUSH1 0x80 SWAP4 PUSH2 0x49A JUMPI JUMPDEST POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP10 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0x96F4E9F9 PUSH1 0xE0 SHL DUP5 MSTORE ADD DUP9 PUSH1 0x4 DUP5 ADD PUSH2 0x1362 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP4 DUP5 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP5 PUSH2 0x457 JUMPI JUMPDEST POP PUSH1 0x20 SWAP5 DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH32 0x3D8A9F055772202D2C3C1FDDBAD930D3DBE588D8692B75B84CEE071946282911 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x6 SLOAD AND SWAP7 PUSH2 0x43F PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP7 MSTORE PUSH1 0x80 DUP13 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP8 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE AND SWAP5 SUB SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP4 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x486 JUMPI JUMPDEST DUP2 PUSH2 0x474 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD SWAP3 SWAP1 PUSH1 0x20 PUSH2 0x3E0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x467 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4B9 SWAP1 DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x4C0 JUMPI JUMPDEST PUSH2 0x4B1 DUP2 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x142B JUMP JUMPDEST POP DUP10 PUSH2 0x3A3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP6 PUSH1 0x20 DUP3 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x511 JUMPI JUMPDEST PUSH1 0x44 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x4787A103 PUSH1 0xE1 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x53E JUMPI JUMPDEST DUP2 PUSH2 0x52C PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI PUSH1 0x44 SWAP2 MLOAD SWAP1 PUSH2 0x4F3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x51F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x570 JUMPI JUMPDEST DUP2 PUSH2 0x561 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD DUP9 PUSH2 0x353 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x554 JUMP JUMPDEST SWAP1 SWAP5 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5A4 JUMPI JUMPDEST DUP2 PUSH2 0x594 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD SWAP4 DUP8 PUSH2 0x327 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x587 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5E8 JUMPI JUMPDEST DUP2 PUSH2 0x5C8 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xF3 JUMPI SWAP3 DUP7 PUSH2 0x2E6 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5BB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686973207265636569766572206973206E6F742077686974656C6973746564 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2079657421 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456E74657220612076616C696420726563656976657220616464726573732100 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x3 NOT PUSH1 0x20 CALLDATASIZE DUP3 ADD DUP2 SGT PUSH2 0xF3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP3 GT PUSH2 0xF3 JUMPI PUSH1 0xA0 SWAP1 DUP3 CALLDATASIZE SUB ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH32 0x0 DUP4 AND CALLER SUB PUSH2 0x9F7 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x70F DUP5 PUSH2 0x111D JUMP JUMPDEST DUP3 PUSH1 0x4 ADD CALLDATALOAD DUP5 MSTORE PUSH1 0x24 DUP4 ADD CALLDATALOAD SWAP4 DUP6 DUP6 AND DUP6 SUB PUSH2 0xF3 JUMPI DUP3 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x44 DUP5 ADD CALLDATALOAD DUP7 DUP2 GT PUSH2 0xF3 JUMPI PUSH2 0x747 SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP8 ADD ADD PUSH2 0x128A JUMP JUMPDEST SWAP6 PUSH1 0x40 DUP3 ADD SWAP7 DUP8 MSTORE PUSH1 0x64 DUP6 ADD CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF3 JUMPI PUSH2 0x76B SWAP1 PUSH1 0x4 CALLDATASIZE SWAP2 DUP9 ADD ADD PUSH2 0x128A JUMP JUMPDEST SWAP5 PUSH1 0x60 DUP4 ADD SWAP6 DUP7 MSTORE PUSH1 0x84 DUP2 ADD CALLDATALOAD SWAP1 DUP3 DUP3 GT PUSH2 0xF3 JUMPI ADD SWAP2 CALLDATASIZE PUSH1 0x23 DUP5 ADD SLT ISZERO PUSH2 0xF3 JUMPI PUSH1 0x4 DUP4 ADD CALLDATALOAD SWAP3 DUP3 DUP5 GT PUSH2 0x5F0 JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0x7AD DUP8 DUP3 PUSH1 0x5 SHL ADD DUP7 PUSH2 0x1153 JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x24 DUP8 DUP7 ADD SWAP2 PUSH1 0x6 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0xF3 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x9BA JUMPI POP POP POP PUSH1 0x80 DUP2 ADD SWAP3 DUP4 MSTORE DUP1 MLOAD PUSH1 0x0 SSTORE PUSH2 0x7F2 DUP7 MLOAD DUP7 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x1443 JUMP JUMPDEST DUP1 MLOAD DUP4 DUP2 GT PUSH2 0x5F0 JUMPI DUP1 PUSH1 0x1 SWAP3 PUSH2 0x809 DUP5 SLOAD PUSH2 0x11F2 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x962 JUMPI JUMPDEST POP DUP9 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x8E2 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x8D7 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE JUMPDEST MLOAD SWAP6 MLOAD AND SWAP6 MLOAD DUP4 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI DUP4 ADD MLOAD SWAP2 DUP1 DUP4 AND DUP1 SWAP4 SUB PUSH2 0xF3 JUMPI PUSH2 0x8C7 DUP5 PUSH2 0x8AC PUSH2 0x897 PUSH32 0x90EC910A8F80BB04E184A806E2AE6F8786EF2AE898859A3180F953397EDC1201 SWAP9 MLOAD DUP4 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x1443 JUMP JUMPDEST SWAP4 PUSH2 0x8A2 DUP7 MLOAD PUSH2 0x14A1 JUMP JUMPDEST MLOAD MLOAD AND SWAP5 MLOAD PUSH2 0x14A1 JUMP JUMPDEST MLOAD ADD MLOAD SWAP2 PUSH1 0x80 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 DUP8 MSTORE DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP2 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE SUB SWAP1 LOG3 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP12 DUP1 PUSH2 0x828 JUMP JUMPDEST SWAP1 DUP5 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP5 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH2 0x94C JUMPI POP POP DUP5 GT PUSH2 0x933 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x83C JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP12 DUP1 DUP1 PUSH2 0x926 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP9 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x915 JUMP JUMPDEST PUSH2 0x9AA SWAP1 DUP6 PUSH1 0x0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP13 DUP7 LT PUSH2 0x9B0 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x134B JUMP JUMPDEST DUP13 PUSH2 0x812 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x99D JUMP JUMPDEST PUSH1 0x40 DUP3 CALLDATASIZE SUB SLT PUSH2 0xF3 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x9D1 DUP3 PUSH2 0x1138 JUMP JUMPDEST DUP3 CALLDATALOAD SWAP1 DUP9 DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI DUP3 DUP11 SWAP3 PUSH1 0x40 SWAP5 MSTORE DUP3 DUP6 ADD CALLDATALOAD DUP4 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x7C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x35FDCCCD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xA30 PUSH2 0x1274 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xA6F PUSH2 0x1274 JUMP JUMPDEST PUSH2 0xA84 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x3 SLOAD AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xAC1 PUSH2 0x1274 JUMP JUMPDEST PUSH2 0xAD6 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x3 SLOAD AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH32 0xC98322FDDCB9467A648BDA840E8C0844A6A420E0A62AF038077F0DE932E72966 PUSH1 0x20 PUSH2 0xB2B PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH2 0xB45 SWAP1 DUP4 AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH2 0xB69 PUSH1 0x1 PUSH1 0xFF DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO EQ PUSH2 0x12FF JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x40 DUP3 KECCAK256 PUSH2 0xB83 DUP2 SLOAD PUSH2 0x11F2 JUMP JUMPDEST DUP1 PUSH2 0xB95 JUMPI JUMPDEST POP ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x1F DUP2 GT DUP4 EQ PUSH2 0xBAA JUMPI POP DUP3 DUP2 SSTORE JUMPDEST DUP7 PUSH2 0xB89 JUMP JUMPDEST DUP4 SWAP1 DUP3 DUP3 MSTORE PUSH2 0xBC6 PUSH1 0x1F DUP9 DUP5 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD DUP6 DUP4 ADD PUSH2 0x134B JUMP JUMPDEST DUP2 DUP4 SSTORE SSTORE PUSH2 0xBA4 JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH2 0xBE8 PUSH2 0x11DC JUMP JUMPDEST SELFBALANCE SWAP1 DUP2 ISZERO PUSH2 0xC5E JUMPI PUSH1 0x0 DUP1 DUP1 DUP1 DUP6 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0xC59 JUMPI RETURNDATASIZE PUSH2 0xC09 DUP2 PUSH2 0x1174 JUMP JUMPDEST SWAP1 PUSH2 0xC17 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0xC29 JUMPI STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9D11F563 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x686827B PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH2 0xC89 PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xC99 PUSH2 0x11C6 JUMP JUMPDEST AND PUSH1 0x40 MLOAD SWAP2 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP4 MSTORE ADDRESS PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x20 SWAP3 DUP4 DUP2 PUSH1 0x24 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 SWAP2 PUSH2 0xD23 JUMPI JUMPDEST POP DUP1 ISZERO PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x48E JUMPI PUSH2 0xD0D JUMPI STOP JUMPDEST DUP2 PUSH2 0x1B SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x4C0 JUMPI PUSH2 0x4B1 DUP2 DUP4 PUSH2 0x1153 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xD49 JUMPI JUMPDEST PUSH2 0xD3A DUP2 DUP4 PUSH2 0x1153 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF3 JUMPI MLOAD DUP5 PUSH2 0xCC8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xD30 JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0xD73 PUSH2 0x11DC JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x0 SWAP1 DUP1 SLOAD SWAP2 PUSH2 0xD94 DUP4 PUSH2 0x11F2 JUMP JUMPDEST DUP1 DUP7 MSTORE PUSH1 0x1 SWAP4 DUP1 DUP6 AND SWAP1 DUP2 ISZERO PUSH2 0xE23 JUMPI POP PUSH1 0x1 EQ PUSH2 0xDEF JUMPI JUMPDEST POP SWAP2 PUSH2 0xDD9 SWAP6 SWAP2 PUSH2 0xDC2 DUP7 PUSH1 0xFF SWAP6 SUB DUP8 PUSH2 0x1153 JUMP JUMPDEST ADD SLOAD SWAP1 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 PUSH1 0x60 DUP8 MSTORE PUSH1 0x60 DUP8 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP4 DUP3 AND SWAP1 DUP6 ADD MSTORE PUSH1 0xA0 SHR AND ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE DUP8 DUP2 KECCAK256 SWAP1 SWAP3 POP JUMPDEST DUP2 DUP4 LT PUSH2 0xE10 JUMPI POP POP DUP5 ADD DUP6 ADD PUSH2 0xDD9 PUSH2 0xDAD JUMP JUMPDEST DUP1 SLOAD DUP8 DUP5 ADD DUP10 ADD MSTORE SWAP2 DUP8 ADD SWAP2 DUP5 ADD PUSH2 0xDFB JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP10 ADD MSTORE POP ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD DUP7 ADD SWAP1 POP PUSH2 0xDD9 PUSH2 0xDAD JUMP JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF3 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0xF3 JUMPI PUSH2 0xE81 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x118F JUMP JUMPDEST PUSH2 0xE89 PUSH2 0x11C6 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 SWAP2 PUSH2 0xEA4 SWAP1 DUP4 AND CALLER EQ PUSH2 0x12A8 JUMP JUMPDEST AND DUP1 ISZERO PUSH2 0x108C JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0x5 DUP4 MSTORE PUSH1 0x1 SWAP1 PUSH2 0xED0 PUSH1 0xFF DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xA0 SHR AND ISZERO PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT DUP9 DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE DUP6 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 DUP5 DUP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 DUP5 MSTORE DUP6 PUSH1 0x0 MSTORE PUSH1 0x5 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 MLOAD SWAP9 DUP10 MLOAD SWAP1 DUP2 GT PUSH2 0x5F0 JUMPI PUSH2 0xF1B DUP3 SLOAD PUSH2 0x11F2 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x105C JUMPI JUMPDEST POP DUP8 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xFCE JUMPI SWAP1 DUP1 PUSH2 0xFBA SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH32 0x619FACC3344A864638BDF6B94FAEBE32FEA796ECCC10AB263D90DA8B44C42BE4 SWAP13 PUSH1 0x0 SWAP3 PUSH2 0xFC3 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP4 SHL OR DUP2 SSTORE JUMPDEST ADD SWAP3 MLOAD AND DUP3 SLOAD SWAP2 PUSH1 0xFF PUSH1 0xA0 SHL SWAP1 MLOAD ISZERO ISZERO PUSH1 0xA0 SHL AND SWAP2 PUSH11 0xFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA8 SHL AND OR OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP2 DUP4 ADD MSTORE SUB SWAP1 LOG1 STOP JUMPDEST ADD MLOAD SWAP1 POP DUP13 DUP1 PUSH2 0xF69 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 DUP4 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1047 JUMPI POP SWAP2 DUP4 SWAP2 PUSH32 0x619FACC3344A864638BDF6B94FAEBE32FEA796ECCC10AB263D90DA8B44C42BE4 SWAP14 DUP8 SWAP7 SWAP6 PUSH2 0xFBA SWAP15 SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP6 LT PUSH2 0x102E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP2 SSTORE PUSH2 0xF7D JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP13 DUP1 DUP1 PUSH2 0x1021 JUMP JUMPDEST DUP14 DUP4 ADD MLOAD DUP5 SSTORE SWAP3 DUP7 ADD SWAP3 SWAP2 DUP12 ADD SWAP2 DUP12 ADD PUSH2 0xFE0 JUMP JUMPDEST PUSH2 0x1086 SWAP1 DUP4 PUSH1 0x0 MSTORE DUP10 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP12 DUP6 LT PUSH2 0x9B0 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x134B JUMP JUMPDEST DUP11 PUSH2 0xF24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x456E74657220612076616C6964206164647265737321 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF3 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0xF3 JUMPI PUSH1 0x20 SWAP2 PUSH4 0x85572FFB PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x110C JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x5F0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x5F0 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x119B DUP3 PUSH2 0x1174 JUMP JUMPDEST SWAP2 PUSH2 0x11A9 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1153 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xF3 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1222 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x120C JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1201 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x123F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x122F JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1268 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x122C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF3 JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xF3 JUMPI DUP2 PUSH1 0x20 PUSH2 0x12A5 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x118F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12AF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79204F776E65722063616E2063616C6C20746869732066756E6374696F PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6E21 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1306 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526563656976657220697320616C726561647920726567697374657265642100 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x1356 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x134B JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP4 SWAP3 SWAP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 SWAP2 DUP2 DUP4 DUP3 ADD MSTORE PUSH2 0x1391 DUP6 MLOAD PUSH1 0xA0 DUP5 DUP5 ADD MSTORE PUSH1 0xE0 DUP4 ADD SWAP1 PUSH2 0x124F JUMP JUMPDEST SWAP2 PUSH2 0x13AD DUP5 DUP8 ADD MLOAD SWAP4 PUSH1 0x3F NOT SWAP5 DUP6 DUP6 DUP4 SUB ADD PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x124F JUMP JUMPDEST DUP2 DUP8 ADD MLOAD SWAP5 DUP5 DUP5 DUP4 SUB ADD PUSH1 0x80 DUP6 ADD MSTORE DUP1 DUP1 DUP8 MLOAD SWAP4 DUP5 DUP2 MSTORE ADD SWAP7 ADD SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x1402 JUMPI POP POP POP POP POP PUSH1 0xC0 PUSH1 0x80 PUSH2 0x12A5 SWAP6 SWAP7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0xA0 DUP6 ADD MSTORE ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x124F JUMP JUMPDEST DUP5 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 MSTORE DUP4 ADD MLOAD DUP9 DUP5 ADD MSTORE SWAP7 DUP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x13CC JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xF3 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0xF3 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0xF3 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0xF3 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xF3 JUMPI DUP1 MLOAD PUSH2 0x1475 DUP2 PUSH2 0x1174 JUMP JUMPDEST SWAP3 PUSH2 0x1483 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1153 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0xF3 JUMPI PUSH2 0x12A5 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x122C JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x14AE JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE SLT DUP13 PUSH6 0x31CA8BE5D1BA PUSH32 0x2EFABDAF97C63D582FB74A9A9422FF2B3E6A2EDC0764736F6C63430008140033 ","sourceMap":"577:7022:28:-:0;;;;;;;;;;-1:-1:-1;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;;1622:8:0;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;;:::i;:::-;;;:::i;:::-;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;577:7022:28;;;;;;;4287:13;577:7022;;;;;;4287:40;577:7022;;;;;4287:54;577:7022;;;;;;;;;;;4287:13;577:7022;;;;;;;;4396:35;577:7022;;;;;;4396:43;577:7022;;;;;;;;;;;4287:13;577:7022;;;;;;;;;;;4580:40;577:7022;;;;;;;;4663:9;577:7022;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5515:21;577:7022;5515:21;;577:7022;;5515:21;;;;;:::i;:::-;577:7022;;;5557:17;;;577:7022;5557:17;577:7022;;;;;;;:::i;:::-;5557:17;577:7022;;5557:17;;;;;;:::i;:::-;577:7022;;;;;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;:::i;:::-;5731:7;577:7022;;;5698:57;;577:7022;;;;;;;;;;1484:56:3;;;1201:10;577:7022:28;1484:56:3;;577:7022:28;1201:10:3;577:7022:28;;;1201:10:3;;577:7022:28;;1484:56:3;;577:7022:28;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;5468:355;;577:7022;5468:355;;;577:7022;5468:355;577:7022;5468:355;;577:7022;5468:355;;;;577:7022;;;;;;;4734:16;;577:7022;4734:4;577:7022;4734:4;;:16;;;;;;;577:7022;4734:16;;;577:7022;-1:-1:-1;577:7022:28;;-1:-1:-1;;;4779:56:28;;577:7022;;;;4779:56;577:7022;;;4779:56;577:7022;4779:56;;;:::i;:::-;;577:7022;-1:-1:-1;;;;;577:7022:28;;4779:56;;;;;;;577:7022;4779:56;;;577:7022;-1:-1:-1;577:7022:28;;-1:-1:-1;;;4859:34:28;;4734:4;577:7022;4859:34;;577:7022;;;;;4859:34;;;;;;;;577:7022;4859:34;;;577:7022;4852:41;;;4848:125;;577:7022;;-1:-1:-1;;;4986:40:28;;-1:-1:-1;;;;;577:7022:28;;;4986:40;;577:7022;;;;;;;;;;;;;;;;-1:-1:-1;;4986:40:28;;;;;;;5051:58;4986:40;577:7022;4986:40;577:7022;4986:40;;;577:7022;;;;;;;;;;;;;;5051:58;;577:7022;5051:58;577:7022;5051:58;;;:::i;:::-;;;-1:-1:-1;;;;;577:7022:28;5051:58;;;;;;;577:7022;5051:58;;;577:7022;;;;;;-1:-1:-1;;;;;5127:94:28;577:7022;;;;;;4663:9;577:7022;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;5127:94;;;;577:7022;;;;;;5051:58;;;;;577:7022;5051:58;;577:7022;5051:58;;;;;;577:7022;5051:58;;;:::i;:::-;;;577:7022;;;;;;;;5051:58;;;;;-1:-1:-1;5051:58:28;;;577:7022;;;;;;;;;4986:40;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;4848:125;577:7022;;-1:-1:-1;;;4932:34:28;;4734:4;577:7022;4932:34;;577:7022;;;;;;;4932:34;;;;;;;577:7022;4932:34;;;4848:125;577:7022;;;;;4915:58;;;;;;577:7022;4915:58;;577:7022;;;;;4915:58;4932:34;;;577:7022;4932:34;;577:7022;4932:34;;;;;;577:7022;4932:34;;;:::i;:::-;;;577:7022;;;;;;;4932:34;;;;;;-1:-1:-1;4932:34:28;;4859;;;577:7022;4859:34;;577:7022;4859:34;;;;;;577:7022;4859:34;;;:::i;:::-;;;577:7022;;;;;4859:34;;;;;;-1:-1:-1;4859:34:28;;4779:56;;;;577:7022;4779:56;;577:7022;4779:56;;;;;;577:7022;4779:56;;;:::i;:::-;;;577:7022;;;;;4779:56;;;;;;;-1:-1:-1;4779:56:28;;4734:16;;;;577:7022;4734:16;;577:7022;4734:16;;;;;;577:7022;4734:16;;;:::i;:::-;;;577:7022;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;4734:16;;;;;;;-1:-1:-1;4734:16:28;;577:7022;;;;;;;;;;;;;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;-1:-1:-1;577:7022:28;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;-1:-1:-1;;;;;577:7022:28;1790:8:0;577:7022:28;;1768:10:0;:31;1764:69;;577:7022:28;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6044:41;6055:19;;577:7022;;;;6044:41;;;;;;:::i;:::-;577:7022;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;577:7022:28;;;;;;;;;;;;;;;;;;6192:21;;577:7022;;;;6181:44;;577:7022;;;;6181:44;;577:7022;;;;;;;;;;;6238:19;6312:34;6227:41;6103:251;6238:19;;577:7022;;;;6227:41;;;;;;:::i;:::-;6270:31;:34;:31;;:34;:::i;:::-;;577:7022;;6312:31;;:34;:::i;:::-;;:41;577:7022;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;6103:251;;;577:7022;;;;;-1:-1:-1;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;577:7022:28;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1764:69:0;577:7022:28;;-1:-1:-1;;;1808:25:0;;1768:10;577:7022:28;1808:25:0;;577:7022:28;;;1808:25:0;577:7022:28;;;;;;-1:-1:-1;;577:7022:28;;;;-1:-1:-1;;;;;577:7022:28;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;-1:-1:-1;;;;;577:7022:28;;:::i;:::-;7510:66;577:7022;;;;;;;;7518:10;:19;7510:66;:::i;:::-;577:7022;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;-1:-1:-1;;;;;577:7022:28;;:::i;:::-;7510:66;577:7022;;;;;;;;7518:10;:19;7510:66;:::i;:::-;577:7022;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;4005:37;577:7022;;;:::i;:::-;;;-1:-1:-1;;;;;577:7022:28;;7510:66;;577:7022;;7518:10;:19;7510:66;:::i;:::-;577:7022;;;;3850:13;577:7022;;3842:94;577:7022;;;;;;3850:42;577:7022;;;;;;3850:50;3842:94;:::i;:::-;577:7022;;;3850:13;577:7022;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4005:37;577:7022;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3850:13;577:7022;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;;:::i;:::-;6496:21;6534:11;;;6530:43;;577:7022;6602:36;;;;;;;577:7022;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;6655:5;6651:71;;577:7022;6651:71;577:7022;;-1:-1:-1;;;6669:53:28;;6689:10;577:7022;6669:53;;577:7022;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;6669:53;577:7022;;;6530:43;577:7022;;-1:-1:-1;;;6554:19:28;;577:7022;;6554:19;577:7022;;;;;;-1:-1:-1;;577:7022:28;;;;;;:::i;:::-;-1:-1:-1;;;;;577:7022:28;;:::i;:::-;;;;;;;;6849:39;;6882:4;577:7022;6849:39;;577:7022;;6849:39;;;577:7022;6849:39;;;;;;;;;577:7022;6849:39;;;577:7022;6905:11;;;6901:43;;577:7022;;-1:-1:-1;;;6957:45:28;;-1:-1:-1;;;;;577:7022:28;;;;;6957:45;;577:7022;;;;;;;;;;;;;;-1:-1:-1;;6957:45:28;;;;;;;;577:7022;6957:45;;;;;;-1:-1:-1;6957:45:28;;;;;;:::i;6849:39::-;;;;;;;;;;;;;;;;:::i;:::-;;;577:7022;;;;;6849:39;;;;;;;;577:7022;;;;;;;;;;;;;-1:-1:-1;;;;;577:7022:28;;;:::i;:::-;;;;1950:69;577:7022;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1950:69;577:7022;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;577:7022:28;;;;;;-1:-1:-1;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;-1:-1:-1;577:7022:28;;1950:69;577:7022;;;;;;-1:-1:-1;577:7022:28;;;;;;;;;-1:-1:-1;;577:7022:28;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;-1:-1:-1;;;;;577:7022:28;;;7510:66;;577:7022;;7518:10;:19;7510:66;:::i;:::-;577:7022;3252:30;;577:7022;;;;;;;3328:13;577:7022;;;;3320:95;577:7022;;;;;3328:42;577:7022;;;;;3320:95;:::i;:::-;577:7022;;;;;;;;;;;;;;;;;;;;3462:150;;;577:7022;;;;;3462:150;;577:7022;;;;;;;3328:13;577:7022;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:52;577:7022;;;;;;-1:-1:-1;;;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;3696:52;;;577:7022;;;;;-1:-1:-1;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:52;577:7022;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3328:13;577:7022;;;;;;;;;;;3328:13;577:7022;;;;:::i;:::-;;;;;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;857:56:0;;;:100;;;;577:7022:28;;;;;;;857:100:0;-1:-1:-1;;;917:40:0;;-1:-1:-1;857:100:0;;;577:7022:28;;;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;:::o;:::-;-1:-1:-1;;;;;577:7022:28;;;;;;-1:-1:-1;;577:7022:28;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;577:7022:28;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;577:7022:28;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;577:7022:28;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;577:7022:28;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;577:7022:28;;;;:::o;:::-;;;;-1:-1:-1;;;;;577:7022:28;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;577:7022:28;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"1074000","executionCost":"infinite","totalCost":"infinite"},"external":{"addReceiver(string,address)":"infinite","ccipReceicers(address)":"infinite","ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"infinite","denylistDestinationChain(uint64)":"26804","getRouter()":"infinite","removeReceiver(address)":"infinite","sendMessagePayLINK(uint64,address,bytes)":"infinite","supportsInterface(bytes4)":"271","whitelistDestinationChain(uint64)":"26832","whitelistedDestinationChains(uint64)":"2597","withdraw(address)":"infinite","withdrawToken(address,address)":"infinite"},"internal":{"_buildCCIPMessage(address,bytes memory,address)":"infinite","_ccipReceive(struct Client.Any2EVMMessage memory)":"infinite"}},"methodIdentifiers":{"addReceiver(string,address)":"1d5e2947","ccipReceicers(address)":"1f27166d","ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb","denylistDestinationChain(uint64)":"73645cff","getRouter()":"b0f479a1","removeReceiver(address)":"6552d8b4","sendMessagePayLINK(uint64,address,bytes)":"a30e3770","supportsInterface(bytes4)":"01ffc9a7","whitelistDestinationChain(uint64)":"7898d184","whitelistedDestinationChains(uint64)":"835b347c","withdraw(address)":"51cff8d9","withdrawToken(address,address)":"3aeac4e1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_blockchainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"CCIPReceiverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"CCIPReceiverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_blockchainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"addReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"ccipReceicers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"blockchainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReceiver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"denylistDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"removeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"sendMessagePayLINK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"whitelistDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"whitelistedDestinationChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"denylistDestinationChain(uint64)\":{\"details\":\"Denylists a chain for transactions.\",\"params\":{\"_destinationChainSelector\":\"The selector of the destination chain to be denylisted.\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}},\"whitelistDestinationChain(uint64)\":{\"details\":\"Whitelists a chain for transactions.\",\"params\":{\"_destinationChainSelector\":\"The selector of the destination chain to be whitelisted.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"denylistDestinationChain(uint64)\":{\"notice\":\"This function can only be called by the owner.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"},\"whitelistDestinationChain(uint64)\":{\"notice\":\"This function can only be called by the owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HorizonFujiS.sol\":\"HorizonFujiS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_router;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_router = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return i_router address\\n  function getRouter() public view returns (address) {\\n    return address(i_router);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcf5d0a5cd6ed0f6a9ed721b3e532c0504ed1ba3ab6d3567165876ceb4f23b084\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9899fab6a40f68408ddf153612c553f2441ea27770176bf71ccce22c40393286\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xf7a52b7d3a7b79117544d6bbeb8564bd22c760c4937d69914b99641a957a8f2a\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n    * @dev Returns true if this contract implements the interface defined by\\n    * `interfaceId`. See the corresponding\\n    * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    * to learn more about how these ids are created.\\n    *\\n    * This function call must use less than 30 000 gas.\\n    */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"contracts/HorizonFujiS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\r\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\ncontract HorizonFujiS is CCIPReceiver {\\r\\n\\r\\n    // Custom errors to provide more descriptive revert messages.    \\r\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\r\\n    error NothingToWithdraw();\\r\\n    error FailedToWithdrawEth(address owner, address target, uint256 value);\\r\\n    error DestinationChainNotWhitelisted(uint64 destinationChainSelector);\\r\\n\\r\\n    // Event emitted when a message is sent to another chain.\\r\\n    event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address receiver, bytes _data, address feeToken, uint256 fees);\\r\\n    event MessageReceived(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address sender, string text, address token, uint256 tokenAmount);\\r\\n    event CCIPReceiverAdded(string _blockchainName, address _receiverAddress);\\r\\n    event CCIPReceiverRemoved(address _receiverAddress);\\r\\n\\r\\n    bytes32 private lastReceivedMessageId;\\r\\n    string private lastReceivedText;\\r\\n    uint private destinationChainSelector;\\r\\n\\r\\n    address owner;\\r\\n\\r\\n    /* STRUCTS */\\r\\n    struct ReceiverInfo {\\r\\n        string blockchainName;\\r\\n        address receiverAddress;\\r\\n        bool isReceiver;\\r\\n    }\\r\\n    \\r\\n    // Mapping to keep track of whitelisted destination chains.\\r\\n    mapping(uint64 => bool) public whitelistedDestinationChains;\\r\\n    // Mapping to keep track of receivers.\\r\\n    mapping(address receiverAddress => ReceiverInfo) public ccipReceicers;\\r\\n\\r\\n    LinkTokenInterface linkToken;\\r\\n\\r\\n    constructor(address _router, //0x554472a2720e5e7d5d3c817529aba05eed5f82d8\\r\\n                address _linkToken //0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\\r\\n               ) CCIPReceiver(_router){  \\r\\n        linkToken = LinkTokenInterface(_linkToken);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @dev Whitelists a chain for transactions.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _destinationChainSelector The selector of the destination chain to be whitelisted.\\r\\n    function whitelistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\\r\\n        whitelistedDestinationChains[_destinationChainSelector] = true;\\r\\n    }\\r\\n\\r\\n    /// @dev Denylists a chain for transactions.\\r\\n    /// @notice This function can only be called by the owner.\\r\\n    /// @param _destinationChainSelector The selector of the destination chain to be denylisted.\\r\\n    function denylistDestinationChain(uint64 _destinationChainSelector) external onlyOwner {\\r\\n        whitelistedDestinationChains[_destinationChainSelector] = false;\\r\\n    }\\r\\n\\r\\n    function addReceiver(string memory _blockchainName, address _receiverAddress) public onlyOwner{\\r\\n        require(_receiverAddress != address(0), \\\"Enter a valid address!\\\");\\r\\n        require(ccipReceicers[_receiverAddress].isReceiver == false, \\\"Receiver is already registered!\\\");\\r\\n\\r\\n        ReceiverInfo memory newReceiver = ReceiverInfo({\\r\\n            blockchainName: _blockchainName,\\r\\n            receiverAddress: _receiverAddress,\\r\\n            isReceiver: true\\r\\n        });\\r\\n        \\r\\n        ccipReceicers[_receiverAddress] = newReceiver;\\r\\n\\r\\n        emit CCIPReceiverAdded(_blockchainName, _receiverAddress);\\r\\n    }\\r\\n\\r\\n    function removeReceiver(address _receiverAddress) public onlyOwner {\\r\\n        require(ccipReceicers[_receiverAddress].isReceiver == true, \\\"Receiver is already registered!\\\");\\r\\n\\r\\n        delete ccipReceicers[_receiverAddress];\\r\\n\\r\\n        emit CCIPReceiverRemoved(_receiverAddress);\\r\\n    }\\r\\n\\r\\n    function sendMessagePayLINK(uint64 _destinationChainSelector, address _receiver, bytes memory _data) external /*onlyOwner onlyWhitelistedDestinationChain(_destinationChainSelector)*/ returns (bytes32 messageId){\\r\\n        require(ccipReceicers[_receiver].receiverAddress != address(0), \\\"Enter a valid receiver address!\\\");\\r\\n        require(ccipReceicers[_receiver].isReceiver == true, \\\"This receiver is not whitelisted yet!\\\");\\r\\n        \\r\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\r\\n            ccipReceicers[_receiver].receiverAddress,\\r\\n            _data,\\r\\n            address(linkToken)\\r\\n        );\\r\\n\\r\\n        IRouterClient router = IRouterClient(this.getRouter());\\r\\n\\r\\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        if (fees > linkToken.balanceOf(address(this)))\\r\\n            revert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\\r\\n\\r\\n        linkToken.approve(address(router), fees);\\r\\n\\r\\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        emit MessageSent( messageId, _destinationChainSelector, _receiver, _data, address(linkToken), fees);\\r\\n\\r\\n        return messageId;\\r\\n    }\\r\\n\\r\\n    function _buildCCIPMessage(address _receiver, bytes memory _data, address _feeTokenAddress) internal pure returns (Client.EVM2AnyMessage memory) {\\r\\n        Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\\r\\n            receiver: abi.encode(_receiver),\\r\\n            data: abi.encode(_data),\\r\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\r\\n            extraArgs:  Client._argsToBytes(\\r\\n                Client.EVMExtraArgsV1({gasLimit: 800_000, strict: false})\\r\\n            ),\\r\\n            feeToken: _feeTokenAddress\\r\\n        });\\r\\n        return evm2AnyMessage;\\r\\n    }\\r\\n\\r\\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override{\\r\\n        lastReceivedMessageId = any2EvmMessage.messageId;\\r\\n        lastReceivedText = abi.decode(any2EvmMessage.data, (string));\\r\\n\\r\\n        emit MessageReceived(any2EvmMessage.messageId, any2EvmMessage.sourceChainSelector, abi.decode(any2EvmMessage.sender, (address)), abi.decode(any2EvmMessage.data, (string)), any2EvmMessage.destTokenAmounts[0].token, any2EvmMessage.destTokenAmounts[0].amount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function withdraw(address _beneficiary) public /*onlyOwner*/ {\\r\\n        uint256 amount = address(this).balance;\\r\\n\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\r\\n\\r\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken( address _beneficiary, address _token) public /*onlyOwner*/ {\\r\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        IERC20(_token).transfer(_beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    /* MODIFIERS */\\r\\n\\r\\n    /// @dev Modifier that checks if the chain with the given destinationChainSelector is whitelisted.\\r\\n    /// @param _destinationChainSelector The selector of the destination chain.\\r\\n    modifier onlyWhitelistedDestinationChain(uint64 _destinationChainSelector) {\\r\\n        if (!whitelistedDestinationChains[_destinationChainSelector])\\r\\n            revert DestinationChainNotWhitelisted(_destinationChainSelector);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(){\\r\\n        require(msg.sender == owner, \\\"Only Owner can call this function!\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5229d711de072d2efc43a0fa46a011cae07945fee6464d8c95a35a0dbdcb78e9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6689,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"lastReceivedMessageId","offset":0,"slot":"0","type":"t_bytes32"},{"astId":6691,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"lastReceivedText","offset":0,"slot":"1","type":"t_string_storage"},{"astId":6693,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"destinationChainSelector","offset":0,"slot":"2","type":"t_uint256"},{"astId":6695,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"owner","offset":0,"slot":"3","type":"t_address"},{"astId":6706,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"whitelistedDestinationChains","offset":0,"slot":"4","type":"t_mapping(t_uint64,t_bool)"},{"astId":6711,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"ccipReceicers","offset":0,"slot":"5","type":"t_mapping(t_address,t_struct(ReceiverInfo)6702_storage)"},{"astId":6714,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"linkToken","offset":0,"slot":"6","type":"t_contract(LinkTokenInterface)1390"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(LinkTokenInterface)1390":{"encoding":"inplace","label":"contract LinkTokenInterface","numberOfBytes":"20"},"t_mapping(t_address,t_struct(ReceiverInfo)6702_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct HorizonFujiS.ReceiverInfo)","numberOfBytes":"32","value":"t_struct(ReceiverInfo)6702_storage"},"t_mapping(t_uint64,t_bool)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => bool)","numberOfBytes":"32","value":"t_bool"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(ReceiverInfo)6702_storage":{"encoding":"inplace","label":"struct HorizonFujiS.ReceiverInfo","members":[{"astId":6697,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"blockchainName","offset":0,"slot":"0","type":"t_string_storage"},{"astId":6699,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"receiverAddress","offset":0,"slot":"1","type":"t_address"},{"astId":6701,"contract":"contracts/HorizonFujiS.sol:HorizonFujiS","label":"isReceiver","offset":20,"slot":"1","type":"t_bool"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."},"denylistDestinationChain(uint64)":{"notice":"This function can only be called by the owner."},"getRouter()":{"notice":"Return the current router"},"supportsInterface(bytes4)":{"notice":"IERC165 supports an interfaceId"},"whitelistDestinationChain(uint64)":{"notice":"This function can only be called by the owner."}},"version":1}}},"contracts/HorizonFunctions.sol":{"HorizonFunctions":{"abi":[{"inputs":[{"internalType":"uint64","name":"_subscriptionId","type":"uint64"},{"internalType":"address","name":"_routerFunctions","type":"address"},{"internalType":"uint32","name":"_gasLimit","type":"uint32"},{"internalType":"bytes32","name":"_donID","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EmptyArgs","type":"error"},{"inputs":[],"name":"EmptySource","type":"error"},{"inputs":[],"name":"NoInlineSecrets","type":"error"},{"inputs":[],"name":"OnlyRouterCanFulfill","type":"error"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"name":"UnexpectedRequestID","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"response","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"err","type":"bytes"}],"name":"Response","type":"event"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"name":"returnFunctionsInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_lastRequestId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string[]","name":"args","type":"string[]"}],"name":"sendRequest","outputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"name":"vehicleDataMapping","outputs":[{"internalType":"string","name":"value","type":"string"},{"internalType":"uint256","name":"uintValue","type":"uint256"},{"internalType":"uint256","name":"requestTime","type":"uint256"},{"internalType":"uint256","name":"responseTime","type":"uint256"},{"internalType":"bytes","name":"lastResponse","type":"bytes"},{"internalType":"bytes","name":"lastError","type":"bytes"},{"internalType":"bool","name":"isRequest","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"details":"Either response or error parameter will be set, but never both.","params":{"err":"Aggregated error either from the request's source code or from the execution pipeline.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the request's source code."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a0346200036a576001600160401b03601f62001e9b38819003918201601f1916840191838311858410176200036f578085926080946040528339810103126200036a5781519081168091036200036a5760208201516001600160a01b038116929091908383036200036a5760408101519063ffffffff821682036200036a57606001519360805260048054906001918281811c911680156200035f575b60208210146200034a57601f811162000318575b507f6f6465537472696e6728646174612e56616c6f72293b00000000000000000000917f6169742046756e6374696f6e732e6d616b654874747052657175657374287b758261032d600c9455806000527f6e73742069644d61726361203d20617267735b315d3b636f6e73742069644d6f6020600020937f636f6e7374207469706f4175746f6d6f76656c203d20617267735b305d3b636f85558401557f64656c6f203d20617267735b325d3b636f6e737420646174614d6f64656c6f2060028401557f3d20617267735b335d3b636f6e737420617069526573706f6e7365203d20617760038401558201557f726c3a206068747470733a2f2f706172616c6c656c756d2e636f6d2e62722f6660058201557f6970652f6170692f76312f247b7469706f4175746f6d6f76656c7d2f6d61726360068201557f61732f247b69644d617263617d2f6d6f64656c6f732f247b69644d6f64656c6f60078201557f7d2f616e6f732f247b646174614d6f64656c6f7d607d293b696620286170695260088201557f6573706f6e73652e6572726f7229207b7468726f77204572726f72282752657160098201557f75657374206661696c656427293b7d636f6e7374207b2064617461207d203d20600a8201557f617069526573706f6e73653b72657475726e2046756e6374696f6e732e656e63600b8201550155735fa769922a6428758fb44453815e2c436c57c3c760018060a01b0319600554161760055563ffffffff60e01b9060e01b169168010000000000000000600160e01b039060401b161717600255600355604051611b15908162000386823960805181818160ba0152610bd80152f35b81600052600d601f6020600020920160051c820191015b8181106200033e5750620000b1565b6000815583016200032f565b602282634e487b7160e01b6000525260246000fd5b90607f16906200009d565b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260048036101561001357600080fd5b6000803560e01c9182630ca761751461006c57505080634c8f60a314610067578063b1e2174914610062578063c972ebb61461005d5763e6ee90201461005857600080fd5b6106b3565b6103b3565b610395565b610328565b34610245576060366003190112610245578035906001600160401b036024358181116102415761009f903690840161030a565b90604435908111610241576100b7903690840161030a565b907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610230576100fc846000526001602052604060002090565b9261010b600685015460ff1690565b15610214579060208483610125846101699796840161087f565b610132856005840161087f565b61013c848361087f565b4260038301556005546001600160a01b031690604051809781948293631bd9515560e01b84528301611aa9565b03915afa93841561020f576001600587967f7873807bf6ddc50401cd3d29bbe0decee23fd4d68d273f4b5eb83cded4d2f172968a916101e1575b50049101556101b760405192839283611aba565b0390a27f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e68280a280f35b610202915060203d8111610208575b6101fa818361027f565b810190610b65565b8a6101a3565b503d6101f0565b610b74565b60405163d068bf5b60e01b815290810185815281906020010390fd5b60405163c6829f8360e01b81528390fd5b8480fd5b5080fd5b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761027a57604052565b610249565b90601f801991011681019081106001600160401b0382111761027a57604052565b6040519060e082018281106001600160401b0382111761027a57604052565b9291926001600160401b03821161027a57604051916102e8601f8201601f19166020018461027f565b829481845281830111610305578281602093846000960137010152565b600080fd5b9080601f8301121561030557816020610325933591016102bf565b90565b34610305576020366003190112610305576001600160401b036004358181116103055736602382011215610305578060040135918211610305573660248360051b83010111610305576103919160246103819201610a92565b6040519081529081906020820190565b0390f35b34610305576000366003190112610305576020600054604051908152f35b346103055760203660031901126103055760043560005260016020526040806000206003600182015491015482519182526020820152f35b90600182811c9216801561041b575b602083101461040557565b634e487b7160e01b600052602260045260246000fd5b91607f16916103fa565b6040519060008260045491610439836103eb565b808352926001908181169081156104c15750600114610462575b506104609250038361027f565b565b6004600090815291507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8483106104a65750610460935050810160200138610453565b81935090816020925483858a0101520191019091859261048d565b90506020925061046094915060ff191682840152151560051b82010138610453565b90604051918260008254926104f7846103eb565b9081845260019485811690816000146105645750600114610521575b50506104609250038361027f565b9093915060005260209081600020936000915b81831061054c57505061046093508201013880610513565b85548884018501529485019487945091830191610534565b91505061046094506020925060ff191682840152151560051b8201013880610513565b9060009291805491610598836103eb565b9182825260019384811690816000146105fa57506001146105ba575b50505050565b90919394506000526020928360002092846000945b8386106105e65750505050010190388080806105b4565b8054858701830152940193859082016105cf565b9294505050602093945060ff191683830152151560051b010190388080806105b4565b919082519283825260005b848110610649575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610628565b9592946106ab9460c09661068061069d95949b9a9b60e08b5260e08b019061061d565b9360208a015260408901526060880152868203608088015261061d565b9084820360a086015261061d565b931515910152565b3461030557602036600319011261030557600435600052600160205260406000206106dd816104e3565b61039160018301549260028101549060038101546040519061070d826107068160048701610587565b038361027f565b60ff60066040519461072d866107268160058501610587565b038761027f565b015416936040519788978861065d565b6040519060e082018281106001600160401b0382111761027a57604052606060c08360008152600060208201526000604082015282808201528260808201528260a08201520152565b929190926001600160401b039182851161027a578460051b60405193602080956107b28285018261027f565b8098815201918401938385116103055780925b8584106107d55750505050505050565b833583811161030557820185601f820112156103055787916107fd87838580953591016102bf565b8152019301926107c5565b60405190602082018281106001600160401b0382111761027a5760405260008252565b90601f811161083957505050565b600091825260208220906020601f850160051c83019410610875575b601f0160051c01915b82811061086a57505050565b81815560010161085e565b9092508290610855565b91909182516001600160401b03811161027a576108a6816108a084546103eb565b8461082b565b602080601f83116001146108e25750819293946000926108d7575b50508160011b916000199060031b1c1916179055565b0151905038806108c1565b90601f198316956108f885600052602060002090565b926000905b8882106109355750508360019596971061091c575b505050811b019055565b015160001960f88460031b161c19169055388080610912565b806001859682949686015181550195019301906108fd565b91909182519283516001600160401b03811161027a576109778161097185546103eb565b8561082b565b6020948590601f8311600114610a1857926104609596836109fa9460c094600697600092610a0d575b50508160011b916000199060031b1c19161786555b810151600186015560408101516002860155606081015160038601556109e260808201516004870161087f565b6109f360a08201516005870161087f565b0151151590565b91019060ff801983541691151516179055565b0151905038806109a0565b90601f19831691610a2e86600052602060002090565b9260005b818110610a7b57508460c094600697946104609a9b946109fa9860019510610a62575b505050811b0186556109b5565b015160001960f88460031b161c19169055388080610a55565b929389600181928786015181550195019301610a32565b610ac4610b4392610adf92610aa561073d565b91610ab7610ab1610425565b84610fb0565b80610b49575b5050610ddd565b600254600354916001600160401b038260e01c921690610b80565b80600055610b3e610aee6102a0565b91610af7610808565b83526000602084015242604084015260006060840152610b15610808565b6080840152610b22610808565b60a0840152600160c08401526000526001602052604060002090565b61094d565b60005490565b610b5e91610b58913691610786565b82610fd9565b3880610abd565b90816020910312610305575190565b6040513d6000823e3d90fd5b92906020926001600160401b039263ffffffff610bbf604051978896879663230e93b160e11b885216600487015260a0602487015260a486019061061d565b60016044860152921660648401526084830152038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af190811561020f57600091610c3b575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b610c53915060203d8111610208576101fa818361027f565b38610c11565b60405190610c668261025f565b600c82526b31b7b232a637b1b0ba34b7b760a11b6020830152565b634e487b7160e01b600052602160045260246000fd5b60031115610ca157565b610c81565b60405190610cb38261025f565b60088252676c616e677561676560c01b6020830152565b60011115610ca157565b60405190610ce18261025f565b6006825265736f7572636560d01b6020830152565b60405190610d038261025f565b60048252636172677360e01b6020830152565b634e487b7160e01b600052601160045260246000fd5b6000198114610d3b5760010190565b610d16565b8051821015610d545760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405190610d778261025f565b600f82526e39b2b1b932ba39a637b1b0ba34b7b760891b6020830152565b60405190610da28261025f565b60078252667365637265747360c81b6020830152565b60405190610dc58261025f565b600982526862797465734172677360b81b6020830152565b610de5611012565b90610df7610df1610c59565b8361176a565b610e148151610e0581610c97565b610e0e81610c97565b836110de565b610e1f610df1610ca6565b610e396040820151610e3081610cca565b610e0e81610cca565b610e44610df1610cd4565b610e5260608201518361176a565b60a08101805151610f57575b506080810190815151610ed7575b60c0915001805151610e7f575b50515190565b91610e8b610df1610db8565b610e94826117ee565b60005b83518051821015610ec45790610eba610eb382610ebf94610d40565b51856116b5565b610d2c565b610e97565b50509150610ed18161187a565b38610e79565b602081018051610ee681610c97565b610eef81610c97565b15610f455760c092610f28610f4092610f0f610f09610d6a565b8861176a565b51610f1981610c97565b610f2281610c97565b866110de565b610f39610f33610d95565b8661176a565b51846116b5565b610e6c565b60405163a80d31f760e01b8152600490fd5b92610f69610f63610cf6565b8461176a565b610f72836117ee565b60005b84518051821015610f9d5790610eba610f9182610f9894610d40565b518661176a565b610f75565b50509250610faa8261187a565b38610e5e565b815115610fc7576000808252604082015260600152565b6040516322ce3edd60e01b8152600490fd5b815115610fe65760a00152565b60405163fe936cb760e01b8152600490fd5b604051906110058261025f565b6000602083606081520152565b60405161101e8161025f565b611026610ff8565b8082526020820160008152611039610ff8565b506101006020830152604051809252600082526101208201918210610305576000916040525290565b601f19810191908211610d3b57565b9060208201809211610d3b57565b91908201809211610d3b57565b90611095610ff8565b50601f8116806110c4575b50806020830152604051908183526000825281016020019081106103055760405290565b60200360208111610d3b578101809111610d3b57386110a0565b908151916110ea610ff8565b508251516001810190818111610d3b576020850151811015611143575b60c26020610460965192830101538051821161113b575b5050604051916020830152602082526111368261025f565b6116b5565b52388061111e565b8160011b9482860460021483151715610d3b576020816111756104609861116e60c29551918461108c565b50826115fd565b5096505050611107565b908160011b9180830460021490151715610d3b57565b61119d610ff8565b508051516001810190818111610d3b5760208301518110156111d6575b605b602084519283010153805182116111d257505090565b5290565b8160011b82810460021483151715610d3b576111ff906111f88551918661108c565b50846115fd565b506111ba565b61120d610ff8565b508051516001810190818111610d3b576020830151811015611242575b605a602084519283010153805182116111d257505090565b8160011b82810460021483151715610d3b57611264906111f88551918661108c565b5061122a565b611272610ff8565b508051516001810190818111610d3b5760208301518110156112a7575b6059602084519283010153805182116111d257505090565b8160011b82810460021483151715610d3b576112c9906111f88551918661108c565b5061128f565b6112d7610ff8565b508051516001810190818111610d3b57602083015181101561130c575b6058602084519283010153805182116111d257505090565b8160011b82810460021483151715610d3b5761132e906111f88551918661108c565b506112f4565b61133c610ff8565b508051516001810190818111610d3b576020830151811015611371575b607b602084519283010153805182116111d257505090565b8160011b82810460021483151715610d3b57611393906111f88551918661108c565b50611359565b6113a1610ff8565b508051516001810190818111610d3b5760208301518110156113d6575b607a602084519283010153805182116111d257505090565b8160011b82810460021483151715610d3b576113f8906111f88551918661108c565b506113be565b611406610ff8565b508051516001810190818111610d3b57602083015181101561143b575b6079602084519283010153805182116111d257505090565b8160011b82810460021483151715610d3b5761145d906111f88551918661108c565b50611423565b61146b610ff8565b508051516001810190818111610d3b5760208301518110156114a0575b6078602084519283010153805182116111d257505090565b8160011b82810460021483151715610d3b576114c2906111f88551918661108c565b50611488565b906114d1610ff8565b508151516001810191828211610d3b576020840151821015611504575b602084519283010153805182116111d257505090565b8260011b83810460021484151715610d3b5761152d906115268651918761108c565b50856115fd565b506114ee565b906115408251918361108c565b50611549610ff8565b50805190611555610ff8565b5061156381518311156116ae565b82515192611571838561107f565b9160209282848094015182116115e6575b51838151978201019682116115de575b505001915b818110156115b85760001991036101000a0190811990511690825116179052565b91926115d36115cd6115d99286518152611071565b94611071565b92611062565b611597565b523880611592565b6115f86115f28361117f565b82611533565b611582565b90611606610ff8565b508051611611610ff8565b5061161f82518211156116ae565b8251519161162d828461107f565b6020918291828701518111611697575b86518381519782010196821161168f575b505001915b818110156116755760001991036101000a019081199051169082511617905290565b91926115d36115cd61168a9286518152611071565b611653565b52388061164e565b6116a96116a38261117f565b88611533565b61163d565b1561030557565b81516116ec9291906001600160401b03811690601782116116ef576116e49150604060ff8451921617906114c8565b505b516115fd565b50565b5060ff81116117145761170e9061170683516112cf565b508251611a43565b506116e6565b61ffff81116117335761170e9061172b835161126a565b5082516119dc565b63ffffffff81116117545761170e9061174c8351611205565b508251611973565b61170e906117628351611195565b508251611907565b81516116ec9291906001600160401b0381169060178211611799576116e49150606060ff8451921617906114c8565b5060ff81116117b05761170e906117068351611463565b61ffff81116117c75761170e9061172b83516113fe565b63ffffffff81116117e05761170e9061174c8351611399565b61170e906117628351611334565b8051906117f9610ff8565b508151516001810190818111610d3b576020840151811015611847575b609f602080955192830101538051821161183f575b50500180519060018201809211610d3b5752565b52388061182b565b8160011b9382850460021483151715610d3b57602081611870829761116e609f9551918461108c565b5095505050611816565b805190611885610ff8565b508151516001810190818111610d3b5760208401518110156118d4575b60ff60208095519283010153805182116118cc575b5050018051600019810191908211610d3b5752565b5238806118b7565b8160011b9382850460021483151715610d3b576020816118fd829761116e60ff9551918461108c565b50955050506118a2565b90611910610ff8565b50815151806008019182600811610d3b5760208401518311611952575b6008845192830101906001600160401b0319825116179052805182116111d257505090565b8260011b83810460021484151715610d3b5761196e9085611533565b61192d565b9061197c610ff8565b50815151806004019182600411610d3b57602084015183116119bb575b60048451928301019063ffffffff19825116179052805182116111d257505090565b8260011b83810460021484151715610d3b576119d79085611533565b611999565b906119e5610ff8565b50815151806002019182600211610d3b5760208401518311611a22575b60028451928301019061ffff19825116179052805182116111d257505090565b8260011b83810460021484151715610d3b57611a3e9085611533565b611a02565b90611a4c610ff8565b50815151806001019182600111610d3b5760208401518311611a88575b60018451928301019060ff19825116179052805182116111d257505090565b8260011b83810460021484151715610d3b57611aa49085611533565b611a69565b906020610325928181520190610587565b9091611ad16103259360408452604084019061061d565b91602081840391015261061d56fea264697066735822122011a6e5ca1f84d78c439355f75ec4c25dd9ebef1a12423aebe1000f22582ba59464736f6c63430008140033","opcodes":"PUSH1 0xA0 CALLVALUE PUSH3 0x36A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1F PUSH3 0x1E9B CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP2 DUP4 DUP4 GT DUP6 DUP5 LT OR PUSH3 0x36F JUMPI DUP1 DUP6 SWAP3 PUSH1 0x80 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x36A JUMPI DUP2 MLOAD SWAP1 DUP2 AND DUP1 SWAP2 SUB PUSH3 0x36A JUMPI PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 SWAP1 SWAP2 SWAP1 DUP4 DUP4 SUB PUSH3 0x36A JUMPI PUSH1 0x40 DUP2 ADD MLOAD SWAP1 PUSH4 0xFFFFFFFF DUP3 AND DUP3 SUB PUSH3 0x36A JUMPI PUSH1 0x60 ADD MLOAD SWAP4 PUSH1 0x80 MSTORE PUSH1 0x4 DUP1 SLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x35F JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH3 0x34A JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x318 JUMPI JUMPDEST POP PUSH32 0x6F6465537472696E6728646174612E56616C6F72293B00000000000000000000 SWAP2 PUSH32 0x6169742046756E6374696F6E732E6D616B654874747052657175657374287B75 DUP3 PUSH2 0x32D PUSH1 0xC SWAP5 SSTORE DUP1 PUSH1 0x0 MSTORE PUSH32 0x6E73742069644D61726361203D20617267735B315D3B636F6E73742069644D6F PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP4 PUSH32 0x636F6E7374207469706F4175746F6D6F76656C203D20617267735B305D3B636F DUP6 SSTORE DUP5 ADD SSTORE PUSH32 0x64656C6F203D20617267735B325D3B636F6E737420646174614D6F64656C6F20 PUSH1 0x2 DUP5 ADD SSTORE PUSH32 0x3D20617267735B335D3B636F6E737420617069526573706F6E7365203D206177 PUSH1 0x3 DUP5 ADD SSTORE DUP3 ADD SSTORE PUSH32 0x726C3A206068747470733A2F2F706172616C6C656C756D2E636F6D2E62722F66 PUSH1 0x5 DUP3 ADD SSTORE PUSH32 0x6970652F6170692F76312F247B7469706F4175746F6D6F76656C7D2F6D617263 PUSH1 0x6 DUP3 ADD SSTORE PUSH32 0x61732F247B69644D617263617D2F6D6F64656C6F732F247B69644D6F64656C6F PUSH1 0x7 DUP3 ADD SSTORE PUSH32 0x7D2F616E6F732F247B646174614D6F64656C6F7D607D293B6966202861706952 PUSH1 0x8 DUP3 ADD SSTORE PUSH32 0x6573706F6E73652E6572726F7229207B7468726F77204572726F722827526571 PUSH1 0x9 DUP3 ADD SSTORE PUSH32 0x75657374206661696C656427293B7D636F6E7374207B2064617461207D203D20 PUSH1 0xA DUP3 ADD SSTORE PUSH32 0x617069526573706F6E73653B72657475726E2046756E6374696F6E732E656E63 PUSH1 0xB DUP3 ADD SSTORE ADD SSTORE PUSH20 0x5FA769922A6428758FB44453815E2C436C57C3C7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL SWAP1 PUSH1 0xE0 SHL AND SWAP2 PUSH9 0x10000000000000000 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 PUSH1 0x40 SHL AND OR OR PUSH1 0x2 SSTORE PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD PUSH2 0x1B15 SWAP1 DUP2 PUSH3 0x386 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH1 0xBA ADD MSTORE PUSH2 0xBD8 ADD MSTORE RETURN JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x1F PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 ADD JUMPDEST DUP2 DUP2 LT PUSH3 0x33E JUMPI POP PUSH3 0xB1 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP4 ADD PUSH3 0x32F JUMP JUMPDEST PUSH1 0x22 DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x9D JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0xCA76175 EQ PUSH2 0x6C JUMPI POP POP DUP1 PUSH4 0x4C8F60A3 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0xB1E21749 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0xC972EBB6 EQ PUSH2 0x5D JUMPI PUSH4 0xE6EE9020 EQ PUSH2 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B3 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x395 JUMP JUMPDEST PUSH2 0x328 JUMP JUMPDEST CALLVALUE PUSH2 0x245 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x245 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x241 JUMPI PUSH2 0x9F SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x241 JUMPI PUSH2 0xB7 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x230 JUMPI PUSH2 0xFC DUP5 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x10B PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x214 JUMPI SWAP1 PUSH1 0x20 DUP5 DUP4 PUSH2 0x125 DUP5 PUSH2 0x169 SWAP8 SWAP7 DUP5 ADD PUSH2 0x87F JUMP JUMPDEST PUSH2 0x132 DUP6 PUSH1 0x5 DUP5 ADD PUSH2 0x87F JUMP JUMPDEST PUSH2 0x13C DUP5 DUP4 PUSH2 0x87F JUMP JUMPDEST TIMESTAMP PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP8 DUP2 SWAP5 DUP3 SWAP4 PUSH4 0x1BD95155 PUSH1 0xE0 SHL DUP5 MSTORE DUP4 ADD PUSH2 0x1AA9 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x20F JUMPI PUSH1 0x1 PUSH1 0x5 DUP8 SWAP7 PUSH32 0x7873807BF6DDC50401CD3D29BBE0DECEE23FD4D68D273F4B5EB83CDED4D2F172 SWAP7 DUP11 SWAP2 PUSH2 0x1E1 JUMPI JUMPDEST POP DIV SWAP2 ADD SSTORE PUSH2 0x1B7 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x1ABA JUMP JUMPDEST SUB SWAP1 LOG2 PUSH32 0x85E1543BF2F84FE80C6BADBCE3648C8539AD1DF4D2B3D822938CA0538BE727E6 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH2 0x202 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x208 JUMPI JUMPDEST PUSH2 0x1FA DUP2 DUP4 PUSH2 0x27F JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xB65 JUMP JUMPDEST DUP11 PUSH2 0x1A3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0xB74 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD068BF5B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 DUP2 MSTORE DUP2 SWAP1 PUSH1 0x20 ADD SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC6829F83 PUSH1 0xE0 SHL DUP2 MSTORE DUP4 SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2E8 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x27F JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x305 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x305 JUMPI DUP2 PUSH1 0x20 PUSH2 0x325 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x305 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x305 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x305 JUMPI CALLDATASIZE PUSH1 0x24 DUP4 PUSH1 0x5 SHL DUP4 ADD ADD GT PUSH2 0x305 JUMPI PUSH2 0x391 SWAP2 PUSH1 0x24 PUSH2 0x381 SWAP3 ADD PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x20 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x3 PUSH1 0x1 DUP3 ADD SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x41B JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x405 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x4 SLOAD SWAP2 PUSH2 0x439 DUP4 PUSH2 0x3EB JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x4C1 JUMPI POP PUSH1 0x1 EQ PUSH2 0x462 JUMPI JUMPDEST POP PUSH2 0x460 SWAP3 POP SUB DUP4 PUSH2 0x27F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP5 DUP4 LT PUSH2 0x4A6 JUMPI POP PUSH2 0x460 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x453 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x48D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x460 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x453 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x4F7 DUP5 PUSH2 0x3EB JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x564 JUMPI POP PUSH1 0x1 EQ PUSH2 0x521 JUMPI JUMPDEST POP POP PUSH2 0x460 SWAP3 POP SUB DUP4 PUSH2 0x27F JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x54C JUMPI POP POP PUSH2 0x460 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x513 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x534 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x460 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x513 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP2 PUSH2 0x598 DUP4 PUSH2 0x3EB JUMP JUMPDEST SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x5FA JUMPI POP PUSH1 0x1 EQ PUSH2 0x5BA JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0x5E6 JUMPI POP POP POP POP ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x5B4 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0x5CF JUMP JUMPDEST SWAP3 SWAP5 POP POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x5B4 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x649 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x628 JUMP JUMPDEST SWAP6 SWAP3 SWAP5 PUSH2 0x6AB SWAP5 PUSH1 0xC0 SWAP7 PUSH2 0x680 PUSH2 0x69D SWAP6 SWAP5 SWAP12 SWAP11 SWAP12 PUSH1 0xE0 DUP12 MSTORE PUSH1 0xE0 DUP12 ADD SWAP1 PUSH2 0x61D JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP11 ADD MSTORE PUSH1 0x40 DUP10 ADD MSTORE PUSH1 0x60 DUP9 ADD MSTORE DUP7 DUP3 SUB PUSH1 0x80 DUP9 ADD MSTORE PUSH2 0x61D JUMP JUMPDEST SWAP1 DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0x61D JUMP JUMPDEST SWAP4 ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x6DD DUP2 PUSH2 0x4E3 JUMP JUMPDEST PUSH2 0x391 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH1 0x2 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 PUSH2 0x70D DUP3 PUSH2 0x706 DUP2 PUSH1 0x4 DUP8 ADD PUSH2 0x587 JUMP JUMPDEST SUB DUP4 PUSH2 0x27F JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x72D DUP7 PUSH2 0x726 DUP2 PUSH1 0x5 DUP6 ADD PUSH2 0x587 JUMP JUMPDEST SUB DUP8 PUSH2 0x27F JUMP JUMPDEST ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x65D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE PUSH1 0x60 PUSH1 0xC0 DUP4 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 DUP6 GT PUSH2 0x27A JUMPI DUP5 PUSH1 0x5 SHL PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP1 SWAP6 PUSH2 0x7B2 DUP3 DUP6 ADD DUP3 PUSH2 0x27F JUMP JUMPDEST DUP1 SWAP9 DUP2 MSTORE ADD SWAP2 DUP5 ADD SWAP4 DUP4 DUP6 GT PUSH2 0x305 JUMPI DUP1 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x7D5 JUMPI POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x305 JUMPI DUP3 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x305 JUMPI DUP8 SWAP2 PUSH2 0x7FD DUP8 DUP4 DUP6 DUP1 SWAP6 CALLDATALOAD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x839 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x875 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x86A JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x85E JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x855 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x27A JUMPI PUSH2 0x8A6 DUP2 PUSH2 0x8A0 DUP5 SLOAD PUSH2 0x3EB JUMP JUMPDEST DUP5 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x8E2 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x8D7 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x8C1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x8F8 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x935 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x91C JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x912 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD SWAP3 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x27A JUMPI PUSH2 0x977 DUP2 PUSH2 0x971 DUP6 SLOAD PUSH2 0x3EB JUMP JUMPDEST DUP6 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP6 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xA18 JUMPI SWAP3 PUSH2 0x460 SWAP6 SWAP7 DUP4 PUSH2 0x9FA SWAP5 PUSH1 0xC0 SWAP5 PUSH1 0x6 SWAP8 PUSH1 0x0 SWAP3 PUSH2 0xA0D JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR DUP7 SSTORE JUMPDEST DUP2 ADD MLOAD PUSH1 0x1 DUP7 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP7 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP7 ADD SSTORE PUSH2 0x9E2 PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP8 ADD PUSH2 0x87F JUMP JUMPDEST PUSH2 0x9F3 PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP8 ADD PUSH2 0x87F JUMP JUMPDEST ADD MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x9A0 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0xA2E DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xA7B JUMPI POP DUP5 PUSH1 0xC0 SWAP5 PUSH1 0x6 SWAP8 SWAP5 PUSH2 0x460 SWAP11 SWAP12 SWAP5 PUSH2 0x9FA SWAP9 PUSH1 0x1 SWAP6 LT PUSH2 0xA62 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH2 0x9B5 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xA55 JUMP JUMPDEST SWAP3 SWAP4 DUP10 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xA32 JUMP JUMPDEST PUSH2 0xAC4 PUSH2 0xB43 SWAP3 PUSH2 0xADF SWAP3 PUSH2 0xAA5 PUSH2 0x73D JUMP JUMPDEST SWAP2 PUSH2 0xAB7 PUSH2 0xAB1 PUSH2 0x425 JUMP JUMPDEST DUP5 PUSH2 0xFB0 JUMP JUMPDEST DUP1 PUSH2 0xB49 JUMPI JUMPDEST POP POP PUSH2 0xDDD JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 PUSH1 0xE0 SHR SWAP3 AND SWAP1 PUSH2 0xB80 JUMP JUMPDEST DUP1 PUSH1 0x0 SSTORE PUSH2 0xB3E PUSH2 0xAEE PUSH2 0x2A0 JUMP JUMPDEST SWAP2 PUSH2 0xAF7 PUSH2 0x808 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB15 PUSH2 0x808 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0xB22 PUSH2 0x808 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x94D JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB5E SWAP2 PUSH2 0xB58 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x786 JUMP JUMPDEST DUP3 PUSH2 0xFD9 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0xABD JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x305 JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP1 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 PUSH4 0xFFFFFFFF PUSH2 0xBBF PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP7 PUSH4 0x230E93B1 PUSH1 0xE1 SHL DUP9 MSTORE AND PUSH1 0x4 DUP8 ADD MSTORE PUSH1 0xA0 PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0xA4 DUP7 ADD SWAP1 PUSH2 0x61D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x44 DUP7 ADD MSTORE SWAP3 AND PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD MSTORE SUB DUP2 PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 SWAP2 PUSH2 0xC3B JUMPI JUMPDEST POP DUP1 PUSH32 0x1131472297A800FEE664D1D89CFA8F7676FF07189ECC53F80BBB5F4969099DB8 PUSH1 0x0 DUP1 LOG2 SWAP1 JUMP JUMPDEST PUSH2 0xC53 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x208 JUMPI PUSH2 0x1FA DUP2 DUP4 PUSH2 0x27F JUMP JUMPDEST CODESIZE PUSH2 0xC11 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xC66 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0xC DUP3 MSTORE PUSH12 0x31B7B232A637B1B0BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 GT ISZERO PUSH2 0xCA1 JUMPI JUMP JUMPDEST PUSH2 0xC81 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xCB3 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x8 DUP3 MSTORE PUSH8 0x6C616E6775616765 PUSH1 0xC0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 GT ISZERO PUSH2 0xCA1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xCE1 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x6 DUP3 MSTORE PUSH6 0x736F75726365 PUSH1 0xD0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xD03 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH4 0x61726773 PUSH1 0xE0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0xD3B JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xD16 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xD54 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xD77 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0xF DUP3 MSTORE PUSH15 0x39B2B1B932BA39A637B1B0BA34B7B7 PUSH1 0x89 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xDA2 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH7 0x73656372657473 PUSH1 0xC8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xDC5 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x9 DUP3 MSTORE PUSH9 0x627974657341726773 PUSH1 0xB8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0x1012 JUMP JUMPDEST SWAP1 PUSH2 0xDF7 PUSH2 0xDF1 PUSH2 0xC59 JUMP JUMPDEST DUP4 PUSH2 0x176A JUMP JUMPDEST PUSH2 0xE14 DUP2 MLOAD PUSH2 0xE05 DUP2 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0xE0E DUP2 PUSH2 0xC97 JUMP JUMPDEST DUP4 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0xE1F PUSH2 0xDF1 PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0xE39 PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xE30 DUP2 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0xE0E DUP2 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0xE44 PUSH2 0xDF1 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0xE52 PUSH1 0x60 DUP3 ADD MLOAD DUP4 PUSH2 0x176A JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD DUP1 MLOAD MLOAD PUSH2 0xF57 JUMPI JUMPDEST POP PUSH1 0x80 DUP2 ADD SWAP1 DUP2 MLOAD MLOAD PUSH2 0xED7 JUMPI JUMPDEST PUSH1 0xC0 SWAP2 POP ADD DUP1 MLOAD MLOAD PUSH2 0xE7F JUMPI JUMPDEST POP MLOAD MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0xE8B PUSH2 0xDF1 PUSH2 0xDB8 JUMP JUMPDEST PUSH2 0xE94 DUP3 PUSH2 0x17EE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xEC4 JUMPI SWAP1 PUSH2 0xEBA PUSH2 0xEB3 DUP3 PUSH2 0xEBF SWAP5 PUSH2 0xD40 JUMP JUMPDEST MLOAD DUP6 PUSH2 0x16B5 JUMP JUMPDEST PUSH2 0xD2C JUMP JUMPDEST PUSH2 0xE97 JUMP JUMPDEST POP POP SWAP2 POP PUSH2 0xED1 DUP2 PUSH2 0x187A JUMP JUMPDEST CODESIZE PUSH2 0xE79 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH2 0xEE6 DUP2 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0xEEF DUP2 PUSH2 0xC97 JUMP JUMPDEST ISZERO PUSH2 0xF45 JUMPI PUSH1 0xC0 SWAP3 PUSH2 0xF28 PUSH2 0xF40 SWAP3 PUSH2 0xF0F PUSH2 0xF09 PUSH2 0xD6A JUMP JUMPDEST DUP9 PUSH2 0x176A JUMP JUMPDEST MLOAD PUSH2 0xF19 DUP2 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0xF22 DUP2 PUSH2 0xC97 JUMP JUMPDEST DUP7 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0xF39 PUSH2 0xF33 PUSH2 0xD95 JUMP JUMPDEST DUP7 PUSH2 0x176A JUMP JUMPDEST MLOAD DUP5 PUSH2 0x16B5 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA80D31F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP3 PUSH2 0xF69 PUSH2 0xF63 PUSH2 0xCF6 JUMP JUMPDEST DUP5 PUSH2 0x176A JUMP JUMPDEST PUSH2 0xF72 DUP4 PUSH2 0x17EE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xF9D JUMPI SWAP1 PUSH2 0xEBA PUSH2 0xF91 DUP3 PUSH2 0xF98 SWAP5 PUSH2 0xD40 JUMP JUMPDEST MLOAD DUP7 PUSH2 0x176A JUMP JUMPDEST PUSH2 0xF75 JUMP JUMPDEST POP POP SWAP3 POP PUSH2 0xFAA DUP3 PUSH2 0x187A JUMP JUMPDEST CODESIZE PUSH2 0xE5E JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xFC7 JUMPI PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x22CE3EDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xFE6 JUMPI PUSH1 0xA0 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFE936CB7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1005 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 PUSH1 0x60 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101E DUP2 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x1026 PUSH2 0xFF8 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH2 0x1039 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH2 0x100 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x0 DUP3 MSTORE PUSH2 0x120 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x305 JUMPI PUSH1 0x0 SWAP2 PUSH1 0x40 MSTORE MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1F NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0xD3B JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3B JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3B JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x1095 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH1 0x1F DUP2 AND DUP1 PUSH2 0x10C4 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 MSTORE PUSH1 0x0 DUP3 MSTORE DUP2 ADD PUSH1 0x20 ADD SWAP1 DUP2 LT PUSH2 0x305 JUMPI PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 SUB PUSH1 0x20 DUP2 GT PUSH2 0xD3B JUMPI DUP2 ADD DUP1 SWAP2 GT PUSH2 0xD3B JUMPI CODESIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 PUSH2 0x10EA PUSH2 0xFF8 JUMP JUMPDEST POP DUP3 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP6 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1143 JUMPI JUMPDEST PUSH1 0xC2 PUSH1 0x20 PUSH2 0x460 SWAP7 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x113B JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP3 MSTORE PUSH2 0x1136 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x16B5 JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x111E JUMP JUMPDEST DUP2 PUSH1 0x1 SHL SWAP5 DUP3 DUP7 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH1 0x20 DUP2 PUSH2 0x1175 PUSH2 0x460 SWAP9 PUSH2 0x116E PUSH1 0xC2 SWAP6 MLOAD SWAP2 DUP5 PUSH2 0x108C JUMP JUMPDEST POP DUP3 PUSH2 0x15FD JUMP JUMPDEST POP SWAP7 POP POP POP PUSH2 0x1107 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x1 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0xD3B JUMPI JUMP JUMPDEST PUSH2 0x119D PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x11D6 JUMPI JUMPDEST PUSH1 0x5B PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x11FF SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP DUP5 PUSH2 0x15FD JUMP JUMPDEST POP PUSH2 0x11BA JUMP JUMPDEST PUSH2 0x120D PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1242 JUMPI JUMPDEST PUSH1 0x5A PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1264 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x122A JUMP JUMPDEST PUSH2 0x1272 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x12A7 JUMPI JUMPDEST PUSH1 0x59 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x12C9 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x128F JUMP JUMPDEST PUSH2 0x12D7 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x130C JUMPI JUMPDEST PUSH1 0x58 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x132E SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x12F4 JUMP JUMPDEST PUSH2 0x133C PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1371 JUMPI JUMPDEST PUSH1 0x7B PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1393 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x13A1 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x13D6 JUMPI JUMPDEST PUSH1 0x7A PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x13F8 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x13BE JUMP JUMPDEST PUSH2 0x1406 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x143B JUMPI JUMPDEST PUSH1 0x79 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x145D SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1423 JUMP JUMPDEST PUSH2 0x146B PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x14A0 JUMPI JUMPDEST PUSH1 0x78 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x14C2 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1488 JUMP JUMPDEST SWAP1 PUSH2 0x14D1 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP2 DUP3 DUP3 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP3 LT ISZERO PUSH2 0x1504 JUMPI JUMPDEST PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x152D SWAP1 PUSH2 0x1526 DUP7 MLOAD SWAP2 DUP8 PUSH2 0x108C JUMP JUMPDEST POP DUP6 PUSH2 0x15FD JUMP JUMPDEST POP PUSH2 0x14EE JUMP JUMPDEST SWAP1 PUSH2 0x1540 DUP3 MLOAD SWAP2 DUP4 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1549 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD SWAP1 PUSH2 0x1555 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH2 0x1563 DUP2 MLOAD DUP4 GT ISZERO PUSH2 0x16AE JUMP JUMPDEST DUP3 MLOAD MLOAD SWAP3 PUSH2 0x1571 DUP4 DUP6 PUSH2 0x107F JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP3 DUP3 DUP5 DUP1 SWAP5 ADD MLOAD DUP3 GT PUSH2 0x15E6 JUMPI JUMPDEST MLOAD DUP4 DUP2 MLOAD SWAP8 DUP3 ADD ADD SWAP7 DUP3 GT PUSH2 0x15DE JUMPI JUMPDEST POP POP ADD SWAP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15B8 JUMPI PUSH1 0x0 NOT SWAP2 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 NOT SWAP1 MLOAD AND SWAP1 DUP3 MLOAD AND OR SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x15D3 PUSH2 0x15CD PUSH2 0x15D9 SWAP3 DUP7 MLOAD DUP2 MSTORE PUSH2 0x1071 JUMP JUMPDEST SWAP5 PUSH2 0x1071 JUMP JUMPDEST SWAP3 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x1597 JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x1592 JUMP JUMPDEST PUSH2 0x15F8 PUSH2 0x15F2 DUP4 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1582 JUMP JUMPDEST SWAP1 PUSH2 0x1606 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x1611 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH2 0x161F DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x16AE JUMP JUMPDEST DUP3 MLOAD MLOAD SWAP2 PUSH2 0x162D DUP3 DUP5 PUSH2 0x107F JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP3 SWAP2 DUP3 DUP8 ADD MLOAD DUP2 GT PUSH2 0x1697 JUMPI JUMPDEST DUP7 MLOAD DUP4 DUP2 MLOAD SWAP8 DUP3 ADD ADD SWAP7 DUP3 GT PUSH2 0x168F JUMPI JUMPDEST POP POP ADD SWAP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1675 JUMPI PUSH1 0x0 NOT SWAP2 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 NOT SWAP1 MLOAD AND SWAP1 DUP3 MLOAD AND OR SWAP1 MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x15D3 PUSH2 0x15CD PUSH2 0x168A SWAP3 DUP7 MLOAD DUP2 MSTORE PUSH2 0x1071 JUMP JUMPDEST PUSH2 0x1653 JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x164E JUMP JUMPDEST PUSH2 0x16A9 PUSH2 0x16A3 DUP3 PUSH2 0x117F JUMP JUMPDEST DUP9 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x163D JUMP JUMPDEST ISZERO PUSH2 0x305 JUMPI JUMP JUMPDEST DUP2 MLOAD PUSH2 0x16EC SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SWAP1 PUSH1 0x17 DUP3 GT PUSH2 0x16EF JUMPI PUSH2 0x16E4 SWAP2 POP PUSH1 0x40 PUSH1 0xFF DUP5 MLOAD SWAP3 AND OR SWAP1 PUSH2 0x14C8 JUMP JUMPDEST POP JUMPDEST MLOAD PUSH2 0x15FD JUMP JUMPDEST POP JUMP JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x1714 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x1706 DUP4 MLOAD PUSH2 0x12CF JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x1A43 JUMP JUMPDEST POP PUSH2 0x16E6 JUMP JUMPDEST PUSH2 0xFFFF DUP2 GT PUSH2 0x1733 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x172B DUP4 MLOAD PUSH2 0x126A JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x19DC JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT PUSH2 0x1754 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x174C DUP4 MLOAD PUSH2 0x1205 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x170E SWAP1 PUSH2 0x1762 DUP4 MLOAD PUSH2 0x1195 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x1907 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x16EC SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SWAP1 PUSH1 0x17 DUP3 GT PUSH2 0x1799 JUMPI PUSH2 0x16E4 SWAP2 POP PUSH1 0x60 PUSH1 0xFF DUP5 MLOAD SWAP3 AND OR SWAP1 PUSH2 0x14C8 JUMP JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x17B0 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x1706 DUP4 MLOAD PUSH2 0x1463 JUMP JUMPDEST PUSH2 0xFFFF DUP2 GT PUSH2 0x17C7 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x172B DUP4 MLOAD PUSH2 0x13FE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT PUSH2 0x17E0 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x174C DUP4 MLOAD PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x170E SWAP1 PUSH2 0x1762 DUP4 MLOAD PUSH2 0x1334 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH2 0x17F9 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1847 JUMPI JUMPDEST PUSH1 0x9F PUSH1 0x20 DUP1 SWAP6 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x183F JUMPI JUMPDEST POP POP ADD DUP1 MLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3B JUMPI MSTORE JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x182B JUMP JUMPDEST DUP2 PUSH1 0x1 SHL SWAP4 DUP3 DUP6 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH1 0x20 DUP2 PUSH2 0x1870 DUP3 SWAP8 PUSH2 0x116E PUSH1 0x9F SWAP6 MLOAD SWAP2 DUP5 PUSH2 0x108C JUMP JUMPDEST POP SWAP6 POP POP POP PUSH2 0x1816 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH2 0x1885 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP2 LT ISZERO PUSH2 0x18D4 JUMPI JUMPDEST PUSH1 0xFF PUSH1 0x20 DUP1 SWAP6 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x18CC JUMPI JUMPDEST POP POP ADD DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0xD3B JUMPI MSTORE JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x18B7 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL SWAP4 DUP3 DUP6 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH1 0x20 DUP2 PUSH2 0x18FD DUP3 SWAP8 PUSH2 0x116E PUSH1 0xFF SWAP6 MLOAD SWAP2 DUP5 PUSH2 0x108C JUMP JUMPDEST POP SWAP6 POP POP POP PUSH2 0x18A2 JUMP JUMPDEST SWAP1 PUSH2 0x1910 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x8 ADD SWAP2 DUP3 PUSH1 0x8 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x1952 JUMPI JUMPDEST PUSH1 0x8 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x196E SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x192D JUMP JUMPDEST SWAP1 PUSH2 0x197C PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x4 ADD SWAP2 DUP3 PUSH1 0x4 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x19BB JUMPI JUMPDEST PUSH1 0x4 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH4 0xFFFFFFFF NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x19D7 SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1999 JUMP JUMPDEST SWAP1 PUSH2 0x19E5 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x2 ADD SWAP2 DUP3 PUSH1 0x2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x1A22 JUMPI JUMPDEST PUSH1 0x2 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH2 0xFFFF NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1A3E SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1A02 JUMP JUMPDEST SWAP1 PUSH2 0x1A4C PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x1 ADD SWAP2 DUP3 PUSH1 0x1 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x1A88 JUMPI JUMPDEST PUSH1 0x1 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH1 0xFF NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1AA4 SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1A69 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x325 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x587 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1AD1 PUSH2 0x325 SWAP4 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x61D JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x61D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xA6 0xE5 0xCA 0x1F DUP5 0xD7 DUP13 NUMBER SWAP4 SSTORE 0xF7 0x5E 0xC4 0xC2 0x5D 0xD9 0xEB 0xEF BYTE SLT TIMESTAMP GASPRICE 0xEB 0xE1 STOP 0xF 0x22 PC 0x2B 0xA5 SWAP5 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"328:4231:29:-:0;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;-1:-1:-1;;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;736:35:6;328:4231:29;736:35:6;1299:573:29;328:4231;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;;;;;-1:-1:-1;328:4231:29;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1943:42;328:4231;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;-1:-1:-1;328:4231:29;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;-1:-1:-1;328:4231:29;;;;;-1:-1:-1;328:4231:29"},"deployedBytecode":{"functionDebugData":{"abi_decode_available_length_array_string_dyn":{"entryPoint":1926,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_bytes":{"entryPoint":703,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bytes":{"entryPoint":778,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes32_fromMemory":{"entryPoint":2917,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes_bytes":{"entryPoint":6842,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes_storage":{"entryPoint":1415,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":1565,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_storage":{"entryPoint":6825,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_uint256_uint256_uint256_bytes_bytes_bool":{"entryPoint":1629,"id":null,"parameterSlots":8,"returnSlots":1},"allocate_and_zero_memory_struct_struct_Request":{"entryPoint":1853,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_and_zero_memory_struct_struct_buffer":{"entryPoint":4088,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory":{"entryPoint":672,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_array_string":{"entryPoint":2056,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":4223,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256_6034":{"entryPoint":4209,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256":{"entryPoint":4479,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256":{"entryPoint":4194,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":2091,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"convert_contract_IFunctionsRouter_to_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"copy_array_from_storage_to_memory_string":{"entryPoint":1251,"id":null,"parameterSlots":1,"returnSlots":1},"copy_array_from_storage_to_memory_string_6010":{"entryPoint":1061,"id":null,"parameterSlots":0,"returnSlots":1},"copy_byte_array_to_storage_from_string_to_string":{"entryPoint":2175,"id":null,"parameterSlots":2,"returnSlots":0},"copy_literal_to_memory_3549a38a23cb1774056dbdf96dbc8ece30f733b8dd04641913d46a279936ce0b":{"entryPoint":3512,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_829231cb167e02f32beea96e7533af0ebdf9e1f7ccf9a7270e717c48fe6f0e8e":{"entryPoint":3238,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_82e791741c7274b123c7599c398a59441cc81a8ed229387daff72172292ba931":{"entryPoint":3161,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_d66480a2fe9622f21e4ac7cf8871545e676a686cade1079d79e2fb1df6a4f3ac":{"entryPoint":3477,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_e5edaa566e23eea054bbd292b7924839b5627321873e67e30cd0052468eaf099":{"entryPoint":3318,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_f7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69":{"entryPoint":3284,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_fc4236fa30b862c671ead413b1a0f61e653ce5b99e29091ee0dc6fc114ee9cc8":{"entryPoint":3434,"id":null,"parameterSlots":0,"returnSlots":1},"copy_struct_to_storage_from_struct_VehicleData_to_struct_VehicleData":{"entryPoint":2381,"id":null,"parameterSlots":2,"returnSlots":0},"external_fun_returnFunctionsInfo":{"entryPoint":947,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_s_lastRequestId":{"entryPoint":917,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_sendRequest":{"entryPoint":808,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_vehicleDataMapping":{"entryPoint":1715,"id":null,"parameterSlots":0,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1003,"id":null,"parameterSlots":1,"returnSlots":1},"extract_from_storage_value_offsett_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":639,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_6028":{"entryPoint":607,"id":null,"parameterSlots":1,"returnSlots":0},"fun__sendRequest":{"entryPoint":2944,"id":404,"parameterSlots":4,"returnSlots":1},"fun_append":{"entryPoint":5629,"id":1612,"parameterSlots":2,"returnSlots":1},"fun_appendInt":{"entryPoint":6723,"id":1811,"parameterSlots":2,"returnSlots":1},"fun_appendInt_6045":{"entryPoint":6407,"id":1811,"parameterSlots":2,"returnSlots":1},"fun_appendInt_6047":{"entryPoint":6515,"id":1811,"parameterSlots":2,"returnSlots":1},"fun_appendInt_6049":{"entryPoint":6620,"id":1811,"parameterSlots":2,"returnSlots":1},"fun_appendUint8":{"entryPoint":5320,"id":1653,"parameterSlots":2,"returnSlots":1},"fun_appendUint8_10614":{"entryPoint":4501,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_appendUint8_10615":{"entryPoint":4613,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_appendUint8_10616":{"entryPoint":4714,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_appendUint8_10617":{"entryPoint":4815,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_appendUint8_10618":{"entryPoint":4916,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_appendUint8_10619":{"entryPoint":5017,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_appendUint8_10620":{"entryPoint":5118,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_appendUint8_10621":{"entryPoint":5219,"id":1653,"parameterSlots":1,"returnSlots":1},"fun_create":{"entryPoint":4114,"id":1893,"parameterSlots":0,"returnSlots":1},"fun_encodeCBOR":{"entryPoint":3549,"id":1028,"parameterSlots":1,"returnSlots":1},"fun_endSequence":{"entryPoint":6266,"id":2236,"parameterSlots":1,"returnSlots":0},"fun_init":{"entryPoint":4236,"id":1437,"parameterSlots":2,"returnSlots":1},"fun_initializeRequest":{"entryPoint":4016,"id":1073,"parameterSlots":2,"returnSlots":0},"fun_resize":{"entryPoint":5427,"id":1490,"parameterSlots":2,"returnSlots":0},"fun_sendRequest":{"entryPoint":2706,"id":7339,"parameterSlots":2,"returnSlots":1},"fun_setArgs":{"entryPoint":4057,"id":1209,"parameterSlots":2,"returnSlots":0},"fun_startArray":{"entryPoint":6126,"id":2170,"parameterSlots":1,"returnSlots":0},"fun_writeBytes":{"entryPoint":5813,"id":2078,"parameterSlots":2,"returnSlots":0},"fun_writeString":{"entryPoint":5994,"id":2111,"parameterSlots":2,"returnSlots":0},"fun_writeUInt256":{"entryPoint":4318,"id":1947,"parameterSlots":2,"returnSlots":0},"increment_uint256":{"entryPoint":3372,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_bytes32_struct_VehicleData_storage_of_bytes32":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_string_dyn":{"entryPoint":3392,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":3350,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":3201,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":585,"id":null,"parameterSlots":0,"returnSlots":0},"require_helper":{"entryPoint":5806,"id":null,"parameterSlots":1,"returnSlots":0},"revert_forward":{"entryPoint":2932,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"validator_assert_enum_CodeLanguage":{"entryPoint":3274,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_enum_Location":{"entryPoint":3223,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"349":[{"length":32,"start":186},{"length":32,"start":3032}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0xCA76175 EQ PUSH2 0x6C JUMPI POP POP DUP1 PUSH4 0x4C8F60A3 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0xB1E21749 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0xC972EBB6 EQ PUSH2 0x5D JUMPI PUSH4 0xE6EE9020 EQ PUSH2 0x58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B3 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x395 JUMP JUMPDEST PUSH2 0x328 JUMP JUMPDEST CALLVALUE PUSH2 0x245 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x245 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x241 JUMPI PUSH2 0x9F SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x241 JUMPI PUSH2 0xB7 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x230 JUMPI PUSH2 0xFC DUP5 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x10B PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x214 JUMPI SWAP1 PUSH1 0x20 DUP5 DUP4 PUSH2 0x125 DUP5 PUSH2 0x169 SWAP8 SWAP7 DUP5 ADD PUSH2 0x87F JUMP JUMPDEST PUSH2 0x132 DUP6 PUSH1 0x5 DUP5 ADD PUSH2 0x87F JUMP JUMPDEST PUSH2 0x13C DUP5 DUP4 PUSH2 0x87F JUMP JUMPDEST TIMESTAMP PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP8 DUP2 SWAP5 DUP3 SWAP4 PUSH4 0x1BD95155 PUSH1 0xE0 SHL DUP5 MSTORE DUP4 ADD PUSH2 0x1AA9 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x20F JUMPI PUSH1 0x1 PUSH1 0x5 DUP8 SWAP7 PUSH32 0x7873807BF6DDC50401CD3D29BBE0DECEE23FD4D68D273F4B5EB83CDED4D2F172 SWAP7 DUP11 SWAP2 PUSH2 0x1E1 JUMPI JUMPDEST POP DIV SWAP2 ADD SSTORE PUSH2 0x1B7 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x1ABA JUMP JUMPDEST SUB SWAP1 LOG2 PUSH32 0x85E1543BF2F84FE80C6BADBCE3648C8539AD1DF4D2B3D822938CA0538BE727E6 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH2 0x202 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x208 JUMPI JUMPDEST PUSH2 0x1FA DUP2 DUP4 PUSH2 0x27F JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xB65 JUMP JUMPDEST DUP11 PUSH2 0x1A3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0xB74 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD068BF5B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 DUP2 MSTORE DUP2 SWAP1 PUSH1 0x20 ADD SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC6829F83 PUSH1 0xE0 SHL DUP2 MSTORE DUP4 SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x27A JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2E8 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x27F JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x305 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x305 JUMPI DUP2 PUSH1 0x20 PUSH2 0x325 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x305 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x305 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x305 JUMPI CALLDATASIZE PUSH1 0x24 DUP4 PUSH1 0x5 SHL DUP4 ADD ADD GT PUSH2 0x305 JUMPI PUSH2 0x391 SWAP2 PUSH1 0x24 PUSH2 0x381 SWAP3 ADD PUSH2 0xA92 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x20 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x3 PUSH1 0x1 DUP3 ADD SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x41B JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x405 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x0 DUP3 PUSH1 0x4 SLOAD SWAP2 PUSH2 0x439 DUP4 PUSH2 0x3EB JUMP JUMPDEST DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x4C1 JUMPI POP PUSH1 0x1 EQ PUSH2 0x462 JUMPI JUMPDEST POP PUSH2 0x460 SWAP3 POP SUB DUP4 PUSH2 0x27F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP5 DUP4 LT PUSH2 0x4A6 JUMPI POP PUSH2 0x460 SWAP4 POP POP DUP2 ADD PUSH1 0x20 ADD CODESIZE PUSH2 0x453 JUMP JUMPDEST DUP2 SWAP4 POP SWAP1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP11 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP2 DUP6 SWAP3 PUSH2 0x48D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 SWAP3 POP PUSH2 0x460 SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE PUSH2 0x453 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x4F7 DUP5 PUSH2 0x3EB JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x564 JUMPI POP PUSH1 0x1 EQ PUSH2 0x521 JUMPI JUMPDEST POP POP PUSH2 0x460 SWAP3 POP SUB DUP4 PUSH2 0x27F JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x54C JUMPI POP POP PUSH2 0x460 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x513 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x534 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x460 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x513 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP2 PUSH2 0x598 DUP4 PUSH2 0x3EB JUMP JUMPDEST SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x5FA JUMPI POP PUSH1 0x1 EQ PUSH2 0x5BA JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0x5E6 JUMPI POP POP POP POP ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x5B4 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0x5CF JUMP JUMPDEST SWAP3 SWAP5 POP POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x5B4 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x649 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x628 JUMP JUMPDEST SWAP6 SWAP3 SWAP5 PUSH2 0x6AB SWAP5 PUSH1 0xC0 SWAP7 PUSH2 0x680 PUSH2 0x69D SWAP6 SWAP5 SWAP12 SWAP11 SWAP12 PUSH1 0xE0 DUP12 MSTORE PUSH1 0xE0 DUP12 ADD SWAP1 PUSH2 0x61D JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP11 ADD MSTORE PUSH1 0x40 DUP10 ADD MSTORE PUSH1 0x60 DUP9 ADD MSTORE DUP7 DUP3 SUB PUSH1 0x80 DUP9 ADD MSTORE PUSH2 0x61D JUMP JUMPDEST SWAP1 DUP5 DUP3 SUB PUSH1 0xA0 DUP7 ADD MSTORE PUSH2 0x61D JUMP JUMPDEST SWAP4 ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x305 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x305 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x6DD DUP2 PUSH2 0x4E3 JUMP JUMPDEST PUSH2 0x391 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH1 0x2 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 PUSH2 0x70D DUP3 PUSH2 0x706 DUP2 PUSH1 0x4 DUP8 ADD PUSH2 0x587 JUMP JUMPDEST SUB DUP4 PUSH2 0x27F JUMP JUMPDEST PUSH1 0xFF PUSH1 0x6 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x72D DUP7 PUSH2 0x726 DUP2 PUSH1 0x5 DUP6 ADD PUSH2 0x587 JUMP JUMPDEST SUB DUP8 PUSH2 0x27F JUMP JUMPDEST ADD SLOAD AND SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 DUP9 PUSH2 0x65D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE PUSH1 0x60 PUSH1 0xC0 DUP4 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP3 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 DUP6 GT PUSH2 0x27A JUMPI DUP5 PUSH1 0x5 SHL PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP1 SWAP6 PUSH2 0x7B2 DUP3 DUP6 ADD DUP3 PUSH2 0x27F JUMP JUMPDEST DUP1 SWAP9 DUP2 MSTORE ADD SWAP2 DUP5 ADD SWAP4 DUP4 DUP6 GT PUSH2 0x305 JUMPI DUP1 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x7D5 JUMPI POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x305 JUMPI DUP3 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x305 JUMPI DUP8 SWAP2 PUSH2 0x7FD DUP8 DUP4 DUP6 DUP1 SWAP6 CALLDATALOAD SWAP2 ADD PUSH2 0x2BF JUMP JUMPDEST DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x27A JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x839 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x875 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x86A JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x85E JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x855 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x27A JUMPI PUSH2 0x8A6 DUP2 PUSH2 0x8A0 DUP5 SLOAD PUSH2 0x3EB JUMP JUMPDEST DUP5 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x8E2 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x8D7 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x8C1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x8F8 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x935 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x91C JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x912 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD SWAP3 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x27A JUMPI PUSH2 0x977 DUP2 PUSH2 0x971 DUP6 SLOAD PUSH2 0x3EB JUMP JUMPDEST DUP6 PUSH2 0x82B JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP6 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xA18 JUMPI SWAP3 PUSH2 0x460 SWAP6 SWAP7 DUP4 PUSH2 0x9FA SWAP5 PUSH1 0xC0 SWAP5 PUSH1 0x6 SWAP8 PUSH1 0x0 SWAP3 PUSH2 0xA0D JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR DUP7 SSTORE JUMPDEST DUP2 ADD MLOAD PUSH1 0x1 DUP7 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP7 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP7 ADD SSTORE PUSH2 0x9E2 PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP8 ADD PUSH2 0x87F JUMP JUMPDEST PUSH2 0x9F3 PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP8 ADD PUSH2 0x87F JUMP JUMPDEST ADD MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x9A0 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0xA2E DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xA7B JUMPI POP DUP5 PUSH1 0xC0 SWAP5 PUSH1 0x6 SWAP8 SWAP5 PUSH2 0x460 SWAP11 SWAP12 SWAP5 PUSH2 0x9FA SWAP9 PUSH1 0x1 SWAP6 LT PUSH2 0xA62 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH2 0x9B5 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0xA55 JUMP JUMPDEST SWAP3 SWAP4 DUP10 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xA32 JUMP JUMPDEST PUSH2 0xAC4 PUSH2 0xB43 SWAP3 PUSH2 0xADF SWAP3 PUSH2 0xAA5 PUSH2 0x73D JUMP JUMPDEST SWAP2 PUSH2 0xAB7 PUSH2 0xAB1 PUSH2 0x425 JUMP JUMPDEST DUP5 PUSH2 0xFB0 JUMP JUMPDEST DUP1 PUSH2 0xB49 JUMPI JUMPDEST POP POP PUSH2 0xDDD JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 PUSH1 0xE0 SHR SWAP3 AND SWAP1 PUSH2 0xB80 JUMP JUMPDEST DUP1 PUSH1 0x0 SSTORE PUSH2 0xB3E PUSH2 0xAEE PUSH2 0x2A0 JUMP JUMPDEST SWAP2 PUSH2 0xAF7 PUSH2 0x808 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB15 PUSH2 0x808 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0xB22 PUSH2 0x808 JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x94D JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB5E SWAP2 PUSH2 0xB58 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x786 JUMP JUMPDEST DUP3 PUSH2 0xFD9 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0xABD JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x305 JUMPI MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP1 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 PUSH4 0xFFFFFFFF PUSH2 0xBBF PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP7 PUSH4 0x230E93B1 PUSH1 0xE1 SHL DUP9 MSTORE AND PUSH1 0x4 DUP8 ADD MSTORE PUSH1 0xA0 PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0xA4 DUP7 ADD SWAP1 PUSH2 0x61D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x44 DUP7 ADD MSTORE SWAP3 AND PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x84 DUP4 ADD MSTORE SUB DUP2 PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 SWAP2 PUSH2 0xC3B JUMPI JUMPDEST POP DUP1 PUSH32 0x1131472297A800FEE664D1D89CFA8F7676FF07189ECC53F80BBB5F4969099DB8 PUSH1 0x0 DUP1 LOG2 SWAP1 JUMP JUMPDEST PUSH2 0xC53 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x208 JUMPI PUSH2 0x1FA DUP2 DUP4 PUSH2 0x27F JUMP JUMPDEST CODESIZE PUSH2 0xC11 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xC66 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0xC DUP3 MSTORE PUSH12 0x31B7B232A637B1B0BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 GT ISZERO PUSH2 0xCA1 JUMPI JUMP JUMPDEST PUSH2 0xC81 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xCB3 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x8 DUP3 MSTORE PUSH8 0x6C616E6775616765 PUSH1 0xC0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 GT ISZERO PUSH2 0xCA1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xCE1 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x6 DUP3 MSTORE PUSH6 0x736F75726365 PUSH1 0xD0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xD03 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH4 0x61726773 PUSH1 0xE0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0xD3B JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xD16 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xD54 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xD77 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0xF DUP3 MSTORE PUSH15 0x39B2B1B932BA39A637B1B0BA34B7B7 PUSH1 0x89 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xDA2 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH7 0x73656372657473 PUSH1 0xC8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xDC5 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x9 DUP3 MSTORE PUSH9 0x627974657341726773 PUSH1 0xB8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0x1012 JUMP JUMPDEST SWAP1 PUSH2 0xDF7 PUSH2 0xDF1 PUSH2 0xC59 JUMP JUMPDEST DUP4 PUSH2 0x176A JUMP JUMPDEST PUSH2 0xE14 DUP2 MLOAD PUSH2 0xE05 DUP2 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0xE0E DUP2 PUSH2 0xC97 JUMP JUMPDEST DUP4 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0xE1F PUSH2 0xDF1 PUSH2 0xCA6 JUMP JUMPDEST PUSH2 0xE39 PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0xE30 DUP2 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0xE0E DUP2 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0xE44 PUSH2 0xDF1 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0xE52 PUSH1 0x60 DUP3 ADD MLOAD DUP4 PUSH2 0x176A JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD DUP1 MLOAD MLOAD PUSH2 0xF57 JUMPI JUMPDEST POP PUSH1 0x80 DUP2 ADD SWAP1 DUP2 MLOAD MLOAD PUSH2 0xED7 JUMPI JUMPDEST PUSH1 0xC0 SWAP2 POP ADD DUP1 MLOAD MLOAD PUSH2 0xE7F JUMPI JUMPDEST POP MLOAD MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0xE8B PUSH2 0xDF1 PUSH2 0xDB8 JUMP JUMPDEST PUSH2 0xE94 DUP3 PUSH2 0x17EE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xEC4 JUMPI SWAP1 PUSH2 0xEBA PUSH2 0xEB3 DUP3 PUSH2 0xEBF SWAP5 PUSH2 0xD40 JUMP JUMPDEST MLOAD DUP6 PUSH2 0x16B5 JUMP JUMPDEST PUSH2 0xD2C JUMP JUMPDEST PUSH2 0xE97 JUMP JUMPDEST POP POP SWAP2 POP PUSH2 0xED1 DUP2 PUSH2 0x187A JUMP JUMPDEST CODESIZE PUSH2 0xE79 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH2 0xEE6 DUP2 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0xEEF DUP2 PUSH2 0xC97 JUMP JUMPDEST ISZERO PUSH2 0xF45 JUMPI PUSH1 0xC0 SWAP3 PUSH2 0xF28 PUSH2 0xF40 SWAP3 PUSH2 0xF0F PUSH2 0xF09 PUSH2 0xD6A JUMP JUMPDEST DUP9 PUSH2 0x176A JUMP JUMPDEST MLOAD PUSH2 0xF19 DUP2 PUSH2 0xC97 JUMP JUMPDEST PUSH2 0xF22 DUP2 PUSH2 0xC97 JUMP JUMPDEST DUP7 PUSH2 0x10DE JUMP JUMPDEST PUSH2 0xF39 PUSH2 0xF33 PUSH2 0xD95 JUMP JUMPDEST DUP7 PUSH2 0x176A JUMP JUMPDEST MLOAD DUP5 PUSH2 0x16B5 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA80D31F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP3 PUSH2 0xF69 PUSH2 0xF63 PUSH2 0xCF6 JUMP JUMPDEST DUP5 PUSH2 0x176A JUMP JUMPDEST PUSH2 0xF72 DUP4 PUSH2 0x17EE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xF9D JUMPI SWAP1 PUSH2 0xEBA PUSH2 0xF91 DUP3 PUSH2 0xF98 SWAP5 PUSH2 0xD40 JUMP JUMPDEST MLOAD DUP7 PUSH2 0x176A JUMP JUMPDEST PUSH2 0xF75 JUMP JUMPDEST POP POP SWAP3 POP PUSH2 0xFAA DUP3 PUSH2 0x187A JUMP JUMPDEST CODESIZE PUSH2 0xE5E JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xFC7 JUMPI PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x22CE3EDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO PUSH2 0xFE6 JUMPI PUSH1 0xA0 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFE936CB7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1005 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 PUSH1 0x60 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101E DUP2 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x1026 PUSH2 0xFF8 JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH2 0x1039 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH2 0x100 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x0 DUP3 MSTORE PUSH2 0x120 DUP3 ADD SWAP2 DUP3 LT PUSH2 0x305 JUMPI PUSH1 0x0 SWAP2 PUSH1 0x40 MSTORE MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1F NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0xD3B JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3B JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3B JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x1095 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH1 0x1F DUP2 AND DUP1 PUSH2 0x10C4 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 MSTORE PUSH1 0x0 DUP3 MSTORE DUP2 ADD PUSH1 0x20 ADD SWAP1 DUP2 LT PUSH2 0x305 JUMPI PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 SUB PUSH1 0x20 DUP2 GT PUSH2 0xD3B JUMPI DUP2 ADD DUP1 SWAP2 GT PUSH2 0xD3B JUMPI CODESIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 PUSH2 0x10EA PUSH2 0xFF8 JUMP JUMPDEST POP DUP3 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP6 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1143 JUMPI JUMPDEST PUSH1 0xC2 PUSH1 0x20 PUSH2 0x460 SWAP7 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x113B JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP3 MSTORE PUSH2 0x1136 DUP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x16B5 JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x111E JUMP JUMPDEST DUP2 PUSH1 0x1 SHL SWAP5 DUP3 DUP7 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH1 0x20 DUP2 PUSH2 0x1175 PUSH2 0x460 SWAP9 PUSH2 0x116E PUSH1 0xC2 SWAP6 MLOAD SWAP2 DUP5 PUSH2 0x108C JUMP JUMPDEST POP DUP3 PUSH2 0x15FD JUMP JUMPDEST POP SWAP7 POP POP POP PUSH2 0x1107 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x1 SHL SWAP2 DUP1 DUP4 DIV PUSH1 0x2 EQ SWAP1 ISZERO OR ISZERO PUSH2 0xD3B JUMPI JUMP JUMPDEST PUSH2 0x119D PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x11D6 JUMPI JUMPDEST PUSH1 0x5B PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x11FF SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP DUP5 PUSH2 0x15FD JUMP JUMPDEST POP PUSH2 0x11BA JUMP JUMPDEST PUSH2 0x120D PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1242 JUMPI JUMPDEST PUSH1 0x5A PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1264 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x122A JUMP JUMPDEST PUSH2 0x1272 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x12A7 JUMPI JUMPDEST PUSH1 0x59 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x12C9 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x128F JUMP JUMPDEST PUSH2 0x12D7 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x130C JUMPI JUMPDEST PUSH1 0x58 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x132E SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x12F4 JUMP JUMPDEST PUSH2 0x133C PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1371 JUMPI JUMPDEST PUSH1 0x7B PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1393 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x13A1 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x13D6 JUMPI JUMPDEST PUSH1 0x7A PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x13F8 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x13BE JUMP JUMPDEST PUSH2 0x1406 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x143B JUMPI JUMPDEST PUSH1 0x79 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x145D SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1423 JUMP JUMPDEST PUSH2 0x146B PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP4 ADD MLOAD DUP2 LT ISZERO PUSH2 0x14A0 JUMPI JUMPDEST PUSH1 0x78 PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL DUP3 DUP2 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x14C2 SWAP1 PUSH2 0x11F8 DUP6 MLOAD SWAP2 DUP7 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1488 JUMP JUMPDEST SWAP1 PUSH2 0x14D1 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP2 DUP3 DUP3 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP3 LT ISZERO PUSH2 0x1504 JUMPI JUMPDEST PUSH1 0x20 DUP5 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x152D SWAP1 PUSH2 0x1526 DUP7 MLOAD SWAP2 DUP8 PUSH2 0x108C JUMP JUMPDEST POP DUP6 PUSH2 0x15FD JUMP JUMPDEST POP PUSH2 0x14EE JUMP JUMPDEST SWAP1 PUSH2 0x1540 DUP3 MLOAD SWAP2 DUP4 PUSH2 0x108C JUMP JUMPDEST POP PUSH2 0x1549 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD SWAP1 PUSH2 0x1555 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH2 0x1563 DUP2 MLOAD DUP4 GT ISZERO PUSH2 0x16AE JUMP JUMPDEST DUP3 MLOAD MLOAD SWAP3 PUSH2 0x1571 DUP4 DUP6 PUSH2 0x107F JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP3 DUP3 DUP5 DUP1 SWAP5 ADD MLOAD DUP3 GT PUSH2 0x15E6 JUMPI JUMPDEST MLOAD DUP4 DUP2 MLOAD SWAP8 DUP3 ADD ADD SWAP7 DUP3 GT PUSH2 0x15DE JUMPI JUMPDEST POP POP ADD SWAP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15B8 JUMPI PUSH1 0x0 NOT SWAP2 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 NOT SWAP1 MLOAD AND SWAP1 DUP3 MLOAD AND OR SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x15D3 PUSH2 0x15CD PUSH2 0x15D9 SWAP3 DUP7 MLOAD DUP2 MSTORE PUSH2 0x1071 JUMP JUMPDEST SWAP5 PUSH2 0x1071 JUMP JUMPDEST SWAP3 PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x1597 JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x1592 JUMP JUMPDEST PUSH2 0x15F8 PUSH2 0x15F2 DUP4 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1582 JUMP JUMPDEST SWAP1 PUSH2 0x1606 PUSH2 0xFF8 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x1611 PUSH2 0xFF8 JUMP JUMPDEST POP PUSH2 0x161F DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x16AE JUMP JUMPDEST DUP3 MLOAD MLOAD SWAP2 PUSH2 0x162D DUP3 DUP5 PUSH2 0x107F JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP3 SWAP2 DUP3 DUP8 ADD MLOAD DUP2 GT PUSH2 0x1697 JUMPI JUMPDEST DUP7 MLOAD DUP4 DUP2 MLOAD SWAP8 DUP3 ADD ADD SWAP7 DUP3 GT PUSH2 0x168F JUMPI JUMPDEST POP POP ADD SWAP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1675 JUMPI PUSH1 0x0 NOT SWAP2 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 NOT SWAP1 MLOAD AND SWAP1 DUP3 MLOAD AND OR SWAP1 MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x15D3 PUSH2 0x15CD PUSH2 0x168A SWAP3 DUP7 MLOAD DUP2 MSTORE PUSH2 0x1071 JUMP JUMPDEST PUSH2 0x1653 JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x164E JUMP JUMPDEST PUSH2 0x16A9 PUSH2 0x16A3 DUP3 PUSH2 0x117F JUMP JUMPDEST DUP9 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x163D JUMP JUMPDEST ISZERO PUSH2 0x305 JUMPI JUMP JUMPDEST DUP2 MLOAD PUSH2 0x16EC SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SWAP1 PUSH1 0x17 DUP3 GT PUSH2 0x16EF JUMPI PUSH2 0x16E4 SWAP2 POP PUSH1 0x40 PUSH1 0xFF DUP5 MLOAD SWAP3 AND OR SWAP1 PUSH2 0x14C8 JUMP JUMPDEST POP JUMPDEST MLOAD PUSH2 0x15FD JUMP JUMPDEST POP JUMP JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x1714 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x1706 DUP4 MLOAD PUSH2 0x12CF JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x1A43 JUMP JUMPDEST POP PUSH2 0x16E6 JUMP JUMPDEST PUSH2 0xFFFF DUP2 GT PUSH2 0x1733 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x172B DUP4 MLOAD PUSH2 0x126A JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x19DC JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT PUSH2 0x1754 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x174C DUP4 MLOAD PUSH2 0x1205 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x170E SWAP1 PUSH2 0x1762 DUP4 MLOAD PUSH2 0x1195 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x1907 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x16EC SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND SWAP1 PUSH1 0x17 DUP3 GT PUSH2 0x1799 JUMPI PUSH2 0x16E4 SWAP2 POP PUSH1 0x60 PUSH1 0xFF DUP5 MLOAD SWAP3 AND OR SWAP1 PUSH2 0x14C8 JUMP JUMPDEST POP PUSH1 0xFF DUP2 GT PUSH2 0x17B0 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x1706 DUP4 MLOAD PUSH2 0x1463 JUMP JUMPDEST PUSH2 0xFFFF DUP2 GT PUSH2 0x17C7 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x172B DUP4 MLOAD PUSH2 0x13FE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 GT PUSH2 0x17E0 JUMPI PUSH2 0x170E SWAP1 PUSH2 0x174C DUP4 MLOAD PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x170E SWAP1 PUSH2 0x1762 DUP4 MLOAD PUSH2 0x1334 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH2 0x17F9 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP2 LT ISZERO PUSH2 0x1847 JUMPI JUMPDEST PUSH1 0x9F PUSH1 0x20 DUP1 SWAP6 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x183F JUMPI JUMPDEST POP POP ADD DUP1 MLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xD3B JUMPI MSTORE JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x182B JUMP JUMPDEST DUP2 PUSH1 0x1 SHL SWAP4 DUP3 DUP6 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH1 0x20 DUP2 PUSH2 0x1870 DUP3 SWAP8 PUSH2 0x116E PUSH1 0x9F SWAP6 MLOAD SWAP2 DUP5 PUSH2 0x108C JUMP JUMPDEST POP SWAP6 POP POP POP PUSH2 0x1816 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH2 0x1885 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD PUSH1 0x1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP2 LT ISZERO PUSH2 0x18D4 JUMPI JUMPDEST PUSH1 0xFF PUSH1 0x20 DUP1 SWAP6 MLOAD SWAP3 DUP4 ADD ADD MSTORE8 DUP1 MLOAD DUP3 GT PUSH2 0x18CC JUMPI JUMPDEST POP POP ADD DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0xD3B JUMPI MSTORE JUMP JUMPDEST MSTORE CODESIZE DUP1 PUSH2 0x18B7 JUMP JUMPDEST DUP2 PUSH1 0x1 SHL SWAP4 DUP3 DUP6 DIV PUSH1 0x2 EQ DUP4 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH1 0x20 DUP2 PUSH2 0x18FD DUP3 SWAP8 PUSH2 0x116E PUSH1 0xFF SWAP6 MLOAD SWAP2 DUP5 PUSH2 0x108C JUMP JUMPDEST POP SWAP6 POP POP POP PUSH2 0x18A2 JUMP JUMPDEST SWAP1 PUSH2 0x1910 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x8 ADD SWAP2 DUP3 PUSH1 0x8 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x1952 JUMPI JUMPDEST PUSH1 0x8 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x196E SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x192D JUMP JUMPDEST SWAP1 PUSH2 0x197C PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x4 ADD SWAP2 DUP3 PUSH1 0x4 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x19BB JUMPI JUMPDEST PUSH1 0x4 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH4 0xFFFFFFFF NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x19D7 SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1999 JUMP JUMPDEST SWAP1 PUSH2 0x19E5 PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x2 ADD SWAP2 DUP3 PUSH1 0x2 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x1A22 JUMPI JUMPDEST PUSH1 0x2 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH2 0xFFFF NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1A3E SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1A02 JUMP JUMPDEST SWAP1 PUSH2 0x1A4C PUSH2 0xFF8 JUMP JUMPDEST POP DUP2 MLOAD MLOAD DUP1 PUSH1 0x1 ADD SWAP2 DUP3 PUSH1 0x1 GT PUSH2 0xD3B JUMPI PUSH1 0x20 DUP5 ADD MLOAD DUP4 GT PUSH2 0x1A88 JUMPI JUMPDEST PUSH1 0x1 DUP5 MLOAD SWAP3 DUP4 ADD ADD SWAP1 PUSH1 0xFF NOT DUP3 MLOAD AND OR SWAP1 MSTORE DUP1 MLOAD DUP3 GT PUSH2 0x11D2 JUMPI POP POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x1 SHL DUP4 DUP2 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xD3B JUMPI PUSH2 0x1AA4 SWAP1 DUP6 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x1A69 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x325 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x587 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1AD1 PUSH2 0x325 SWAP4 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x61D JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x61D JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xA6 0xE5 0xCA 0x1F DUP5 0xD7 DUP13 NUMBER SWAP4 SSTORE 0xF7 0x5E 0xC4 0xC2 0x5D 0xD9 0xEB 0xEF BYTE SLT TIMESTAMP GASPRICE 0xEB 0xE1 STOP 0xF 0x22 PC 0x2B 0xA5 SWAP5 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"328:4231:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;-1:-1:-1;;328:4231:29;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;2221:8:6;-1:-1:-1;;;;;328:4231:29;2199:10:6;:31;2195:81;;3571:29:29;;328:4231;;3571:18;328:4231;;;;;;;3571:29;3617:17;328:4231;3617:17;;;328:4231;;;;;;;3613:126;;3823:20;328:4231;3823:20;;328:4231;3823:20;4015:37;3823:20;;;;328:4231;:::i;:::-;;3865:17;;;;328:4231;:::i;:::-;;;;;:::i;:::-;3965:15;328:4231;3942:20;;328:4231;3865:17;328:4231;-1:-1:-1;;;;;328:4231:29;;;;325:1:10;;;;;;;;;4015:37:29;;;;;:::i;:::-;;;;;;;;;;328:4231;3865:17;4015:37;;4200:34;4015:37;;;;;328:4231;;;4096:17;;328:4231;4200:34;328:4231;;4200:34;;;;;:::i;:::-;;;;2332:27:6;;;;328:4231:29;;4015:37;;;;328:4231;4015:37;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;3613:126::-;328:4231;;-1:-1:-1;;;3667:30:29;;;;;328:4231;;;;;;;3667:30;;;2195:81:6;328:4231:29;;-1:-1:-1;;;2247:22:6;;328:4231:29;;2247:22:6;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;;-1:-1:-1;;328:4231:29;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;:::o;:::-;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;-1:-1:-1;;328:4231:29;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;328:4231:29;;;;;;;;;;;;;;;;;;;-1:-1:-1;;328:4231:29;;;;;;-1:-1:-1;328:4231:29;4372:18;328:4231;;;;-1:-1:-1;328:4231:29;;4372:18;4432:17;;328:4231;4480:20;;328:4231;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;2870:6;328:4231;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;2870:6;-1:-1:-1;328:4231:29;;;-1:-1:-1;;328:4231:29;;;;;;;-1:-1:-1;328:4231:29;;-1:-1:-1;;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;328:4231:29;;;;-1:-1:-1;328:4231:29;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;328:4231:29;;;;-1:-1:-1;328:4231:29;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;328:4231:29;;;;;;-1:-1:-1;328:4231:29;958:67;328:4231;;;-1:-1:-1;328:4231:29;958:67;;;:::i;:::-;328:4231;958:67;;;328:4231;958:67;;;;328:4231;958:67;328:4231;958:67;;328:4231;;;958:67;328:4231;958:67;328:4231;958:67;328:4231;958:67;;328:4231;:::i;:::-;;;;:::i;:::-;;958:67;328:4231;;958:67;328:4231;958:67;328:4231;958:67;;;;328:4231;:::i;:::-;;;;:::i;:::-;958:67;328:4231;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;-1:-1:-1;328:4231:29;;-1:-1:-1;328:4231:29;;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;4469:15:10;328:4231:29;;:::o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;328:4231:29;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;328:4231:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2657:762;2972:16;328:4231;2657:762;2959:63;2657:762;328:4231;;:::i;:::-;;4511:16:10;328:4231:29;;:::i;:::-;4511:16:10;;:::i;:::-;2894:15:29;2890:38;;2657:762;2972:16;;;:::i;:::-;2990:14;328:4231;3016:5;328:4231;;-1:-1:-1;;;;;328:4231:29;;;;;2959:63;;:::i;:::-;328:4231;4469:15:10;328:4231:29;3327:35;328:4231;;:::i;:::-;;;;:::i;:::-;;;4469:15:10;3076:238:29;;;328:4231;3168:15;3076:238;;;328:4231;4469:15:10;3076:238:29;;;328:4231;;;:::i;:::-;3076:238;;;328:4231;;;:::i;:::-;3076:238;;;328:4231;3298:4;3076:238;;;328:4231;;;3571:18;328:4231;;;;;;;3327:35;328:4231;:::i;:::-;4469:15:10;328:4231:29;2657:762;:::o;2890:38::-;2911:17;328:4231;;;;;;:::i;:::-;2911:17;;:::i;:::-;2890:38;;;;325:1:10;;;;;;;;;;;:::o;:::-;328:4231:29;;325:1:10;;;;;;;1158:379:6;;;1335:142;1158:379;-1:-1:-1;;;;;1158:379:6;328:4231:29;325:1:10;328:4231:29;;325:1:10;;;;;;;;1335:142:6;;328:4231:29;1335:142:6;;;325:1:10;;;;;;;;;;;:::i;:::-;;;;;;328:4231:29;;325:1:10;;;;;;;328:4231:29;1335:142:6;328:4231:29;-1:-1:-1;1335:8:6;-1:-1:-1;;;;;328:4231:29;1335:142:6;;;;;;;-1:-1:-1;1335:142:6;;;1158:379;1488:22;;;-1:-1:-1;1488:22:6;;1158:379;:::o;1335:142::-;;;;;;;;;;;;;;:::i;:::-;;;;378:3:10;328:4231:29;;;;;;:::i;:::-;378:3:10;328:4231:29;;-1:-1:-1;;;378:3:10;;;;:::o;:::-;328:4231:29;;;378:3:10;;;;;;;;;;-1:-1:-1;378:3:10;;;:::o;:::-;;:::i;:::-;328:4231:29;;;;;;:::i;:::-;378:3:10;328:4231:29;;-1:-1:-1;;;378:3:10;;;;:::o;:::-;;-1:-1:-1;378:3:10;;;:::o;:::-;328:4231:29;;;;;;:::i;:::-;378:3:10;328:4231:29;;-1:-1:-1;;;378:3:10;;;;:::o;:::-;328:4231:29;;;;;;:::i;:::-;378:3:10;328:4231:29;;-1:-1:-1;;;378:3:10;;;;:::o;:::-;328:4231:29;;;378:3:10;;;;;;;;;-1:-1:-1;;378:3:10;;;;;;;:::o;:::-;;:::i;:::-;328:4231:29;;378:3:10;;;;;;;;;;;;:::o;:::-;328:4231:29;;;378:3:10;;;;;;;;;328:4231:29;;;;;;:::i;:::-;378:3:10;328:4231:29;;-1:-1:-1;;;378:3:10;;;;:::o;:::-;328:4231:29;;;;;;:::i;:::-;378:3:10;328:4231:29;;-1:-1:-1;;;378:3:10;;;;:::o;:::-;328:4231:29;;;;;;:::i;:::-;378:3:10;328:4231:29;;-1:-1:-1;;;378:3:10;;;;:::o;2161:1270::-;2277:32;;:::i;:::-;378:3;2316:34;378:3;;:::i;:::-;2316:34;;:::i;:::-;2376:26;378:3;;;;;:::i;:::-;;;;:::i;:::-;2376:26;;:::i;:::-;2410:30;378:3;;:::i;2410:30::-;2466:22;2474:13;;;378:3;;;;:::i;:::-;;;;:::i;2466:22::-;2496:28;378:3;;:::i;2496:28::-;2549:11;;;;;;;:::i;:::-;2572:9;;;;;328:4231:29;2568:227:10;;2161:1270;2805:30;;;;;;;328:4231:29;2801:346:10;;2161:1270;3157:14;;;;;;328:4231:29;3153:246:10;;2161:1270;3412:10;;:14;2161:1270;:::o;3153:246::-;378:3;3192:31;378:3;;:::i;3192:31::-;3231:17;;;:::i;:::-;-1:-1:-1;3305:3:10;3282:14;;328:4231:29;;3278:25:10;;;;;3338:17;;;;3305:3;3338:17;;:::i;:::-;;;;:::i;:::-;3305:3;:::i;:::-;3263:13;;3278:25;;;;;3372:18;;;:::i;:::-;3153:246;;;2801:346;2860:20;;;378:3;;;;;:::i;:::-;;;;:::i;:::-;2860:39;2856:88;;3157:14;378:3;3016:29;3109:30;378:3;2951:37;378:3;;:::i;:::-;2951:37;;:::i;:::-;378:3;;;;:::i;:::-;;;;:::i;:::-;3016:29;;:::i;:::-;3054;378:3;;:::i;:::-;3054:29;;:::i;:::-;3109:30;;;:::i;:::-;2801:346;;2856:88;2474:13;328:4231:29;-1:-1:-1;;;2918:17:10;;;;;2568:227;378:3;2602:26;378:3;;:::i;:::-;2602:26;;:::i;:::-;2636:17;;;:::i;:::-;-1:-1:-1;2705:3:10;2687:9;;328:4231:29;;2683:20:10;;;;;2739:12;;;;2705:3;2739:12;;:::i;:::-;;;;:::i;2705:3::-;2668:13;;2683:20;;;;;2768:18;;;:::i;:::-;2568:227;;;3780:307;328:4231:29;;3940:25:10;3936:51;;-1:-1:-1;328:4231:29;;;4032:13:10;;;328:4231:29;4062:11:10;;:20;3780:307::o;3936:51::-;328:4231:29;;-1:-1:-1;;;3974:13:10;;;;;5830:148;328:4231:29;;5914:16:10;5910:40;;5957:9;;:16;5830:148::o;5910:40::-;328:4231:29;;-1:-1:-1;;;5939:11:10;;;;;328:4231:29;;;;;;;:::i;:::-;-1:-1:-1;328:4231:29;;;;;;;:::o;1490:173:14:-;328:4231:29;;;;;:::i;:::-;;;:::i;:::-;;;;;;;-1:-1:-1;328:4231:29;;;;:::i;:::-;;378:3:10;328:4231:29;1251:12:13;;328:4231:29;;1284:265:13;;;;-1:-1:-1;1284:265:13;;;;;;;;;;-1:-1:-1;1284:265:13;328:4231:29;1284:265:13;328:4231:29;1490:173:14;:::o;328:4231:29:-;-1:-1:-1;;328:4231:29;;;;;;;;:::o;:::-;;3084:12:13;328:4231:29;;;;;;;:::o;:::-;;;;;;;;;;:::o;1020:555:13:-;;328:4231:29;;:::i;:::-;;;;;1119:18:13;1115:81;;1020:555;1251:12;;1130:2;1251:12;;328:4231:29;1284:265:13;;;;;;-1:-1:-1;1284:265:13;;;;1130:2;1284:265;;;;;;;;1020:555;:::o;1115:81::-;1130:2;328:4231:29;1130:2:13;328:4231:29;;;;;;;;;;;1115:81:13;;;1832:202:14;;1916:7;;328:4231:29;;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;1832:202:14;1942:39;5128:12:13;2009:17:14;5204:416:13;;;;;;;;;;;;;1832:202:14;328:4231:29;;;;2009:17:14;5128:12:13;2009:17:14;;328:4231:29;5128:12:13;2009:17:14;;;;;:::i;:::-;;:::i;5204:416:13:-;;;;;;5117:77;328:4231:29;5106:1:13;328:4231:29;;;;;5181:1:13;328:4231:29;;;;;;;5128:12:13;2099:7;2145:19;2009:17:14;2099:7:13;2116:19;1942:39:14;2099:7:13;;2116:19;;;:::i;:::-;;2145;;:::i;:::-;;5117:77;;;;;;328:4231:29;;;;;;;;;3138:1:13;328:4231:29;;;;;;;:::o;4948:699:13:-;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6838:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5204:416::-;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;:::-;;2145;;:::i;:::-;;5117:77;;4948:699;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6721:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;2145:::-;;5117:77;;4948:699;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6579:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;2145:::-;;5117:77;;4948:699;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6441:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;2145:::-;;5117:77;;4948:699;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6838:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;2145:::-;;5117:77;;4948:699;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6721:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;2145:::-;;5117:77;;4948:699;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6579:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;2145:::-;;5117:77;;4948:699;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;6441:17:14;5128:12:13;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;2145:::-;;5117:77;;4948:699;;328:4231:29;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4948:699;5128:12;5204:416;;;;;;;;;;;;;5630:10;;4948:699;:::o;5117:77::-;328:4231:29;5106:1:13;328:4231:29;;;;5181:1:13;328:4231:29;;;;;;;2145:19:13;2099:7;2116:19;2099:7;;2116:19;;;:::i;:::-;;2145;;:::i;:::-;;5117:77;;2004:167;;2116:19;2099:7;;2116:19;;;:::i;:::-;;328:4231:29;;:::i;:::-;;;;;;;:::i;:::-;;2955:27:13;328:4231:29;;2963:18:13;;;2955:27;:::i;:::-;3004:7;;328:4231:29;3047:9:13;;;;;:::i;:::-;3084:12;;;;;;;;328:4231:29;3070:26:13;;3066:85;;2004:167;3198:507;;;;;;;;;;;;;2004:167;3198:507;;;3765:165;3772:9;;;;;;;328:4231:29;;;;4009:3:13;328:4231:29;;4045:189:13;;;;;;;;;;;;;2004:167::o;3783:9::-;3808:65;;3910:9;3886:10;3783:9;3808:65;;;;;3886:10;:::i;:::-;3910:9;;:::i;:::-;3783;;:::i;:::-;3765:165;;3198:507;;;;;;3066:85;3124:15;;;;:::i;:::-;;;:::i;:::-;3066:85;;4539:146;;328:4231:29;;:::i;:::-;;;;;;:::i;:::-;;2955:27:13;328:4231:29;;2963:18:13;;;2955:27;:::i;:::-;3004:7;;328:4231:29;3047:9:13;;;;;:::i;:::-;3084:12;;;;;;;328:4231:29;3070:26:13;;3066:85;;4539:146;3198:507;;;;;;;;;;;;;;4539:146;3198:507;;;3765:165;3772:9;;;;;;;328:4231:29;;;;4009:3:13;328:4231:29;;4045:189:13;;;;;;;;;;;;;4539:146;:::o;3783:9::-;3808:65;;3910:9;3886:10;3783:9;3808:65;;;;;3886:10;:::i;3783:9::-;3765:165;;3198:507;;;;;;3066:85;3124:15;;;;:::i;:::-;;;:::i;:::-;3066:85;;328:4231:29;;;;:::o;2828:187:14:-;328:4231:29;;2987:21:14;;2828:187;;-1:-1:-1;;;;;328:4231:29;;;6299:2:14;6290:11;;6299:2;;6317:48;:7;;328:4231:29;;6317:7:14;;328:4231:29;;;6317:48:14;;:::i;:::-;;6286:623;2987:7;:21;:::i;:::-;;2828:187::o;6286:623::-;-1:-1:-1;6395:4:14;6386:13;;6395:4;;6474:27;6415:7;:45;:7;;:45;:::i;:::-;;6474:7;;:27;:::i;:::-;;6286:623;;6382:527;6531:6;6522:15;;6531:6;;6612:27;6553:7;:45;:7;;:45;:::i;:::-;;6612:7;;:27;:::i;6518:391::-;6669:10;6660:19;;6669:10;;6754:27;6695:7;:45;:7;;:45;:::i;:::-;;6754:7;;:27;:::i;6656:253::-;6871:27;6812:7;:45;:7;;:45;:::i;:::-;;6871:7;;:27;:::i;3021:204::-;328:4231:29;;3190:28:14;;3021:204;;-1:-1:-1;;;;;328:4231:29;;;6299:2:14;6290:11;;6299:2;;6317:48;:7;;328:4231:29;;6317:7:14;;328:4231:29;;;6317:48:14;;:::i;6286:623::-;-1:-1:-1;6395:4:14;6386:13;;6395:4;;6474:27;6415:7;:45;:7;;:45;:::i;6382:527::-;6531:6;6522:15;;6531:6;;6612:27;6553:7;:45;:7;;:45;:::i;6518:391::-;6669:10;6660:19;;6669:10;;6754:27;6695:7;:45;:7;;:45;:::i;6656:253::-;6871:27;6812:7;:45;:7;;:45;:::i;3607:146::-;7035:7;;328:4231:29;;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;3607:146:14;7061:17;5128:12:13;5204:416;;;;;;;;;;;;;;3607:146:14;3732:9;;;328:4231:29;;;5106:1:13;328:4231:29;;;;;;;;3607:146:14:o;5204:416:13:-;;;;;;5117:77;328:4231:29;5106:1:13;328:4231:29;;;;;5181:1:13;328:4231:29;;;;;;;5128:12:13;2099:7;2145:19;2099:7;;2116:19;7061:17:14;2099:7:13;;2116:19;;;:::i;2145:::-;;5117:77;;;;;;4211:154:14;7035:7;;328:4231:29;;;:::i;:::-;;5058:7:13;;328:4231:29;5106:1:13;328:4231:29;;;;;;;;5128:12:13;;;328:4231:29;5121:19:13;;;5117:77;;4211:154:14;328:4231:29;5128:12:13;5204:416;;;;;;;;;;;;;;4211:154:14;-1:-1:-1;;4344:9:14;328:4231:29;;-1:-1:-1;;328:4231:29;;;4344:9:14;328:4231:29;;;;;4211:154:14:o;5204:416:13:-;;;;;;5117:77;328:4231:29;5106:1:13;328:4231:29;;;;;5181:1:13;328:4231:29;;;;;;;5128:12:13;2099:7;2145:19;2099:7;;2116:19;328:4231:29;2099:7:13;;2116:19;;;:::i;2145:::-;;5117:77;;;;;;8083:795;;328:4231:29;;:::i;:::-;;8200:7:13;;328:4231:29;;6896:1:14;328:4231:29;;;6896:1:14;328:4231:29;;;8280:12:13;;;328:4231:29;8266:26:13;;8262:85;;8083:795;6896:1:14;8395:457:13;;;;;;;-1:-1:-1;;;;;8395:457:13;;;;;;;;;;;;;8861:10;;8083:795;:::o;8262:85::-;328:4231:29;;;;;;8334:1:13;328:4231:29;;;;;;;8320:15:13;;;;:::i;:::-;8262:85;;8083:795;;328:4231:29;;:::i;:::-;;8200:7:13;;328:4231:29;;6779:1:14;328:4231:29;;;6779:1:14;328:4231:29;;;8280:12:13;;;328:4231:29;8266:26:13;;8262:85;;8083:795;6779:1:14;8395:457:13;;;;;;;328:4231:29;8395:457:13;;;;;;;;;;;;;8861:10;;8083:795;:::o;8262:85::-;328:4231:29;;;;;;8334:1:13;328:4231:29;;;;;;;8320:15:13;;;;:::i;:::-;8262:85;;8083:795;;328:4231:29;;:::i;:::-;;8200:7:13;;328:4231:29;;6637:1:14;328:4231:29;;;6637:1:14;328:4231:29;;;8280:12:13;;;328:4231:29;8266:26:13;;8262:85;;8083:795;6637:1:14;8395:457:13;;;;;;;;;;;;;;;;;;;;;8861:10;;8083:795;:::o;8262:85::-;328:4231:29;;;;;;6637:1:14;328:4231:29;;;;;;;8320:15:13;;;;:::i;:::-;8262:85;;8083:795;;328:4231:29;;:::i;:::-;;8200:7:13;;328:4231:29;;6499:1:14;328:4231:29;;;6499:1:14;328:4231:29;;;8280:12:13;;;328:4231:29;8266:26:13;;8262:85;;8083:795;6499:1:14;8395:457:13;;;;;;328:4231:29;;;8395:457:13;;;;;;;;;;;;8861:10;;8083:795;:::o;8262:85::-;328:4231:29;6499:1:14;328:4231:29;;;;8334:1:13;328:4231:29;;;;;;;8320:15:13;;;;:::i;:::-;8262:85;;328:4231:29;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1386600","executionCost":"infinite","totalCost":"infinite"},"external":{"handleOracleFulfillment(bytes32,bytes,bytes)":"infinite","returnFunctionsInfo(bytes32)":"4540","s_lastRequestId()":"2319","sendRequest(string[])":"infinite","vehicleDataMapping(bytes32)":"infinite"},"internal":{"fulfillRequest(bytes32,bytes memory,bytes memory)":"infinite"}},"methodIdentifiers":{"handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175","returnFunctionsInfo(bytes32)":"c972ebb6","s_lastRequestId()":"b1e21749","sendRequest(string[])":"4c8f60a3","vehicleDataMapping(bytes32)":"e6ee9020"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_routerFunctions\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_donID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"returnFunctionsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"vehicleDataMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"uintValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"responseTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lastResponse\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"lastError\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isRequest\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HorizonFunctions.sol\":\"HorizonFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/HorizonFujiAssistant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ncontract HorizonFujiAssistant {\\r\\n\\r\\n    /*CONVERTER FUNCTION */\\r\\n    function stringToUint(string memory s) public pure returns (uint) {\\r\\n        bytes memory b = bytes(s);\\r\\n        uint result = 0;\\r\\n        bool decimalFound = false;\\r\\n        uint decimalPlace = 0;\\r\\n\\r\\n        for (uint i = 0; i < b.length; i++) {\\r\\n            if (b[i] == 'R' || b[i] == '$' || b[i] == '.' || b[i] == ' ') {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (b[i] == ',') {\\r\\n                decimalFound = true;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (b[i] >= 0x30 && b[i] <= 0x39) { // ASCII '0' \\u00e9 48\\r\\n                result = result * 10 + (uint8(b[i]) - 48);\\r\\n                if (decimalFound) {\\r\\n                    decimalPlace++;\\r\\n                    if (decimalPlace >= 2) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            } else {\\r\\n                revert(\\\"That is not a valid string\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (decimalPlace < 2) {\\r\\n            if (decimalPlace == 1) {\\r\\n                result *= 10;\\r\\n            } else if (decimalPlace == 0 && decimalFound) {\\r\\n                result *= 100;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4fa30f43f33199dd8cee65b262be676306db81180e91c46dd626fea4e58d4f1c\",\"license\":\"MIT\"},\"contracts/HorizonFunctions.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\r\\n// pragma solidity 0.8.19;\\r\\n\\r\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\\\";\\r\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\\\";\\r\\nimport \\\"./HorizonFujiAssistant.sol\\\";\\r\\n\\r\\ncontract HorizonFunctions is FunctionsClient{\\r\\n    using FunctionsRequest for FunctionsRequest.Request;\\r\\n\\r\\n    // State variables to store the last request ID, response, and error\\r\\n    bytes32 public s_lastRequestId;\\r\\n\\r\\n    // Custom error type\\r\\n    error UnexpectedRequestID(bytes32 requestId);\\r\\n\\r\\n    // Event to log responses\\r\\n    event Response( bytes32 indexed requestId, bytes response, bytes err);\\r\\n\\r\\n    struct VehicleData {\\r\\n        string value;\\r\\n        uint uintValue;\\r\\n        uint requestTime;\\r\\n        uint responseTime;\\r\\n        bytes lastResponse;\\r\\n        bytes lastError;\\r\\n        bool isRequest;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 requestId => VehicleData) public vehicleDataMapping;\\r\\n\\r\\n    uint64 private subscriptionId;\\r\\n    address router;\\r\\n    uint32 gasLimit;\\r\\n    bytes32 donID;\\r\\n\\r\\n    // JavaScript source code\\r\\n    // Fetch vehicle value from the FIPE API.\\r\\n    // Documentation: https://github.com/deividfortuna/fipe\\r\\n    string source =\\r\\n        \\\"const tipoAutomovel = args[0];\\\" //motos\\r\\n        \\\"const idMarca = args[1];\\\" //77\\r\\n        \\\"const idModelo = args[2];\\\" //5223\\r\\n        \\\"const dataModelo = args[3];\\\" //2015-1\\r\\n        \\\"const apiResponse = await Functions.makeHttpRequest({\\\"\\r\\n            \\\"url: `https://parallelum.com.br/fipe/api/v1/${tipoAutomovel}/marcas/${idMarca}/modelos/${idModelo}/anos/${dataModelo}`\\\"\\r\\n        \\\"});\\\"\\r\\n        \\\"if (apiResponse.error) {\\\"\\r\\n        \\\"throw Error('Request failed');\\\"\\r\\n        \\\"}\\\"\\r\\n        \\\"const { data } = apiResponse;\\\"\\r\\n        \\\"return Functions.encodeString(data.Valor);\\\";\\r\\n\\r\\n    HorizonFujiAssistant assistant = HorizonFujiAssistant(payable(0x5FA769922a6428758fb44453815e2c436c57C3c7));//FALTA O ENDERE\\u00c7O\\r\\n\\r\\n    constructor(uint64 _subscriptionId, //770\\r\\n                address _routerFunctions, // 0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0 - Fuji\\r\\n                uint32 _gasLimit, // 300000\\r\\n                bytes32 _donID // 0x66756e2d6176616c616e6368652d66756a692d31000000000000000000000000 - Fuji\\r\\n                ) FunctionsClient(_routerFunctions) {\\r\\n        subscriptionId = _subscriptionId; //770\\r\\n        router = _routerFunctions; // 0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0 - Fuji\\r\\n        gasLimit = _gasLimit; // 300000\\r\\n        donID = _donID; // 0x66756e2d6176616c616e6368652d66756a692d31000000000000000000000000 - Fuji\\r\\n    }\\r\\n\\r\\n    function sendRequest(string[] calldata args) external returns (bytes32 requestId) { //[\\\"motos\\\",77,5223,\\\"2015-1\\\"]\\r\\n\\r\\n        FunctionsRequest.Request memory req;\\r\\n\\r\\n        req.initializeRequestForInlineJavaScript(source);\\r\\n\\r\\n        if (args.length > 0) req.setArgs(args);\\r\\n\\r\\n        s_lastRequestId = _sendRequest(req.encodeCBOR(), subscriptionId, gasLimit, donID);\\r\\n        \\r\\n        VehicleData memory vehicleInfo = VehicleData ({\\r\\n            value: \\\"\\\",\\r\\n            uintValue: 0,\\r\\n            requestTime: block.timestamp,\\r\\n            responseTime: 0,\\r\\n            lastResponse: \\\"\\\",\\r\\n            lastError: \\\"\\\",\\r\\n            isRequest: true\\r\\n        });\\r\\n\\r\\n        vehicleDataMapping[s_lastRequestId] = vehicleInfo;\\r\\n\\r\\n        return s_lastRequestId;\\r\\n    }\\r\\n\\r\\n    function fulfillRequest( bytes32 requestId, bytes memory response, bytes memory err) internal override {\\r\\n        VehicleData storage vehicle = vehicleDataMapping[requestId];\\r\\n\\r\\n        if (vehicle.isRequest == false) {\\r\\n            revert UnexpectedRequestID(requestId); // Check if request IDs match\\r\\n        }\\r\\n\\r\\n        // Update the vehicle mapping with the response and any errors\\r\\n        vehicle.lastResponse = response;\\r\\n        vehicle.lastError = err;\\r\\n        vehicle.value = string(response);\\r\\n        vehicle.responseTime = block.timestamp;\\r\\n\\r\\n        uint valueConverted = assistant.stringToUint(vehicle.value); //I need convert into USdolars\\r\\n\\r\\n        vehicle.uintValue = (valueConverted / 5);\\r\\n\\r\\n        // Emit an event to log the response\\r\\n        emit Response(requestId, response, err);\\r\\n    }\\r\\n\\r\\n    function returnFunctionsInfo(bytes32 requestId) external view returns(uint, uint){\\r\\n        VehicleData storage vehicle = vehicleDataMapping[requestId];\\r\\n        uint vehicleValue = vehicle.uintValue;\\r\\n        uint responseTime = vehicle.responseTime;\\r\\n\\r\\n        return (vehicleValue, responseTime);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3078493dfd9fdc2750452f5436adfeac01ec3992530f48dae7a8623be50e00b7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7191,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"s_lastRequestId","offset":0,"slot":"0","type":"t_bytes32"},{"astId":7223,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"vehicleDataMapping","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(VehicleData)7218_storage)"},{"astId":7225,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"subscriptionId","offset":0,"slot":"2","type":"t_uint64"},{"astId":7227,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"router","offset":8,"slot":"2","type":"t_address"},{"astId":7229,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"gasLimit","offset":28,"slot":"2","type":"t_uint32"},{"astId":7231,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"donID","offset":0,"slot":"3","type":"t_bytes32"},{"astId":7234,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"source","offset":0,"slot":"4","type":"t_string_storage"},{"astId":7243,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"assistant","offset":0,"slot":"5","type":"t_contract(HorizonFujiAssistant)5606"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(HorizonFujiAssistant)5606":{"encoding":"inplace","label":"contract HorizonFujiAssistant","numberOfBytes":"20"},"t_mapping(t_bytes32,t_struct(VehicleData)7218_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct HorizonFunctions.VehicleData)","numberOfBytes":"32","value":"t_struct(VehicleData)7218_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(VehicleData)7218_storage":{"encoding":"inplace","label":"struct HorizonFunctions.VehicleData","members":[{"astId":7205,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"value","offset":0,"slot":"0","type":"t_string_storage"},{"astId":7207,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"uintValue","offset":0,"slot":"1","type":"t_uint256"},{"astId":7209,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"requestTime","offset":0,"slot":"2","type":"t_uint256"},{"astId":7211,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"responseTime","offset":0,"slot":"3","type":"t_uint256"},{"astId":7213,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"lastResponse","offset":0,"slot":"4","type":"t_bytes_storage"},{"astId":7215,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"lastError","offset":0,"slot":"5","type":"t_bytes_storage"},{"astId":7217,"contract":"contracts/HorizonFunctions.sol:HorizonFunctions","label":"isRequest","offset":0,"slot":"6","type":"t_bool"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"kind":"user","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."}},"version":1}}}}}}